{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///exsurge.min.js","webpack:///webpack/bootstrap 5ccd8d780914631b68f1","webpack:///./src/index.js","webpack:///./src/Exsurge.Core.js","webpack:///./src/Exsurge.Text.js","webpack:///./src/Exsurge.Glyphs.js","webpack:///./src/Exsurge.Drawing.js","webpack:///./src/Exsurge.Chant.js","webpack:///./src/Exsurge.Chant.ChantLine.js","webpack:///./src/Exsurge.Chant.Markings.js","webpack:///./src/Exsurge.Chant.Signs.js","webpack:///./src/Exsurge.Gabc.js","webpack:///./src/Exsurge.Chant.Neumes.js","webpack:///./src/Exsurge.Titles.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","Object","defineProperty","value","_ExsurgeCore","keys","forEach","key","enumerable","get","_ExsurgeText","_ExsurgeGlyphs","_ExsurgeDrawing","_ExsurgeChant","_ExsurgeChantChantLine","_ExsurgeChantMarkings","_ExsurgeChantSigns","_ExsurgeChantNeumes","_ExsurgeGabc","_ExsurgeTitles","_classCallCheck","instance","Constructor","TypeError","DeviceIndependent","n","Centimeters","Units","ToDeviceIndependent","Millimeters","Inches","ToCentimeters","FromDeviceIndependent","ToMillimeters","ToInches","generateRandomGuid","s4","Math","floor","random","toString","substring","getCssForProperties","properties","entries","map","_ref","_ref2","_slicedToArray","val","join","sliceIterator","arr","i","_arr","_n","_d","_e","undefined","_s","_i","Symbol","iterator","next","done","push","length","err","Array","isArray","_createClass","defineProperties","target","props","descriptor","configurable","writable","protoProps","staticProps","prototype","DeviceIndepenedent","DIU_PER_INCH","DIU_PER_CENTIMETER","inputUnits","outputUnits","StringToUnitsType","s","ToLower","UnitsTypeToString","units","Point","x","y","point","Step","Rect","width","height","Infinity","rect","other","right","max","bottom","min","Margins","left","top","margins","Size","size","Do","Du","Re","Me","Mi","Fa","Fu","So","La","Te","Ti","__StepToStaffPosition","__StaffOffsetToStep","Pitch","step","octave","toInt","pitch","offset","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","Language","name","centerNeume","text","parsedWords","words","split","end","syllabifyWord","English","_Language","_this","getPrototypeOf","startIndex","regexLetter","match","exec","slice","found","index","Latin","_Language2","_this2","diphthongs","possibleDiphthongs","concat","regexVowel","wordExceptions","vowels","vowelsThatMightBeConsonants","muteConsonantsAndF","liquidConsonants","isVowelThatMightBeConsonant","isVowel","word","lookahead","haveLookahead","syllables","haveCompleteSyllable","previousWasVowel","workingString","toLowerCase","startSyllable","makeSyllable","substr","wordLength","cIsVowel","isDiphthong","isMuteConsonantOrF","isLiquidConsonant","Spanish","_Language3","_this3","weakVowels","strongVowels","uDiphthongExceptions","previousIsVowel","previousIsStrongVowel","cIsStrongVowel","isStrongVowel","createSyllable","consonant2","numberOfConsonants","j","d","indexOf","tripthong","endj","findVowelSegment","language","english","latin","spanish","Glyphs","None","paths","type","data","bounds","origin","align","AcuteAccent","GraveAccent","Circle","Semicircle","ReversedSemicircle","Stropha","BeginningAscLiquescent","BeginningDesLiquescent","CustosDescLong","CustosDescShort","CustosLong","CustosShort","DoClef","FaClef","Flat","Mora","Natural","Sharp","OriscusAsc","OriscusDes","OriscusLiquescent","PodatusLower","PodatusUpper","Porrectus1","Porrectus2","Porrectus3","Porrectus4","PunctumCavum","PunctumQuadratum","PunctumQuadratumLiquescent","PunctumQuadratumAscLiquescent","PunctumQuadratumDesLiquescent","PunctumInclinatum","PunctumInclinatumLiquescent","Quilisma","TerminatingAscLiquescent","TerminatingDesLiquescent","VerticalEpisemaAbove","VerticalEpisemaBelow","VirgaLong","VirgaShort","Virgula","_toConsumableArray","arr2","from","getFontFilenameForProperties","arguments","url","italic","bold","replace","MarkupStackFrame","tagName","ChantNotationElement","Annotations","Annotation","TextLeftRight","Subtitle","Title","Supertitle","TitleTextElement","DropCap","TranslationText","AboveLinesText","ChoralSign","Lyric","LyricArray","LyricType","TextElement","TextSpan","CurlyBraceVisualizer","RoundBraceVisualizer","GlyphVisualizer","LineaVisualizer","VirgaLineVisualizer","NeumeLineVisualizer","DividerLineVisualizer","ChantLayoutElement","ChantContext","TextMeasuringStrategy","QuickSvg","GlyphCode","DefaultTrailingSpace","TextTypesByClass","TextTypes","MarkingPositionHint","_get","object","property","receiver","Function","desc","getOwnPropertyDescriptor","parent","getter","canAccessDOM","document","__getNeumeFromSvgElem","score","elem","note","notes","parentElement","querySelector","getAttribute","neume","Default","Above","Below","supertitle","display","defaultSize","containedInScore","titles","hasSupertitle","getFromScore","title","hasTitle","subtitle","hasSubtitle","leftRight","cssClass","hasTextLeft","hasTextRight","extraClass","getFromSvgElem","classList","contains","annotation","mergeAnnotationWithTextLeft","dropCap","_ref$elementIndex","elementIndex","annotations","al","hasAboveLinesText","notations","notation","notationIndex","alText","alIndex","choralSign","ctxt","staffInterval","lyric","hasLyrics","lyrics","lyricIndex","translation","hasTranslations","translationText","translationIndex","_ref3","entry","intraNeumeSpacing","interSyllabicMultiplier","isDefault","StrophaLiquescent","UpperBrace","ns","xmlns","xlink","hasDOMAccess","svg","node","createElementNS","setAttribute","setAttributeNS","defs","appendChild","clearNotations","removeChild","hasChildNodes","lastChild","line","x1","y1","x2","y2","g","tspan","str","textContent","use","nodeRef","svgFragmentForGlyph","glyph","svgSrc","path","createFragment","fill","nodesForGlyph","functionName","nodes","createNode","attributes","children","source","attr","hasOwnProperty","createSvgTree","_len","_key","className","class","convertKeysToCamelCase","obj","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","test","camelCase","whole","letter","toUpperCase","return","style","sourceGabc","child","fragment","parseFragment","well","createElement","container","innerHTML","il","firstChild","childNodes","translate","scale","sx","sy","Svg","Canvas","OpenTypeJS","specialCharMap","℣","℟","textMeasuringStrategy","makeDefs","defsNode","textStyles","textColor","setFont","rubricColor","specialCharProperties","font-family","textBeforeSpecialChar","textAfterSpecialChar","specialCharText","char","fontStyleDictionary","b","font-weight","font-style","u","text-decoration","ul","sc","font-variant","font-variant-caps","font-feature-settings","-webkit-font-feature-settings","v","markupSymbolDictionary","*","_","^","%","prefix","padding","minLedgerSeparation","minSpaceAboveStaff","minSpaceBelowStaff","spaceBetweenSystems","glyphPunctumWidth","glyphPunctumHeight","maxExtraSpaceInStaffIntervals","activeClef","neumeLineColor","staffLineColor","dividerLineColor","defaultLanguage","pixelRatio","window","devicePixelRatio","svgTextMeasurer","body","insertBefore","makeCanvasIfNeeded","syllableConnector","scaleDefs","setGlyphScaling","accidentalSpaceMultiplier","interVerbalMultiplier","drawGuides","drawDebuggingBounds","activeNotations","currNotationIndex","condensingTolerance","autoColor","useExtraTextOnly","noteIdPrefix","insertFontsInDoc","fontFamily","keyWithFontFamily","fontDictionary","Regular","font","baseStyle","opentypeFontDictionary","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_step2$value","textType","textStyle","color","baseTextStyle","glyphScaling","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_step3$value","_textStyles$key","createStyleCss","hyphen","SingleSyllable","multiplier","minLyricWordSpacing","hyphenWidth","staffHeight","staffLineWeight","ceil","neumeLineWeight","dividerLineWeight","episemaLineWeight","updateHyphenWidth","staffPosition","styleElement","getElementById","head","isNeume","hasNoWidth","canvas","canvasCtxt","getContext","setTransform","selected","highlighted","_ChantLayoutElement","staffPosition0","staffPosition1","divider","y0","calculateHeightFromStaffPosition","temp","fillStyle","fillRect","sourceIndex","getSvgProps","_ChantLayoutElement2","note0","note1","hanging","abs","_ChantLayoutElement3","_ChantLayoutElement4","_this4","_this5","_this6","apply","_this7","_ChantLayoutElement5","glyphCode","_this8","setGlyph","_this9","getDefProps","options","transform","makeDef","makeSvgTree","Path2D","noteIndex","nextNote","isSelected","model","result","xlink:href","glyphVisualizer","getSvgAttributes","_ChantLayoutElement6","isAbove","_this10","braceHeight","generatePathString","stroke","stroke-width","getSvgPathProps","accent","createSvgNode","createSvgFragment","dx","dy","cx1","cy","cx2","dp","toFixed","_ChantLayoutElement7","addAcuteAccent","_this11","union","h","q","qy1","qx2","qy2","tx1","ty1","qy3","qx4","qy4","activeTags","createStackFrame","__subsForTspans","&","<",">","_ChantLayoutElement8","fontSize","textAnchor","_this12","dominantBaseline","generateSpansFromText","recalculateMetrics","_this13","spans","markupStack","spanStartIndex","newLineInNextSpan","filterFrames","frame","symbol","closeSpan","spanText","extraProperties","assign","newLine","markupRegex","openedAsterisk","closeCurrentSpan","_match","_match2","specialChar","specialChar2","specialChar3","markupSymbol","closingTag","enclosedText","pop","filter","findIndex","splice","parseFloat","resize","measureSubstring","returnBBox","lines","widths","newLineSpans","subStringLength","numLines","bbox","span","myText","parseInt","rightAligned","xOffset","firstLineMaxWidth","getCanvasFontForProperties","metrics","measureText","actualBoundingBoxLeft","actualBoundingBoxAscent","actualBoundingBoxDescent","getFontForProperties","features","liga","smcp","spanFontSize","subBbox","getPath","getBoundingBox","subWidth","getAdvanceWidth","resetNewLines","maxWidth","createStyleNode","getBBox","measureSubstringBBox","reduce","percentage","lastWidth","lastMatch","regex","_spans","spanIndex","splitSpan","textLeft","textRight","newSpans","needsLayout","textAlign","translateWidth","translateHeight","count","getExtraStyleProperties","fillText","textLength","source-index","getCssClasses","trim","text-anchor","useStyleObject","lengthAdjust","getSpanOptions","extraStyleProperties","svgNode","escapeForTspan","setFontFamilyAttributes","string","String","BeginningSyllable","MiddleSyllable","EndingSyllable","Directive","getLeft","lyricArray","NaN","Number","MAX_VALUE","getRight","presumeConnectorNeeded","MIN_VALUE","l","allowsConnector","needsConnector","getConnectorWidth","hasOnlyOneLyric","originalText","indexOfLyric","mergeIn","newLyrics","mergeInArray","setNotation","_TextElement","lyricType","_this14","centerStartIndex","centerLength","connectorSpan","force","forceConnector","needs","setConnectorWidth","widthWithoutConnector","connectorWidth","defaultConnectorWidth","setNeedsConnector","activeLanguage","vowelSegmentWidth","getSubStringLength","lastIndexOf","dropCapSpan","clone","dropCapLowerCase","dropCapSourceGabcLength","classes","_TextElement2","_this15","positionHint","_TextElement3","_this16","_TextElement4","gabcSource","anchor","_this17","_TextElement5","_this18","_TextElement6","_TitleTextElement","_this20","_TitleTextElement2","_this21","_TitleTextElement3","_this22","_TitleTextElement4","_this23","headerKey","_TextElement7","_this24","_ChantLayoutElement9","_this25","_len2","texts","_key2","updateBounds","draw","_ChantLayoutElement10","_this26","leadingSpace","trailingSpace","keepWithNext","visualizers","chantLayoutElement","ignoreBounds","isEmpty","unshift","calculatedTrailingSpace","_this27","calculateLyricX","inner","getInnerSvgNodes","svgProps","ChantDocument","ChantScore","ChantMapping","ChantLineBreak","TextOnly","Clef","Note","NoteShapeModifiers","NoteShape","LiquescentType","Large","Small","Ascending","Descending","InitioDebilis","LargeAscending","LargeDescending","SmallAscending","SmallDescending","Virga","Inclinatum","Oriscus","Cavum","Stemmed","Linea","Reverse","liquescent","shape","shapeModifiers","episemata","morae","setStaffPosition","shapeModifier","_ChantNotationElement","defaultAccidental","isClef","activeAccidental","performLayout","accidentalGlyph","createGlyphVisualizer","addVisualizer","__defaultDoClef","_Clef","stepToStaffOffset","octaveOffset","staffOffsetToStep","accidentalType","finishLayout","_Clef2","_ChantNotationElement2","sourceLength","__connectorSpan","_ChantNotationElement3","justify","lb","__mergeAnnotationWithTextLeft","annotationSpans","mappings","useDropCap","Titles","startingClef","compiled","autoColoring","updateNotations","startLine","endLine","lastLine","selection","elementSelection","element","indices","selectedIndices","insertion","afterElementIndex","includes","insertionCursor","insertionElement","insertionLine","chantLine","InsertionCursor","mapping","nonNoteElementCount","default","elements","recreateDropCap","generateDropCap","initializeLayout","finishedCallback","setTimeout","onFontLoaded","performLayoutAsync","layoutElementsAsync","timeout","Date","getTime","overrideTextLeft","mapAnnotationSpansToTextLeft","layoutTitles","currIndex","ChantLine","buildFromChantNotationIndex","notationsStartIndex","numNotationsOnLine","pages","updateSelection","pageHeightOffset","startLineIndex","pageHeight","copyLines","setCanvasSize","clearRect","zoom","version","editable","viewBox","cloneNode","createStyleTree","def","createStyle","lineFragment","fragmentDefs","xmlns:xlink","createDropCap","Gabc","parseChantNotations","unsanitizedText","defaults","layout","default-font","font-size","page","margin-left","margin-top","margin-right","margin-bottom","scores","copyLayout","to","unserializeFromJson","serializeToJson","notationBounds","staffLeft","staffRight","custos","ledgerLines","braces","nextLine","previousLine","lyricLineHeight","lyricLineBaseline","numLyricLines","spaceAfterNotations","spaceBetweenTextTracks","lastLyrics","lastNeumeIndex","extraTextOnlyIndex","lastIndex","altLineHeight","altLineBaseline","numAltLines","translationLineHeight","translationLineBaseline","numTranslationLines","notationBoundsOffset","extraTextOnlyHeight","extraTextOnlyLyricIndex","lastNotation","extraLines","lineWidth","lowestPossibleAnnotationY","lyricAndTextRect","altLineTextRect","totalHeight","strokeStyle","beginPath","moveTo","lineTo","layoutInsertionCursor","ledgerLine","functionNames","quickSvg","getInnerNodes","element-index","len","qx1","qx3","newElementStart","beginningLyrics","prev","prevNeume","prevLyrics","condensableSpaces","paddingLeft","DoubleBar","newLyric","elidesToNext","MAX_SAFE_INTEGER","minX","a","curr","rightNotationBoundary","lastTranslationTextWithEndNeume","lastNotationIndex","lastStartBrace","lastLyricsBeforeTextOnly","textOnlyStartIndex","actualRightBoundary","Custos","isDivider","forceBreak","fitsOnLine","positionNotationElement","candidateForExtraTextOnlyLine","currentLyric","nextNotation","firstOnLine","startExtraTextOnlyFromFirst","lastNotationWithLyrics","reverse","find","lastLyricRight","setMaxWidth","isTextOnlyBeforeDivider","firstDivider","every","cne","firstWithNoWidth","allowLineBreakBeforeNext","maxNumNotationsOnLine","findNeumesToJustify","extraSpace","getWhitespaceOnRight","toJustify","sum","condensable","endNeume","last","isLastLine","whitespace","rightEdge","minHyphenWidth","justifyElements","centerDividers","oldBoundsX","barWidth","leftPoint","rightPoint","FullBar","nextOrCurr","isAccidental","lastRightNeume","lastRightLyric","doJustify","extraSpaceBeforeCustos","increment","toJustifyIndex","nextToJustify","incrementOffsetAtNextChance","startBrace","k","startNote","BraceShape","RoundBrace","getAttachmentX","braceEnd","AccentedCurlyBrace","processElementForLedgerLine","endElem","offsetX","half","minY","maxY","positionNonLyricText","rightX","beyondStaffRight","ll","episema","spaceBetweenEpisemata","terminating","alignment","HorizontalEpisemaAlignment","Left","Center","Right","newY","newWidth","handleEndBrace","braceStart","nextNotationButOne","nextNoteButOne","BracePoint","BraceAttachment","space","fixedX","total","maxRight","currLyric","minLeft","firstOfSyllable","hasShifted","atLeastOneWithoutConnector","prevLyricRight","condensableSpacesSincePrevLyric","condensableSpaceSincePrevLyric","notationI","currLyricLeft","shift","spaceBetweenSyls","pLyrics","lastCondensable","useMidpoint","minIndex","maxIndex","curIndex","notationX","closenessToLeft","closenessToRight","Ictus","HorizontalEpisema","Accent","_GlyphVisualizer","minDistanceAway","punctumInclinatumShorten","prevNote","_GlyphVisualizer2","horizontalOffset","collisionWithEpisema","verticalOffset","shortOffset","extraOffset","collisionWithStaffLine","_GlyphVisualizer3","CurlyBrace","attachment","Accidental","AccidentalType","DominicanBar","HalfBar","QuarterBar","Divider","auto","findNextNeume","pitchToStaffPosition","getGlyphCode","resetsAccidentals","_Divider","_Divider2","_Divider3","_Divider4","_Divider5","parity","_Divider6","line0","line1","adjustStep","_Divider7","_interopRequireWildcard","__esModule","newObj","GabcHeader","Markings","Signs","Neumes","__syllablesRegex","__altTranslationRegex","__notationsRegex","__notationsRegex_group_insideBraces","__bracketedCommandRegex","__braceSpecRegex","TrailingSpaceForAccidental","TrailingSpaceMultiple","regexHeaderEnd","regexHeaderLine","regexHeaderComment","comments","cValues","original","txtHeader","arrayName","gabc","alternateKey","array","e","console","warn","elementCountForNotations","items","item","headerLength","getLength","splitWords","createMappingsFromWords","clef","before","after","oldIndexMap","startOld","startNew","subLength","inew","overlap","_overlap","iold","diffDescriptorsAndNewWords","newGabcSource","insertionIndex","oldInsertionIndex","newWords","results","lastTranslationNeumes","resultCode","resultValues","sourceIndexDiff","elementCount","createMappingFromWord","curNotation","prevIsAccidental","resetDependencies","resetAccidentals","staffPositionToPitch","automatic","needToEndBrace","transText","lastTranslationText","matches","currSyllable","lyricText","notationData","parseNotations","firstOfParentheses","notationWithLyrics","indexOffset","proposedLyricType","createSyllableLyrics","lyricTexts","indexClosingBracket","makeLyric","textIndex","centerEndIndex","elides","setForceConnector","baseSourceIndex","addToLastSourceGabc","addNotation","neumes","createNeumesFromNotes","prevNotation","RegExp","atom","gabcHeightToExsurgeHeight","noteArray","createNoteFromData","accidental","gabcHeightToExsurgePitch","bracketedNotations","finalTrailingSpace","firstNoteIndex","currNoteIndex","createNeume","includeCurrNote","lastNoteIndex","includePrevNote","addNote","unknownState","Punctum","handle","currNote","virgaState","apostrophaState","oriscusState","punctaInclinataState","punctumState","notesRemaining","state","ictus","podatusState","climacusState","clivisState","distrophaState","PunctaInclinata","PesQuassus","Clivis","Podatus","salicusState","scandicusState","pesSubpunctisState","torculusState","porrectusState","Climacus","Porrectus","PorrectusFlexus","PesSubpunctis","Salicus","salicusFlexusState","SalicusFlexus","Scandicus","scandicusFlexusState","ScandicusFlexus","bivirgaState","Bivirga","Trivirga","Apostropha","Distropha","tristrophaState","Tristropha","Torculus","prevNoteButOne","torculusResupinusState","TorculusResupinus","TorculusResupinusFlexus","mark","episemaNoteIndex","episemaNote","previousNote","previousMora","episemaHadModifier","newNote","shapeModifers","processInstructionForNote","instruction","sourceIndexOffset","cmd","above","attachmentPoint","gabcNotations","parseWords","gabcWords","parseWord","gabcWord","gabcHeight","charCodeAt","exsurgeHeight","Neume","NeumeBuilder","startingX","lastNote","lineIsHanging","previousNotation","withLineTo","noteAlignsRight","needsLine","linea","noteAt","lowerNote","upperNote","upperGlyph","lowerGlyph","upper","lower","lineFrom","prevStaffPosition","advanceWidth","multiple","start","requiresLedgerLine","positionMarkings","firstAbove","needsAbove","firstBelow","needsBelow","endI","position","positionEpisemata","bottomNote","topNote","positionEpisemataBelow","positionEpisemataAbove","positionPodatusEpisemata","positionPodatusMorae","firstNote","secondNote","thirdNote","hasTopEpisema","positionClivisMarkings","positionClivisMorae","positionClivisEpisemata","positionPodatusMarkings","first","second","third","fourth","_Neume","build","getNoteGlyphCode","_Neume2","virgaAt","advanceBy","_Neume3","_Neume4","positionInclinataMorae","withInclinata","_Neume5","withClivis","_Neume6","glyphCodes","glyphAdvance","_Neume7","nextNoteStaffPosition","_Neume8","lowerStaffPos","upperStaffPos","builder","withLineEndingAt","_Neume9","withPodatus","_Neume10","_Neume11","positionPorrectusMarkings","thirdGlyph","withPorrectusSwash","_Neume12","positionPorrectusFlexusMarkings","fourthGlyph","_Neume13","_Neume14","_Neume15","_Neume16","positionTorculusMarkings","_Neume17","_Neume18","_Neume19","glyph1","glyph3","note2","note3","_Neume20","firstGlyph","_Neume21","fifthGlyph","fifth","_Neume22","_Neume23","setSupertitle","setTitle","setSubtitle","setTextLeft","setTextRight","elementName","setBoundsX","finalY","el","_arr2","_i2","_arr3","_i3"],"mappings":"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","file":"exsurge.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"exsurge\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"exsurge\"] = factory();\n\telse\n\t\troot[\"exsurge\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"exsurge\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"exsurge\"] = factory();\n\telse\n\t\troot[\"exsurge\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t//\n\t// Author(s):\n\t// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n\t//\n\t// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a copy\n\t// of this software and associated documentation files (the \"Software\"), to deal\n\t// in the Software without restriction, including without limitation the rights\n\t// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t// copies of the Software, and to permit persons to whom the Software is\n\t// furnished to do so, subject to the following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included in\n\t// all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\t// THE SOFTWARE.\n\t//\n\t\n\t'use strict';\n\t\n\t// import { Annotation, ChantContext } from './Exsurge.Drawing.js'\n\t// import { Gabc } from './Exsurge.Gabc.js'\n\t//\n\t// // client side support\n\t//\n\t// if (typeof document !== 'undefined' && document.registerElement) {\n\t//   var ChantVisualElementPrototype = Object.create(HTMLElement.prototype);\n\t//\n\t//   ChantVisualElementPrototype.createdCallback = function() {\n\t//     var ctxt = new ChantContext();\n\t//\n\t//     ctxt.setFont(\"'Crimson Text', serif\", 19.2);\n\t//\n\t//     var useDropCap = true;\n\t//     var useDropCapAttr = this.getAttribute(\"use-drop-cap\");\n\t//     if (useDropCapAttr === 'false')\n\t//       useDropCap = false;\n\t//\n\t//     var score = Gabc.loadChantScore(ctxt, this.innerText, useDropCap);\n\t//\n\t//     var annotationAttr = this.getAttribute(\"annotation\");\n\t//     if (annotationAttr) {\n\t//       // add an annotation\n\t//       score.annotation = new Annotation(ctxt, annotationAttr);\n\t//     }\n\t//\n\t//     var _element = this;\n\t//\n\t//     var width = 0;\n\t//     var doLayout = function() {\n\t//       var newWidth = _element.parentElement.clientWidth;\n\t//       if(width === newWidth) return;\n\t//       width = newWidth;\n\t//       // perform layout on the chant\n\t//       score.performLayout(ctxt, function() {\n\t//         score.layoutChantLines(ctxt, width, function() {\n\t//           // render the score to svg code\n\t//           _element.appendElement(score.createSvgNode(ctxt));\n\t//         });\n\t//       });\n\t//     }\n\t//     doLayout();\n\t//     if (window.addEventListener)\n\t//       window.addEventListener('resize',doLayout,false);\n\t//     else if (window.attachEvent)\n\t//       window.attachEvent('onresize',doLayout);\n\t//   }\n\t//\n\t//   ChantVisualElementPrototype.attachedCallback = function() {\n\t//\n\t//   }\n\t//\n\t//   // register the custom element\n\t//   // if(window.customElements && window.customElements.define) {\n\t//   //   window.customElements.define('chant-visual', ChantVisualElementPrototype);\n\t//   // } else {\n\t//     document.registerElement('chant-visual', {\n\t//       prototype: ChantVisualElementPrototype\n\t//     });\n\t//   // }\n\t// }\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _ExsurgeCore = __webpack_require__(1);\n\t\n\tObject.keys(_ExsurgeCore).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _ExsurgeCore[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _ExsurgeText = __webpack_require__(2);\n\t\n\tObject.keys(_ExsurgeText).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _ExsurgeText[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _ExsurgeGlyphs = __webpack_require__(3);\n\t\n\tObject.keys(_ExsurgeGlyphs).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _ExsurgeGlyphs[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _ExsurgeDrawing = __webpack_require__(4);\n\t\n\tObject.keys(_ExsurgeDrawing).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _ExsurgeDrawing[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _ExsurgeChant = __webpack_require__(5);\n\t\n\tObject.keys(_ExsurgeChant).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _ExsurgeChant[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _ExsurgeChantChantLine = __webpack_require__(6);\n\t\n\tObject.keys(_ExsurgeChantChantLine).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _ExsurgeChantChantLine[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _ExsurgeChantMarkings = __webpack_require__(7);\n\t\n\tObject.keys(_ExsurgeChantMarkings).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _ExsurgeChantMarkings[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _ExsurgeChantSigns = __webpack_require__(8);\n\t\n\tObject.keys(_ExsurgeChantSigns).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _ExsurgeChantSigns[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _ExsurgeChantNeumes = __webpack_require__(10);\n\t\n\tObject.keys(_ExsurgeChantNeumes).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _ExsurgeChantNeumes[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _ExsurgeGabc = __webpack_require__(9);\n\t\n\tObject.keys(_ExsurgeGabc).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _ExsurgeGabc[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _ExsurgeTitles = __webpack_require__(11);\n\t\n\tObject.keys(_ExsurgeTitles).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _ExsurgeTitles[key];\n\t    }\n\t  });\n\t});\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\texports.DeviceIndependent = DeviceIndependent;\n\texports.Centimeters = Centimeters;\n\texports.Millimeters = Millimeters;\n\texports.Inches = Inches;\n\texports.ToCentimeters = ToCentimeters;\n\texports.ToMillimeters = ToMillimeters;\n\texports.ToInches = ToInches;\n\texports.generateRandomGuid = generateRandomGuid;\n\texports.getCssForProperties = getCssForProperties;\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t//\n\t// Author(s):\n\t// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n\t//\n\t// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a copy\n\t// of this software and associated documentation files (the \"Software\"), to deal\n\t// in the Software without restriction, including without limitation the rights\n\t// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t// copies of the Software, and to permit persons to whom the Software is\n\t// furnished to do so, subject to the following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included in\n\t// all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\t// THE SOFTWARE.\n\t//\n\t\n\tvar Units = exports.Units = {\n\t  // enums\n\t  DeviceIndepenedent: 0, // device independent units: 96/inch\n\t  Centimeters: 1,\n\t  Millimeters: 2,\n\t  Inches: 3,\n\t\n\t  // constants for device independent units (diu)\n\t  DIU_PER_INCH: 96,\n\t  DIU_PER_CENTIMETER: 96 / 2.54,\n\t\n\t  ToDeviceIndependent: function ToDeviceIndependent(n, inputUnits) {\n\t    switch (inputUnits) {\n\t      case Centimeters:\n\t        return n * Units.DIU_PER_CENTIMETER;\n\t      case Millimeters:\n\t        return n * Units.DIU_PER_CENTIMETER / 10;\n\t      case Inches:\n\t        return n * Units.DIU_PER_INCH;\n\t      default:\n\t        return n;\n\t    }\n\t  },\n\t\n\t  FromDeviceIndependent: function FromDeviceIndependent(n, outputUnits) {\n\t    switch (outputUnits) {\n\t      case Centimeters:\n\t        return n / Units.DIU_PER_CENTIMETER;\n\t      case Millimeters:\n\t        return n / Units.DIU_PER_CENTIMETER * 10;\n\t      case Inches:\n\t        return n / Units.DIU_PER_INCH;\n\t      default:\n\t        return n;\n\t    }\n\t  },\n\t\n\t  StringToUnitsType: function StringToUnitsType(s) {\n\t    switch (s.ToLower()) {\n\t      case \"in\":\n\t      case \"inches\":\n\t        return Units.Inches;\n\t\n\t      case \"cm\":\n\t      case \"centimeters\":\n\t        return Units.Centimeters;\n\t\n\t      case \"mm\":\n\t      case \"millimeters\":\n\t        return Units.Millimeters;\n\t\n\t      case \"di\":\n\t      case \"device-independent\":\n\t        return Units.DeviceIndepenedent;\n\t\n\t      default:\n\t        return Units.DeviceIndepenedent;\n\t    }\n\t  },\n\t\n\t  UnitsTypeToString: function UnitsTypeToString(units) {\n\t    switch (units) {\n\t      case Units.Inches:\n\t        return \"in\";\n\t      case Units.Centimeters:\n\t        return \"cm\";\n\t      case Units.Millimeters:\n\t        return \"mm\";\n\t      case Units.DeviceIndepenedent:\n\t        return \"device-independent\";\n\t      default:\n\t        return \"device-independent\";\n\t    }\n\t  }\n\t};\n\t\n\tfunction DeviceIndependent(n) {\n\t  return n;\n\t}\n\t\n\tfunction Centimeters(n) {\n\t  return Units.ToDeviceIndependent(n, Units.Centimeters);\n\t}\n\t\n\tfunction Millimeters(n) {\n\t  return Units.ToDeviceIndependent(n, Units.Millimeters);\n\t}\n\t\n\tfunction Inches(n) {\n\t  return Units.ToDeviceIndependent(n, Units.Inches);\n\t}\n\t\n\tfunction ToCentimeters(n) {\n\t  return Units.FromDeviceIndependent(n, Units.Centimeters);\n\t}\n\t\n\tfunction ToMillimeters(n) {\n\t  return Units.FromDeviceIndependent(n, Units.Millimeters);\n\t}\n\t\n\tfunction ToInches(n) {\n\t  return Units.FromDeviceIndependent(n, Units.Inches);\n\t}\n\t\n\t/*\n\t * Point\n\t */\n\t\n\tvar Point = exports.Point = function () {\n\t  function Point(x, y) {\n\t    _classCallCheck(this, Point);\n\t\n\t    this.x = typeof x !== 'undefined' ? x : 0;\n\t    this.y = typeof y !== 'undefined' ? y : 0;\n\t  }\n\t\n\t  _createClass(Point, [{\n\t    key: \"clone\",\n\t    value: function clone() {\n\t      return new Point(this.x, this.y);\n\t    }\n\t  }, {\n\t    key: \"equals\",\n\t    value: function equals(point) {\n\t      return this.x === point.x && this.y === point.y;\n\t    }\n\t  }]);\n\t\n\t  return Point;\n\t}();\n\t\n\t/*\n\t * Rect\n\t */\n\t\n\t\n\tvar Rect = exports.Rect = function () {\n\t  function Rect(x, y, width, height) {\n\t    _classCallCheck(this, Rect);\n\t\n\t    this.x = typeof x !== 'undefined' ? x : Infinity;\n\t    this.y = typeof y !== 'undefined' ? y : Infinity;\n\t    this.width = typeof width !== 'undefined' ? width : -Infinity;\n\t    this.height = typeof height !== 'undefined' ? height : -Infinity;\n\t  }\n\t\n\t  _createClass(Rect, [{\n\t    key: \"clone\",\n\t    value: function clone() {\n\t      return new Rect(this.x, this.y, this.width, this.height);\n\t    }\n\t  }, {\n\t    key: \"isEmpty\",\n\t    value: function isEmpty() {\n\t      return this.x === Infinity && this.y === Infinity && this.width === -Infinity && this.height === -Infinity;\n\t    }\n\t\n\t    // convenience method\n\t\n\t  }, {\n\t    key: \"right\",\n\t    value: function right() {\n\t      return this.x + this.width;\n\t    }\n\t  }, {\n\t    key: \"bottom\",\n\t    value: function bottom() {\n\t      return this.y + this.height;\n\t    }\n\t  }, {\n\t    key: \"equals\",\n\t    value: function equals(rect) {\n\t      return this.x === rect.x && this.y === rect.y && this.width === rect.width && this.height === rect.height;\n\t    }\n\t\n\t    // other can be a Point or a Rect\n\t\n\t  }, {\n\t    key: \"contains\",\n\t    value: function contains(other) {\n\t      if (other instanceof Point) {\n\t        return other.x >= this.x && other.x <= this.x + this.width && other.y >= this.y && other.y <= this.y + this.height;\n\t      } else {\n\t        // better be instance of Rect\n\t        return this.x <= other.x && this.x + this.width >= other.x + other.width && this.y <= other.y && this.y + this.height >= other.y + other.height;\n\t      }\n\t    }\n\t  }, {\n\t    key: \"union\",\n\t    value: function union(rect) {\n\t\n\t      var right = Math.max(this.x + this.width, rect.x + rect.width);\n\t      var bottom = Math.max(this.y + this.height, rect.y + rect.height);\n\t\n\t      this.x = Math.min(this.x, rect.x);\n\t      this.y = Math.min(this.y, rect.y);\n\t\n\t      this.width = right - this.x;\n\t      this.height = bottom - this.y;\n\t    }\n\t  }]);\n\t\n\t  return Rect;\n\t}();\n\t\n\t/**\n\t * Margins\n\t *\n\t * @class\n\t */\n\t\n\t\n\tvar Margins = exports.Margins = function () {\n\t  function Margins(left, top, right, bottom) {\n\t    _classCallCheck(this, Margins);\n\t\n\t    this.left = typeof left !== 'undefined' ? left : 0;\n\t    this.top = typeof top !== 'undefined' ? top : 0;\n\t    this.right = typeof right !== 'undefined' ? right : 0;\n\t    this.bottom = typeof bottom !== 'undefined' ? bottom : 0;\n\t  }\n\t\n\t  _createClass(Margins, [{\n\t    key: \"clone\",\n\t    value: function clone() {\n\t      return new Margins(this.left, this.top, this.right, this.bottom);\n\t    }\n\t  }, {\n\t    key: \"equals\",\n\t    value: function equals(margins) {\n\t      return this.left === margins.left && this.top === margins.top && this.right === margins.right && this.bottom === margins.bottom;\n\t    }\n\t  }]);\n\t\n\t  return Margins;\n\t}();\n\t\n\t/**\n\t * Size\n\t *\n\t * @class\n\t */\n\t\n\t\n\tvar Size = exports.Size = function () {\n\t  function Size(width, height) {\n\t    _classCallCheck(this, Size);\n\t\n\t    this.width = typeof width !== 'undefined' ? width : 0;\n\t    this.height = typeof height !== 'undefined' ? height : 0;\n\t  }\n\t\n\t  _createClass(Size, [{\n\t    key: \"clone\",\n\t    value: function clone() {\n\t      return new Size(this.width, this.height);\n\t    }\n\t  }, {\n\t    key: \"equals\",\n\t    value: function equals(size) {\n\t      return this.width === size.width && this.height === size.height;\n\t    }\n\t  }]);\n\t\n\t  return Size;\n\t}();\n\t\n\t/*\n\t * Pitches, notes\n\t */\n\t\n\t\n\tvar Step = exports.Step = {\n\t  Do: 0,\n\t  Du: 1,\n\t  Re: 2,\n\t  Me: 3,\n\t  Mi: 4,\n\t  Fa: 5,\n\t  Fu: 6,\n\t  So: 7,\n\t  La: 9,\n\t  Te: 10,\n\t  Ti: 11\n\t};\n\t\n\t// this little array helps map step values to staff positions. The numeric values of steps\n\t// correspond to whole step increments (2) or half step increments (1). This gives us the ability\n\t// to compare pitches precisely, but makes it challenging to place steps on the staff. this little\n\t// array maps the steps to an incremental position the steps take on the staff line. This works\n\t// so simply because chant only uses do and fa clefs, and only has a flatted ti (te), making\n\t// for relatively easy mapping to staff line locations.\n\t//                         Do Du Re Me Mi Fa Fu So    La Te Ti\n\tvar __StepToStaffPosition = [0, 0, 1, 1, 2, 3, 3, 4, 4, 5, 6, 6];\n\tvar __StaffOffsetToStep = [Step.Do, Step.Re, Step.Mi, Step.Fa, Step.So, Step.La, Step.Ti]; // no accidentals in this one\n\t\n\t\n\tvar Pitch = exports.Pitch = function () {\n\t  function Pitch(step, octave) {\n\t    _classCallCheck(this, Pitch);\n\t\n\t    if (typeof octave === 'undefined') {\n\t      octave = Math.floor(step / 12);\n\t      step = step % 12;\n\t    }\n\t    this.step = step;\n\t    this.octave = octave;\n\t  }\n\t\n\t  _createClass(Pitch, [{\n\t    key: \"toInt\",\n\t    value: function toInt() {\n\t      return this.octave * 12 + this.step;\n\t    }\n\t  }, {\n\t    key: \"transpose\",\n\t    value: function transpose(step) {\n\t      return new Pitch(this.toInt() + step);\n\t    }\n\t  }, {\n\t    key: \"isHigherThan\",\n\t    value: function isHigherThan(pitch) {\n\t      return this.toInt() > pitch.toInt();\n\t    }\n\t  }, {\n\t    key: \"isLowerThan\",\n\t    value: function isLowerThan(pitch) {\n\t      return this.toInt() < pitch.toInt();\n\t    }\n\t  }, {\n\t    key: \"equals\",\n\t    value: function equals(pitch) {\n\t      return this.toInt() === pitch.toInt();\n\t    }\n\t  }], [{\n\t    key: \"stepToStaffOffset\",\n\t    value: function stepToStaffOffset(step) {\n\t      return __StepToStaffPosition[step];\n\t    }\n\t  }, {\n\t    key: \"staffOffsetToStep\",\n\t    value: function staffOffsetToStep(offset) {\n\t      while (offset < 0) {\n\t        offset = __StaffOffsetToStep.length + offset;\n\t      }return __StaffOffsetToStep[offset % __StaffOffsetToStep.length];\n\t    }\n\t  }]);\n\t\n\t  return Pitch;\n\t}();\n\t\n\tfunction generateRandomGuid() {\n\t  function s4() {\n\t    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n\t  }\n\t  return s4() + s4();\n\t}\n\t\n\tfunction getCssForProperties(properties) {\n\t  return Object.entries(properties).map(function (_ref) {\n\t    var _ref2 = _slicedToArray(_ref, 2),\n\t        key = _ref2[0],\n\t        val = _ref2[1];\n\t\n\t    return key && val && key !== \"class\" ? key + \": \" + val + \";\" : \"\";\n\t  }).join(\"\");\n\t}\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t//\n\t\n\t/**\n\t * @class\n\t */\n\tvar Language = exports.Language = function () {\n\t  function Language(name) {\n\t    _classCallCheck(this, Language);\n\t\n\t    this.name = typeof name !== \"undefined\" ? name : \"<unknown>\";\n\t    this.centerNeume = false;\n\t  }\n\t\n\t  /**\n\t   * @param {String} text The string to parsed into words.\n\t   * @return {Word[]} the resulting parsed words from syllabification\n\t   */\n\t\n\t\n\t  _createClass(Language, [{\n\t    key: \"syllabify\",\n\t    value: function syllabify(text) {\n\t      var parsedWords = [];\n\t\n\t      if (typeof text === \"undefined\" || text === \"\") return parsedWords;\n\t\n\t      // Divide the text into words separated by whitespace\n\t      var words = text.split(/[\\s]+/);\n\t\n\t      for (var i = 0, end = words.length; i < end; i++) {\n\t        parsedWords.push(this.syllabifyWord(words[i]));\n\t      }return parsedWords;\n\t    }\n\t  }]);\n\t\n\t  return Language;\n\t}();\n\t\n\tvar English = exports.English = function (_Language) {\n\t  _inherits(English, _Language);\n\t\n\t  function English() {\n\t    _classCallCheck(this, English);\n\t\n\t    var _this = _possibleConstructorReturn(this, (English.__proto__ || Object.getPrototypeOf(English)).call(this, \"English\"));\n\t\n\t    _this.centerNeume = true;\n\t    return _this;\n\t  }\n\t\n\t  /**\n\t   * @param {String} s the string to search\n\t   * @param {Number} startIndex The index at which to start searching for a vowel in the string\n\t   * @retuns a custom class with three properties: {found: (true/false) startIndex: (start index in s of vowel segment) length ()}\n\t   */\n\t\n\t\n\t  _createClass(English, [{\n\t    key: \"findVowelSegment\",\n\t    value: function findVowelSegment(s, startIndex) {\n\t      var regexLetter = /[a-z\\u0300-\\u0311äëïöüÿáéíóúýàèìòùỳāēīōūȳăĕĭŏŭæœ‿]+/i;\n\t      var match = regexLetter.exec(s.slice(startIndex));\n\t      if (match) return {\n\t        found: true,\n\t        startIndex: startIndex + match.index,\n\t        length: match[0].length\n\t      };\n\t\n\t      // no vowels sets found after startIndex!\n\t      return { found: false, startIndex: -1, length: -1 };\n\t    }\n\t  }]);\n\t\n\t  return English;\n\t}(Language);\n\t\n\t/**\n\t * @class\n\t */\n\t\n\t\n\tvar Latin = exports.Latin = function (_Language2) {\n\t  _inherits(Latin, _Language2);\n\t\n\t  /**\n\t   * @constructs\n\t   */\n\t  function Latin() {\n\t    _classCallCheck(this, Latin);\n\t\n\t    // fixme: ui is only diphthong in the exceptional cases below (according to Wheelock's Latin)\n\t    var _this2 = _possibleConstructorReturn(this, (Latin.__proto__ || Object.getPrototypeOf(Latin)).call(this, \"Latin\"));\n\t\n\t    _this2.diphthongs = [\"ae\", \"au\", \"oe\", \"aé\", \"áu\", \"oé\"];\n\t    // for centering over the vowel, we will need to know any combinations that might be diphthongs:\n\t    _this2.possibleDiphthongs = _this2.diphthongs.concat([\"ei\", \"eu\", \"ui\", \"éi\", \"éu\", \"úi\"]);\n\t    _this2.regexVowel = /(i|(?:[qg]|^)u)?([eé][iu]|[uú]i|[ao][eé]|[aá]u|[aeiouáéíóúäëïöüāēīōūăĕĭŏŭåe̊o̊ůæœǽyýÿ])/i;\n\t\n\t    // some words that are simply exceptions to standard syllabification rules!\n\t    var wordExceptions = new Object();\n\t\n\t    // ui combos pronounced as diphthongs\n\t    wordExceptions[\"huius\"] = [\"hui\", \"us\"];\n\t    wordExceptions[\"cuius\"] = [\"cui\", \"us\"];\n\t    wordExceptions[\"huic\"] = [\"huic\"];\n\t    wordExceptions[\"cui\"] = [\"cui\"];\n\t    wordExceptions[\"hui\"] = [\"hui\"];\n\t\n\t    // eu combos pronounced as diphthongs\n\t    wordExceptions[\"euge\"] = [\"eu\", \"ge\"];\n\t    wordExceptions[\"seu\"] = [\"seu\"];\n\t\n\t    _this2.vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"á\", \"é\", \"í\", \"ó\", \"ú\", \"ä\", \"ë\", \"ï\", \"ö\", \"ü\", \"ā\", \"ē\", \"ī\", \"ō\", \"ū\", \"ă\", \"ĕ\", \"ĭ\", \"ŏ\", \"ŭ\", \"å\", \"e̊\", \"o̊\", \"ů\", \"æ\", \"œ\", \"ǽ\", // no accented œ in unicode?\n\t    \"y\", \"ý\", \"ÿ\"]; // y is treated as a vowel; not native to Latin but useful for words borrowed from Greek\n\t\n\t    _this2.vowelsThatMightBeConsonants = [\"i\", \"u\"];\n\t\n\t    _this2.muteConsonantsAndF = [\"b\", \"c\", \"d\", \"g\", \"p\", \"t\", \"f\"];\n\t\n\t    _this2.liquidConsonants = [\"l\", \"r\"];\n\t    return _this2;\n\t  }\n\t\n\t  // c must be lowercase!\n\t\n\t\n\t  _createClass(Latin, [{\n\t    key: \"isVowel\",\n\t    value: function isVowel(c) {\n\t      for (var i = 0, end = this.vowels.length; i < end; i++) {\n\t        if (this.vowels[i] === c) return true;\n\t      }return false;\n\t    }\n\t  }, {\n\t    key: \"isVowelThatMightBeConsonant\",\n\t    value: function isVowelThatMightBeConsonant(c) {\n\t      for (var i = 0, end = this.vowelsThatMightBeConsonants.length; i < end; i++) {\n\t        if (this.vowelsThatMightBeConsonants[i] === c) return true;\n\t      }return false;\n\t    }\n\t\n\t    // substring should be a vowel and the character following\n\t\n\t  }, {\n\t    key: \"isVowelActingAsConsonant\",\n\t    value: function isVowelActingAsConsonant(substring) {\n\t      return this.isVowelThatMightBeConsonant(substring[0]) && this.isVowel(substring[1]);\n\t    }\n\t\n\t    /**\n\t     * f is not a mute consonant, but we lump it together for syllabification\n\t     * since it is syntactically treated the same way\n\t     *\n\t     * @param {String} c The character to test; must be lowercase\n\t     * @return {boolean} true if c is an f or a mute consonant\n\t     */\n\t\n\t  }, {\n\t    key: \"isMuteConsonantOrF\",\n\t    value: function isMuteConsonantOrF(c) {\n\t      for (var i = 0, end = this.muteConsonantsAndF.length; i < end; i++) {\n\t        if (this.muteConsonantsAndF[i] === c) return true;\n\t      }return false;\n\t    }\n\t\n\t    /**\n\t     *\n\t     * @param {String} c The character to test; must be lowercase\n\t     * @return {boolean} true if c is a liquid consonant\n\t     */\n\t\n\t  }, {\n\t    key: \"isLiquidConsonant\",\n\t    value: function isLiquidConsonant(c) {\n\t      for (var i = 0, end = this.liquidConsonants.length; i < end; i++) {\n\t        if (this.liquidConsonants[i] === c) return true;\n\t      }return false;\n\t    }\n\t\n\t    /**\n\t     *\n\t     * @param {String} s The string to test; must be lowercase\n\t     * @return {boolean} true if s is a diphthong\n\t     */\n\t\n\t  }, {\n\t    key: \"isDiphthong\",\n\t    value: function isDiphthong(s) {\n\t      for (var i = 0, end = this.diphthongs.length; i < end; i++) {\n\t        if (this.diphthongs[i] === s) return true;\n\t      }return false;\n\t    }\n\t\n\t    /**\n\t     *\n\t     * @param {String} s The string to test; must be lowercase\n\t     * @return {boolean} true if s is a diphthong\n\t     */\n\t\n\t  }, {\n\t    key: \"isPossibleDiphthong\",\n\t    value: function isPossibleDiphthong(s) {\n\t      for (var i = 0, end = this.possibleDiphthongs.length; i < end; i++) {\n\t        if (this.possibleDiphthongs[i] === s) return true;\n\t      }return false;\n\t    }\n\t\n\t    /**\n\t     * Rules for Latin syllabification (from Collins, \"A Primer on Ecclesiastical Latin\")\n\t     *\n\t     * Divisions occur when:\n\t     *   1. After open vowels (those not followed by a consonant) (e.g., \"pi-us\" and \"De-us\")\n\t     *   2. After vowels followed by a single consonant (e.g., \"vi-ta\" and \"ho-ra\")\n\t     *   3. After the first consonant when two or more consonants follow a vowel\n\t     *      (e.g., \"mis-sa\", \"minis-ter\", and \"san-ctus\").\n\t     *\n\t     * Exceptions:\n\t     *   1. In compound words the consonants stay together (e.g., \"de-scribo\").\n\t     *   2. A mute consonant (b, c, d, g, p, t) or f followed by a liquid consonant (l, r)\n\t     *      go with the succeeding vowel: \"la-crima\", \"pa-tris\"\n\t     *\n\t     * In addition to these rules, Wheelock's Latin provides this sound exception:\n\t     *   -  Also counted as single consonants are qu and the aspirates ch, ph,\n\t     *      th, which should never be separated in syllabification:\n\t     *      architectus, ar-chi-tec-tus; loquacem, lo-qua-cem.\n\t     *\n\t     */\n\t\n\t  }, {\n\t    key: \"syllabifyWord\",\n\t    value: function syllabifyWord(word) {\n\t      var syllables = [];\n\t      var haveCompleteSyllable = false;\n\t      var previousWasVowel = false;\n\t      var workingString = word.toLowerCase();\n\t      var startSyllable = 0;\n\t\n\t      var c, lookahead, haveLookahead;\n\t\n\t      // a helper function to create syllables\n\t      var makeSyllable = function makeSyllable(length) {\n\t        if (haveCompleteSyllable) {\n\t          syllables.push(word.substr(startSyllable, length));\n\t          startSyllable += length;\n\t        }\n\t\n\t        haveCompleteSyllable = false;\n\t      };\n\t\n\t      for (var i = 0, wordLength = workingString.length; i < wordLength; i++) {\n\t        c = workingString[i];\n\t\n\t        // get our lookahead in case we need them...\n\t        lookahead = \"*\";\n\t        haveLookahead = i + 1 < wordLength;\n\t\n\t        if (haveLookahead) lookahead = workingString[i + 1];\n\t\n\t        var cIsVowel = this.isVowel(c);\n\t\n\t        // i is a special case for a vowel. when i is at the beginning\n\t        // of the word (Iesu) or i is between vowels (alleluia),\n\t        // then the i is treated as a consonant (y)\n\t        if (c === \"i\") {\n\t          if (i === 0 && haveLookahead && this.isVowel(lookahead)) cIsVowel = false;else if (previousWasVowel && haveLookahead && this.isVowel(lookahead)) {\n\t            cIsVowel = false;\n\t          }\n\t        }\n\t\n\t        if (c === \"-\") {\n\t          // a hyphen forces a syllable break, which effectively resets\n\t          // the logic...\n\t\n\t          haveCompleteSyllable = true;\n\t          previousWasVowel = false;\n\t          makeSyllable(i - startSyllable);\n\t          startSyllable++;\n\t        } else if (cIsVowel) {\n\t          // once we get a vowel, we have a complete syllable\n\t          haveCompleteSyllable = true;\n\t\n\t          if (previousWasVowel && !this.isDiphthong(workingString[i - 1] + \"\" + c)) {\n\t            makeSyllable(i - startSyllable);\n\t            haveCompleteSyllable = true;\n\t          }\n\t\n\t          previousWasVowel = true;\n\t        } else if (haveLookahead) {\n\t          if (c === \"q\" && lookahead === \"u\" || lookahead === \"h\" && (c === \"c\" || c === \"p\" || c === \"t\")) {\n\t            // handle wheelock's exceptions for qu, ch, ph and th\n\t            makeSyllable(i - startSyllable);\n\t            i++; // skip over the 'h' or 'u'\n\t          } else if (previousWasVowel && this.isVowel(lookahead)) {\n\t            // handle division rule 2\n\t            makeSyllable(i - startSyllable);\n\t          } else if (this.isMuteConsonantOrF(c) && this.isLiquidConsonant(lookahead)) {\n\t            // handle exception 2\n\t            makeSyllable(i - startSyllable);\n\t          } else if (haveCompleteSyllable) {\n\t            // handle division rule 3\n\t            makeSyllable(i + 1 - startSyllable);\n\t          }\n\t\n\t          previousWasVowel = false;\n\t        }\n\t      }\n\t\n\t      // if we have a complete syllable, we can add it as a new one. Otherwise\n\t      // we tack the remaining characters onto the last syllable.\n\t      if (haveCompleteSyllable) syllables.push(word.substr(startSyllable));else if (startSyllable > 0) syllables[syllables.length - 1] += word.substr(startSyllable);\n\t\n\t      return syllables;\n\t    }\n\t\n\t    /**\n\t     * @param {String} s the string to search\n\t     * @param {Number} startIndex The index at which to start searching for a vowel in the string\n\t     * @retuns a custom class with three properties: {found: (true/false) startIndex: (start index in s of vowel segment) length ()}\n\t     */\n\t\n\t  }, {\n\t    key: \"findVowelSegment\",\n\t    value: function findVowelSegment(s, startIndex) {\n\t      var match = this.regexVowel.exec(s.slice(startIndex));\n\t      if (match) {\n\t        if (match[1]) {\n\t          // the first group should be ignored, as it is to separate an i or u that is used as a consonant.\n\t          match.index += match[1].length;\n\t        }\n\t        return {\n\t          found: true,\n\t          startIndex: startIndex + match.index,\n\t          length: match[2].length\n\t        };\n\t      }\n\t\n\t      // no vowels sets found after startIndex!\n\t      return { found: false, startIndex: -1, length: -1 };\n\t    }\n\t  }]);\n\t\n\t  return Latin;\n\t}(Language);\n\t\n\t/**\n\t * @class\n\t */\n\t\n\t\n\tvar Spanish = exports.Spanish = function (_Language3) {\n\t  _inherits(Spanish, _Language3);\n\t\n\t  function Spanish() {\n\t    _classCallCheck(this, Spanish);\n\t\n\t    var _this3 = _possibleConstructorReturn(this, (Spanish.__proto__ || Object.getPrototypeOf(Spanish)).call(this, \"Spanish\"));\n\t\n\t    _this3.vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"á\", \"é\", \"í\", \"ó\", \"ú\", \"ü\"];\n\t\n\t    _this3.weakVowels = [\"i\", \"u\", \"ü\", \"y\"];\n\t\n\t    _this3.strongVowels = [\"a\", \"e\", \"o\", \"á\", \"é\", \"í\", \"ó\", \"ú\"];\n\t\n\t    _this3.diphthongs = [\"ai\", \"ei\", \"oi\", \"ui\", \"ia\", \"ie\", \"io\", \"iu\", \"au\", \"eu\", \"ou\", \"ua\", \"ue\", \"uo\", \"ái\", \"éi\", \"ói\", \"úi\", \"iá\", \"ié\", \"ió\", \"iú\", \"áu\", \"éu\", \"óu\", \"uá\", \"ué\", \"uó\", \"üe\", \"üi\"];\n\t\n\t    _this3.uDiphthongExceptions = [\"gue\", \"gui\", \"qua\", \"que\", \"qui\", \"quo\"];\n\t    return _this3;\n\t  }\n\t\n\t  // c must be lowercase!\n\t\n\t\n\t  _createClass(Spanish, [{\n\t    key: \"isVowel\",\n\t    value: function isVowel(c) {\n\t      for (var i = 0, end = this.vowels.length; i < end; i++) {\n\t        if (this.vowels[i] === c) return true;\n\t      }return false;\n\t    }\n\t\n\t    /**\n\t     * @param {String} c The character to test; must be lowercase\n\t     * @return {boolean} true if c is an f or a mute consonant\n\t     */\n\t\n\t  }, {\n\t    key: \"isWeakVowel\",\n\t    value: function isWeakVowel(c) {\n\t      for (var i = 0, end = this.weakVowels.length; i < end; i++) {\n\t        if (this.weakVowels[i] === c) return true;\n\t      }return false;\n\t    }\n\t\n\t    /**\n\t     * @param {String} c The character to test; must be lowercase\n\t     * @return {boolean} true if c is an f or a mute consonant\n\t     */\n\t\n\t  }, {\n\t    key: \"isStrongVowel\",\n\t    value: function isStrongVowel(c) {\n\t      for (var i = 0, end = this.strongVowels.length; i < end; i++) {\n\t        if (this.strongVowels[i] === c) return true;\n\t      }return false;\n\t    }\n\t\n\t    /**\n\t     *\n\t     * @param {String} s The string to test; must be lowercase\n\t     * @return {boolean} true if s is a diphthong\n\t     */\n\t\n\t  }, {\n\t    key: \"isDiphthong\",\n\t    value: function isDiphthong(s) {\n\t      for (var i = 0, end = this.diphthongs.length; i < end; i++) {\n\t        if (this.diphthongs[i] === s) return true;\n\t      }return false;\n\t    }\n\t  }, {\n\t    key: \"createSyllable\",\n\t    value: function createSyllable(text) {\n\t      /*\n\t      var accented = false;\n\t      var ellidesToNext = false;\n\t       if (text.length > 0) {\n\t           if (text[0] == '`') {\n\t              accented = true;\n\t              text = text.substr(1);\n\t          }\n\t           if (text[text.length - 1] == '_') {\n\t              ellidesToNext = true;\n\t              text = text.substr(0, text.length - 1);\n\t          }\n\t      }\n\t       var s = new Syllable(text);\n\t       s.isMusicalAccent = accented;\n\t      s.elidesToNext = ellidesToNext;*/\n\t\n\t      return text;\n\t    }\n\t\n\t    /**\n\t     */\n\t\n\t  }, {\n\t    key: \"syllabifyWord\",\n\t    value: function syllabifyWord(word) {\n\t      var syllables = [];\n\t\n\t      var haveCompleteSyllable = false;\n\t      var previousIsVowel = false;\n\t      var previousIsStrongVowel = false; // only valid if previousIsVowel == true\n\t      var startSyllable = 0;\n\t\n\t      // fixme: first check for prefixes\n\t\n\t      for (var i = 0; i < word.length; i++) {\n\t        var c = word[i].toLowerCase();\n\t\n\t        if (this.isVowel(c)) {\n\t          // we have a complete syllable as soon as we have a vowel\n\t          haveCompleteSyllable = true;\n\t\n\t          var cIsStrongVowel = this.isStrongVowel(c);\n\t\n\t          if (previousIsVowel) {\n\t            // if we're at a strong vowel, then we finish out the last syllable\n\t            if (cIsStrongVowel) {\n\t              if (previousIsStrongVowel) {\n\t                syllables.push(this.createSyllable(word.substr(startSyllable, i - startSyllable)));\n\t                startSyllable = i;\n\t              }\n\t            }\n\t          }\n\t\n\t          previousIsVowel = true;\n\t          previousIsStrongVowel = cIsStrongVowel;\n\t        } else {\n\t          if (!haveCompleteSyllable) {\n\t            // do nothing since we don't have a complete syllable yet...\n\t          } else {\n\t            // handle explicit syllable breaks\n\t            if (word[i] === \"-\") {\n\t              // start new syllable\n\t              syllables.push(this.createSyllable(word.substr(startSyllable, i - startSyllable)));\n\t              startSyllable = ++i;\n\t            } else {\n\t              var numberOfConsonants = 1,\n\t                  consonant2;\n\t\n\t              // count how many more consonants there are\n\t              for (var j = i + 1; j < word.length; j++) {\n\t                if (this.isVowel(word[j])) break;\n\t                numberOfConsonants++;\n\t              }\n\t\n\t              if (numberOfConsonants === 1) {\n\t                // start new syllable\n\t                syllables.push(this.createSyllable(word.substr(startSyllable, i - startSyllable)));\n\t                startSyllable = i;\n\t              } else if (numberOfConsonants === 2) {\n\t                consonant2 = word[i + 1].toLowerCase();\n\t                if (consonant2 === \"l\" || consonant2 === \"r\" || c === \"c\" && consonant2 === \"h\") {\n\t                  // split before the consonant pair\n\t                  syllables.push(this.createSyllable(word.substr(startSyllable, i - startSyllable)));\n\t                  startSyllable = i++;\n\t                } else {\n\t                  //split the consonants\n\t                  syllables.push(this.createSyllable(word.substr(startSyllable, ++i - startSyllable)));\n\t                  startSyllable = i;\n\t                }\n\t              } else if (numberOfConsonants === 3) {\n\t                consonant2 = word[i + 1].toLowerCase();\n\t\n\t                // if second consonant is s, divide cc-c, otherwise divide c-cc\n\t                if (consonant2 === \"s\") {\n\t                  i += 2;\n\t                  syllables.push(this.createSyllable(word.substr(startSyllable, i - startSyllable)));\n\t                } else syllables.push(this.createSyllable(word.substr(startSyllable, ++i - startSyllable)));\n\t\n\t                startSyllable = i;\n\t              } else if (numberOfConsonants === 4) {\n\t                // four always get split cc-cc\n\t                syllables.push(this.createSyllable(word.substr(startSyllable, i - startSyllable + 2)));\n\t                startSyllable = i + 2;\n\t                i += 3;\n\t              }\n\t            }\n\t\n\t            haveCompleteSyllable = false;\n\t          }\n\t\n\t          previousIsVowel = false;\n\t        }\n\t      }\n\t\n\t      // if we have a complete syllable, we can add it as a new one. Otherwise\n\t      // we tack the remaining characters onto the last syllable.\n\t      if (haveCompleteSyllable) syllables.push(word.substr(startSyllable));else if (startSyllable > 0) syllables[syllables.length - 1] += word.substr(startSyllable);else if (syllables.length === 0) syllables.push(this.createSyllable(word));\n\t\n\t      return syllables;\n\t    }\n\t\n\t    /**\n\t     * @param {String} s the string to search\n\t     * @param {Number} startIndex The index at which to start searching for a vowel in the string\n\t     * @retuns a custom class with three properties: {found: (true/false) startIndex: (start index in s of vowel segment) length ()}\n\t     */\n\t\n\t  }, {\n\t    key: \"findVowelSegment\",\n\t    value: function findVowelSegment(s, startIndex) {\n\t      var i, end, index;\n\t      var workingString = s.toLowerCase();\n\t\n\t      // do we have a diphthongs?\n\t      for (i = 0, end = this.diphthongs.length; i < end; i++) {\n\t        var d = this.diphthongs[i];\n\t        index = workingString.indexOf(d, startIndex);\n\t\n\t        if (index >= 0) {\n\t          // check the exceptions...\n\t          if (d[0] === \"u\" && index > 0) {\n\t            var tripthong = s.substr(index - 1, 3).toLowerCase();\n\t\n\t            for (var j = 0, endj = this.uDiphthongExceptions.length; i < endj; j++) {\n\t              if (tripthong === this.uDiphthongExceptions[j]) {\n\t                // search from after the u...\n\t                return this.findVowelSegment(s, index + 1);\n\t              }\n\t            }\n\t          }\n\t\n\t          return { found: true, startIndex: index, length: d.length };\n\t        }\n\t      }\n\t\n\t      // no diphthongs. Let's look for single vowels then...\n\t      for (i = 0, end = this.vowels.length; i < end; i++) {\n\t        index = workingString.indexOf(this.vowels[i], startIndex);\n\t\n\t        if (index >= 0) return { found: true, startIndex: index, length: 1 };\n\t      }\n\t\n\t      // no vowels sets found after startIndex!\n\t      return { found: false, startIndex: -1, length: -1 };\n\t    }\n\t  }]);\n\t\n\t  return Spanish;\n\t}(Language);\n\t\n\tvar language = exports.language = {\n\t  english: new English(),\n\t  latin: new Latin(),\n\t  spanish: new Spanish()\n\t};\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t//\n\t// Author(s):\n\t// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n\t//\n\t// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a copy\n\t// of this software and associated documentation files (the \"Software\"), to deal\n\t// in the Software without restriction, including without limitation the rights\n\t// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t// copies of the Software, and to permit persons to whom the Software is\n\t// furnished to do so, subject to the following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included in\n\t// all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\t// THE SOFTWARE.\n\t//\n\t\n\t// generated based on the svg data\n\tvar Glyphs = exports.Glyphs = {\n\t  None: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 0,\n\t      height: 0\n\t    },\n\t    origin: {\n\t      x: 0,\n\t      y: 0\n\t    },\n\t    align: \"left\"\n\t  },\n\t  AcuteAccent: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M4 0C-.614.52-.614.52-.803-3.182l60.768-108.422c4.52-7.182 10.543-13.67 18.075-13.67 5.27 0 14.31 1.264 23.346 7.793 7.53 5.223 8.803 11.752 8.803 16.975 0 3.917-.52 11.1-8.05 17.628L4 0z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 0, // TODO: figure out a better way to align this horizontally.  width should be 110.992,\n\t      height: 125.794\n\t    },\n\t    origin: {\n\t      x: 0.803,\n\t      y: 125.274\n\t    },\n\t    align: \"left\"\n\t  },\n\t  GraveAccent: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M105.386.26C110 .78 110 .78 110.189-2.922l-60.768-108.422c-4.52-7.182-10.543-13.67-18.075-13.67-5.27 0-14.31 1.264-23.346 7.793-7.53 5.223-8.803 11.752-8.803 16.975 0 3.917.52 11.1 8.05 17.628L105.386.26z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 0, //110.992,\n\t      height: 125.794\n\t    },\n\t    origin: {\n\t      x: 0, // -110.992,\n\t      y: 125.274\n\t    },\n\t    align: \"left\"\n\t  },\n\t  Circle: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M0 -50A50 50 0 0 0 100 -50 50 50 0 0 0 0 -50M10 -50A40 40 0 0 1 90 -50 40 40 0 0 1 10 -50\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 100\n\t    },\n\t    origin: {\n\t      x: -50,\n\t      y: 100\n\t    }\n\t  },\n\t  Semicircle: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M0 -50A50 50 0 0 0 100 -50 5 5 0 0 0 90 -50 40 40 0 0 1 10 -50 5 5 0 0 0 0 -50\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 55\n\t    },\n\t    origin: {\n\t      x: -50,\n\t      y: 50\n\t    }\n\t  },\n\t  ReversedSemicircle: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M0 0A50 50 0 0 1 100 0 5 5 0 0 1 90 0 40 40 0 0 0 10 0 5 5 0 0 1 0 0\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 55\n\t    },\n\t    origin: {\n\t      x: -50,\n\t      y: 50\n\t    }\n\t  },\n\t  Stropha: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M1.22-73.438c4.165 13.02 12.238 27.084 24.217 42.188L49.657 0 34.812 27.344C18.666 55.47-.084 72.396-21.438 78.124c4.687-3.645 7.03-8.593 7.03-14.843 0-8.853-4.947-20.572-14.843-35.155L-48 0 1.22-73.438z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 97.657,\n\t      height: 151.562\n\t    },\n\t    origin: {\n\t      x: 48,\n\t      y: 73.438\n\t    },\n\t    align: \"left\"\n\t  },\n\t  BeginningAscLiquescent: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M-50 43.688V-61c4.167 7.292 12.76 10.938 25.78 10.938 9.376 0 20.053-1.563 32.032-4.688C31.773-60.48 45.833-71.677 50-88.344v117.97C43.75 42.645 32.812 51.5 17.187 56.186-.52 61.398-15.886 64-28.906 64-42.97 64-50 57.23-50 43.687z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 152.344\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 88.344\n\t    },\n\t    align: \"left\"\n\t  },\n\t  BeginningDesLiquescent: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M-50-56.03c0-13.022 7.03-19.532 21.094-19.532 13.02 0 28.385 2.604 46.093 7.812C32.813-63.583 43.75-54.73 50-41.187V76C45.833 59.854 31.77 48.656 7.812 42.406c-11.98-3.125-22.656-4.687-32.03-4.687-13.022 0-21.615 3.905-25.782 11.718v-105.47z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 151.562\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 75.562\n\t    },\n\t    align: \"left\"\n\t  },\n\t  CustosDescLong: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M39.063 273.472c5.73.52 7.29-6.25 4.687-20.312V-65.59c-13.542 2.083-24.22 5.468-32.03 10.156C3.905-50.226 0-43.714 0-35.904V71.91c5.73-5.21 10.677-8.594 14.844-10.157 5.73-1.562 12.24-2.343 19.53-2.343v196.875c0 11.458 1.563 17.187 4.688 17.187\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 46.353,\n\t      height: 339.582\n\t    },\n\t    origin: {\n\t      x: 0,\n\t      y: 65.59\n\t    },\n\t    align: \"left\"\n\t  },\n\t  CustosDescShort: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M34.375 191.923c0 8.333 1.563 12.24 4.688 11.72 3.125-.522 4.687-7.033 4.687-19.533v-250c-13.542 2.084-24.22 5.47-32.03 10.157C3.905-50.525 0-44.015 0-36.203V71.61c5.73-5.208 10.677-8.593 14.844-10.156 5.73-1.562 12.24-2.344 19.53-2.344v132.813z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 43.75,\n\t      height: 270.053\n\t    },\n\t    origin: {\n\t      x: 0,\n\t      y: 65.89\n\t    },\n\t    align: \"left\"\n\t  },\n\t  CustosLong: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M39.063-269.562c5.73-.52 7.29 6.25 4.687 20.312V69.5c-13.542-2.083-24.22-5.47-32.03-10.156C3.905 54.134 0 47.624 0 39.812V-68c5.73 5.208 10.677 8.594 14.844 10.156 5.73 1.563 12.24 2.344 19.53 2.344v-196.875c0-11.458 1.563-17.187 4.688-17.187z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 46.353,\n\t      height: 339.582\n\t    },\n\t    origin: {\n\t      x: 0,\n\t      y: 270.082\n\t    },\n\t    align: \"left\"\n\t  },\n\t  CustosShort: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M34.375-188.125c0-8.333 1.563-12.24 4.688-11.72 3.125.522 4.687 7.033 4.687 19.532v250c-13.542-2.083-24.22-5.468-32.03-10.156C3.905 54.324 0 47.813 0 40V-67.813c5.73 5.21 10.677 8.594 14.844 10.157 5.73 1.562 12.24 2.344 19.53 2.343v-132.812z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 43.75,\n\t      height: 270.052\n\t    },\n\t    origin: {\n\t      x: 0,\n\t      y: 200.365\n\t    },\n\t    align: \"left\"\n\t  },\n\t  DoClef: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M0 98.406V-97.688C0-118 5.99-134.275 17.97-146.516c11.978-12.24 27.603-18.36 46.874-18.36 10.937 0 19.53 3.126 25.78 9.376s9.376 14.583 9.376 25v107.813l-6.25-5.47c-4.167-3.645-10.287-7.42-18.36-11.327-8.072-3.907-16.796-5.86-26.17-5.86-11.46 0-21.486 4.427-30.08 13.282-8.593 8.854-12.89 19.53-12.89 32.03s4.297 23.308 12.89 32.423c8.594 9.115 18.62 13.672 30.08 13.672 9.374 0 18.098-1.822 26.17-5.468 8.073-3.646 14.193-7.292 18.36-10.938l6.25-6.25V132c0 9.896-3.125 18.1-9.375 24.61-6.25 6.51-14.844 9.765-25.78 9.765-19.272 0-34.897-6.25-46.876-18.75C5.99 135.125 0 118.72 0 98.405z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 331.251\n\t    },\n\t    origin: {\n\t      x: 0,\n\t      y: 164.876\n\t    },\n\t    align: \"left\"\n\t  },\n\t  FaClef: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M85.156-32v193.75c0 9.375-1.562 14.323-4.687 14.844-1.564 0-2.605-.52-3.126-1.563-.52-1.04-.782-2.603-.78-4.686V56.28c-8.335-8.332-19.793-12.5-34.376-12.5-17.71 0-31.77 3.907-42.188 11.72V-32c0-18.23 14.193-27.344 42.578-27.344 28.385 0 42.578 9.115 42.578 27.344zM98.438 93V-92.156c0-19.27 5.73-34.896 17.187-46.875 11.458-11.98 26.562-17.97 45.313-17.97 10.937 0 19.14 2.865 24.61 8.594 5.467 5.73 8.202 13.542 8.202 23.437v103.126l-5.47-4.687c-3.645-3.647-9.374-7.293-17.186-10.94-7.813-3.645-15.886-5.467-24.22-5.468-11.978 0-22.004 4.167-30.077 12.5-8.073 8.334-12.11 18.36-12.11 30.08 0 11.717 4.037 22.004 12.11 30.858s18.1 13.28 30.078 13.28c8.333 0 16.406-1.822 24.22-5.468 7.81-3.645 13.54-7.03 17.186-10.156l5.47-5.468V125.81c0 9.896-2.865 17.84-8.594 23.83-5.73 5.988-13.802 8.983-24.22 8.983-18.75 0-33.853-6.12-45.31-18.36-11.46-12.24-17.19-27.994-17.19-47.265z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 193.752,\n\t      height: 333.595\n\t    },\n\t    origin: {\n\t      x: 0.001,\n\t      y: 157.001\n\t    },\n\t    align: \"left\"\n\t  },\n\t  Flat: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M7.813-204.406c4.166 0 6.25 5.208 6.25 15.625L12.5-10.657C33.854 13.302 54.167 25.28 73.438 25.28c9.374 0 14.062-4.686 14.062-14.06 0-6.25-1.042-11.72-3.125-16.407-2.083-4.688-7.03-9.766-14.844-15.235-7.81-5.47-13.02-8.984-15.624-10.547L27.344-45.81V-80.97c17.187 0 33.073 4.82 47.656 14.454C89.583-56.88 96.875-47.376 96.875-38c0 67.708-.26 101.562-.78 101.563-38.543 0-69.532-12.24-92.97-36.72C0-52.322-1.042-123.936 0-188c0-10.937 2.604-16.406 7.813-16.406z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 97.917,\n\t      height: 267.969\n\t    },\n\t    origin: {\n\t      x: 1.042,\n\t      y: 204.406\n\t    },\n\t    align: \"left\"\n\t  },\n\t  Mora: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M47.478-24c6.957 0 12.793 2.288 17.49 6.883C69.662-12.52 72-6.904 72-.267c0 6.64-2.337 12.352-7.033 17.118C60.27 21.618 54.435 24 47.477 24c-6.26 0-11.748-2.383-16.444-7.15C26.337 12.086 24 6.374 24-.265c0-6.638 2.337-12.255 7.033-16.85C35.73-21.713 41.217-24 47.478-24z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 48,\n\t      height: 48\n\t    },\n\t    origin: {\n\t      x: -24,\n\t      y: 24\n\t    },\n\t    align: \"left\"\n\t  },\n\t  Natural: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M7.906-166.563c-2.864 0-5.614.52-8.218 1.563v13.28l.78 56.25.782 78.907v85.157c.52 3.646 2.604 5.73 6.25 6.25l23.438-3.906 23.437-3.907v29.69c0 42.186-.26 63.54-.78 64.06l6.25 2.345c1.04.52 2.082.78 3.124.78 2.603 0 4.947-1.3 7.03-3.905L67.656-71.25c-.52-2.604-2.083-3.906-4.687-3.906-7.814 0-17.19 1.04-28.126 3.125l-19.53 3.124.78-38.28V-165c-2.604-1.042-5.323-1.562-8.188-1.563zM55.938-40v71.875l-41.407 7.03c0-48.436.262-72.655.783-72.655L55.938-40z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 70.311,\n\t      height: 330.469\n\t    },\n\t    origin: {\n\t      x: 0.312,\n\t      y: 166.563\n\t    },\n\t    align: \"left\"\n\t  },\n\t  Sharp: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"m41.725,-73.773c-5.421,-0.241-10.878,5.856-6.549,12.357L67.061,-20.473 61.264,-12.5 13.436,-71.199c-5.634,-5.934-16.988,1.032-11.232,9.783L50.756,0.182 2.203,61.416c-6.745,7.984 3.442,17.859 11.232,9.783L61.264,12.5l5.797,7.973-31.885,40.943c-5.578,6.844 5.588,16.005 11.594,9.783L77.568,33.154 108.367,71.199c4.894,6.717 17.343,-1.575 11.232,-9.783L87.715,20.473 93.873,12.5 141.34,71.199c6.725,7.67 17.509,-2.248 11.596,-9.783L104.02,0.182 152.936,-61.416c5.52,-7.02-5.541,-16.309-11.596,-9.783L93.873,-12.5l-6.158,-7.973 31.884766,-40.943c5.407,-7.045-5.505,-15.924-11.232,-9.783L77.568,-33.154 46.77,-71.199c-1.435,-1.708-3.238,-2.494-5.044922,-2.574zM77.568,-8.516 84.09,0.182 77.568,8.516 70.684,0.182Z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 154.646,\n\t      height: 147.987\n\t    },\n\t    origin: {\n\t      x: 0,\n\t      y: 74.098\n\t    },\n\t    align: \"left\"\n\t  },\n\t  OriscusAsc: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M50 30.25c0 12.5-3.125 21.354-9.375 26.562-3.125 2.605-7.813 3.907-14.063 3.907-3.125 0-5.99-.522-8.593-1.564-2.605-1.04-5.6-2.474-8.986-4.297C5.6 53.035 2.734 51.603.39 50.56c-2.343-1.04-5.338-2.474-8.984-4.296-3.646-1.823-6.77-3.256-9.375-4.297-2.603-1.043-5.468-1.564-8.593-1.564-6.25 0-10.937 1.563-14.062 4.688C-46.875 50.824-50 59.677-50 71.656v-106.25c0-13.02 3.125-21.875 9.375-26.562 3.125-2.604 7.813-3.906 14.063-3.907 3.125 0 5.99.52 8.593 1.563 2.605 1.042 5.73 2.474 9.376 4.297 3.646 1.823 6.51 2.995 8.594 3.516l10.938 5.468c6.25 3.126 11.458 4.69 15.624 4.69 6.25 0 10.938-1.564 14.063-4.69C46.875-55.426 50-64.02 50-76V30.25z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 147.656\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 76\n\t    },\n\t    align: \"left\"\n\t  },\n\t  OriscusDes: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M-50 30.844v-106.25c0 11.458 3.125 20.052 9.375 25.78 3.125 3.126 7.813 4.69 14.063 4.688 4.687 0 13.41-3.255 26.17-9.765 12.762-6.51 21.746-9.766 26.954-9.766 6.25 0 10.938 1.303 14.063 3.907C46.875-55.874 50-47.02 50-34V72.25c0-11.98-3.125-20.833-9.375-26.563C37.5 42.563 32.812 41 26.562 41 21.875 41 13.023 44.385 0 51.156c-4.167 2.604-8.594 4.948-13.28 7.032-4.69 2.083-9.116 3.124-13.283 3.124-6.25 0-10.937-1.302-14.062-3.906C-46.875 52.198-50 43.344-50 30.844z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 147.656\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 75.406\n\t    },\n\t    align: \"left\"\n\t  },\n\t  OriscusLiquescent: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M 19.055,78.887 C 20.242,78.487 21.532,77.890 22.925,77.097 24.318,76.304 26.700882,74.417 30.074,71.438 33.447,68.458 36.524,64.985 39.303,61.019 42.083,57.052 44.563,51.396 46.743,44.05 48.923,36.704 50.013,28.671 50.013,19.950525 L 50.013,-34.226 C 50.013,-54.464 42.074,-64.584 26.195,-64.584 20.248,-64.584 11.519,-61.410 0.007,-55.064 -11.506,-48.717 -20.235,-45.544 -26.182,-45.544 -34.515,-45.544 -40.568,-48.520 -44.340791,-54.473 -48.114,-60.426 -50.000,-67.369 -50.000,-75.303 L -50.000,30.07 C -50.000,49.909 -42.060754,59.829 -26.182,59.829 -21.023,59.829 -12.39,56.455 -0.284,49.709 11.822,42.963 20.648,39.59 26.195,39.59 29.369,40.777 30.362,44.25 29.17479,50.009 27.988,55.768 26.001,62.020829 23.216,68.767 z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 147.656\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 75.406\n\t    },\n\t    align: \"left\"\n\t  },\n\t  PodatusLower: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M-4.688-30.28c22.396 0 34.636-.262 36.72-.782 5.728-1.563 8.593-5.21 8.593-10.938H50v97.656c0 2.604-1.302 4.167-3.906 4.688-5.21.52-21.355.78-48.438.78-23.958 0-38.54-.26-43.75-.78-2.604 0-3.906-1.302-3.906-3.906v-82.032c0-3.646 1.302-5.468 3.906-5.468h2.344c2.604.52 15.625.78 39.063.78z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 103.124\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 42\n\t    },\n\t    align: \"left\"\n\t  },\n\t  PodatusUpper: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M-46.094-63.78c13.542 0 24.61 2.473 33.203 7.42C-4.298-51.41 0-43.99 0-34.093V62h-9.375c0-10.938-2.604-19.14-7.812-24.61-5.21-5.468-14.844-8.203-28.907-8.202-18.23 0-33.333 4.166-45.312 12.5v-75.782c0-19.79 15.104-29.687 45.312-29.687z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 91.406,\n\t      height: 125.781\n\t    },\n\t    origin: {\n\t      x: 91.406,\n\t      y: 63.781\n\t    },\n\t    align: \"right\"\n\t  },\n\t  Porrectus1: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M233.594 162.875c-58.855 0-107.032-6.25-144.53-18.75C34.895 125.895-11.46 99.855-50 66V-52.75C-21.354-24.625 26.302 6.885 92.97 41.78 123.697 57.928 163.54 66 212.5 66c21.354 0 34.635-9.896 39.844-29.688V151.94c0 7.29-6.25 10.937-18.75 10.937z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 302.344,\n\t      height: 215.627\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 52.75\n\t    },\n\t    align: \"left\"\n\t  },\n\t  Porrectus2: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M309.375 259.375c-50.52 0-110.938-22.396-181.25-67.188C48.437 141.667-10.938 94.272-50 50V-68.75C0-3.125 60.417 52.083 131.25 96.875c58.333 36.98 110.677 58.854 157.03 65.625h7.033c16.145 0 26.822-9.896 32.03-29.688v114.844c0 7.812-5.99 11.72-17.968 11.72z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 377.343,\n\t      height: 328.126\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 68.75\n\t    },\n\t    align: \"left\"\n\t  },\n\t  Porrectus3: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M309.375 355.78c-48.96-16.666-109.115-55.468-180.47-116.405C79.428 198.23 19.793 134.687-50 48.75V-70C20 40 94.104 103.79 135.25 148.063 190 200 230 230 288.28 258.906c4.168 2.083 8.334 3.125 12.5 3.125 12.5 0 21.355-10.937 26.564-32.81v114.06c0 9.376-3.386 14.063-10.156 14.064-2.084 0-4.688-.522-7.813-1.563z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 377.344,\n\t      height: 427.345\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 70\n\t    },\n\t    align: \"left\"\n\t  },\n\t  Porrectus4: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M350 453.438c-52.754-22.397-120-77.345-201.74-164.844C90.87 227.656 24.784 147.708-50 48.75V-70C-8.84-1.25 58.406 86.51 151.74 193.28c60.868 69.793 119.13 124.22 174.782 163.282 5.797 3.646 11.014 5.47 15.652 5.47 12.173 0 21.45-11.72 27.826-35.157V441.72c0 9.373-3.19 14.06-9.565 14.06-2.9 0-6.377-.78-10.435-2.342z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 420,\n\t      height: 525.78\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 70\n\t    },\n\t    align: \"left\"\n\t  },\n\t  PunctumCavum: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M0-60.906c33.333 0 50 9.635 50 28.906v94.53C39.062 51.595 22.396 46.126 0 46.126s-39.063 5.47-50 16.406V-32c0-19.27 16.667-28.906 50-28.906z\"\n\t    }, {\n\t      type: \"negative\",\n\t      data: \"M.08-42.56c9.585.206 20.126.53 27.954 6.822 4.96 3.9 4.71 10.792 4.574 16.482v51.278C22.09 27.066 7.283 26.072.168 26.01c-7.72.23-21.895.935-32.616 4.674.04-19.197-.083-38.395.064-57.59.567-7.5 7.834-12.33 14.62-13.774 5.818-1.498 11.857-1.86 17.844-1.88z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 123.438\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 60.906\n\t    },\n\t    align: \"left\"\n\t  },\n\t  PunctumQuadratum: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M0-60.906c33.333 0 50 9.635 50 28.906v94.53C39.062 51.595 22.396 46.126 0 46.126s-39.063 5.47-50 16.406V-32c0-19.27 16.667-28.906 50-28.906z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 123.438\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 60.906\n\t    },\n\t    align: \"left\"\n\t  },\n\t  PunctumQuadratumLiquescent: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M0-36.5436c19.999799999999997 0 30 5.781 30 17.3436v56.717999999999996C23.437199999999997 30.956999999999997 13.4376 27.6756 0 27.6756s-23.4378 3.2819999999999996-30 9.843599999999999V-19.2c0-11.562 10.000200000000001-17.3436 30-17.3436z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 123.438\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 60.906\n\t    },\n\t    align: \"left\"\n\t  },\n\t  PunctumQuadratumAscLiquescent: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M-50 43.688V-61c4.167 7.292 12.76 10.938 25.78 10.938 9.376 0 20.053-1.563 32.032-4.688C31.773-60.48 45.833-71.677 50-88.344v117.97C43.75 42.645 32.812 51.5 17.187 56.186-.52 61.398-15.886 64-28.906 64-42.97 64-50 57.23-50 43.687z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 152.344\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 88.344\n\t    },\n\t    align: \"left\"\n\t  },\n\t  PunctumQuadratumDesLiquescent: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M-50-56.03c0-13.022 7.03-19.532 21.094-19.532 13.02 0 28.385 2.604 46.093 7.812C32.813-63.583 43.75-54.73 50-41.187V76C45.833 59.854 31.77 48.656 7.812 42.406c-11.98-3.125-22.656-4.687-32.03-4.687-13.022 0-21.615 3.905-25.782 11.718v-105.47z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 151.562\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 75.562\n\t    },\n\t    align: \"left\"\n\t  },\n\t  PunctumInclinatum: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M0-75.78L50 0 0 75-50 0 0-75.78z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 150.78\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 75.78\n\t    },\n\t    align: \"left\"\n\t  },\n\t  PunctumInclinatumLiquescent: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M 0,-53.164 35,-0.117 0,52.383 -35,-0.117 0,-53.164 z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 105.546\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 53.164\n\t    },\n\t    align: \"left\"\n\t  },\n\t  Quilisma: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M-50 34.938V-51c5.73 20.833 13.02 31.25 21.875 31.25 7.813 0 12.5-15.625 14.063-46.875 3.645 12.5 6.9 21.224 9.765 26.172s6.9 7.422 12.11 7.422c5.208 0 9.374-14.324 12.5-42.97 5.73 22.917 10.677 34.375 14.843 34.375 5.73 0 10.677-15.885 14.844-47.656v100c0 17.707-3.125 26.56-9.375 26.56-4.688 0-9.115-5.988-13.28-17.968-2.085 21.875-8.074 32.813-17.97 32.813-7.813 0-16.146-7.292-25-21.875-4.688 20.312-10.677 30.47-17.97 30.47-5.207 0-9.244-2.605-12.108-7.814C-48.568 47.698-50 41.708-50 34.938z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 150\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 89.282\n\t    },\n\t    align: \"left\"\n\t  },\n\t  TerminatingAscLiquescent: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M-9.375 40.22c0-11.98-4.948-17.97-14.844-17.97-10.936 0-19.53 3.646-25.78 10.938v-53.126c0-6.77 2.604-12.76 7.813-17.968 5.208-5.21 10.677-8.594 16.406-10.157 2.603-.52 5.207-.78 7.81-.78 3.647 0 7.032.78 10.157 2.343C-2.603-43.896 0-39.73 0-34V73.03h-9.375V40.22z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 49.999,\n\t      height: 121.873\n\t    },\n\t    origin: {\n\t      x: 49.999,\n\t      y: 48.843\n\t    },\n\t    align: \"right\"\n\t  },\n\t  TerminatingDesLiquescent: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M-9.375-48.156V-80.97H0V26.845c0 5.73-2.604 9.896-7.813 12.5-3.125 1.562-6.51 2.343-10.156 2.343-2.603 0-5.207-.26-7.81-.78-5.73-1.563-11.2-4.95-16.407-10.157C-47.398 25.542-50 19.292-50 12v-52.344c6.25 7.292 14.844 10.938 25.78 10.938 9.897 0 14.845-6.25 14.845-18.75z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 50,\n\t      height: 122.658\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 80.97\n\t    },\n\t    align: \"right\"\n\t  },\n\t  VerticalEpisemaAbove: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M-8-4c2 3 6 4 8 4s6-1 8-4v-52c-2-3-6-4-8-4s-6 1-8 4z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 16,\n\t      height: 60\n\t    },\n\t    origin: {\n\t      x: 8,\n\t      y: 60\n\t    },\n\t    align: \"left\"\n\t  },\n\t  VerticalEpisemaBelow: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M-8 56c2 3 6 4 8 4s6-1 8-4v-52c-2-3-6-4-8-4s-6 1-8 4z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 16,\n\t      height: 60\n\t    },\n\t    origin: {\n\t      x: 8,\n\t      y: 0\n\t    },\n\t    align: \"left\"\n\t  },\n\t  VirgaLong: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M50-38v285.156c0 6.77-2.344 10.937-7.03 12.5-1.564 0-2.605-.78-3.126-2.344-.52-1.562-.782-10.156-.782-25.78V54.186C29.168 45.334 16.146 40.907 0 40.907c-22.917 0-39.583 5.208-50 15.624V-38c0-19.27 16.667-28.906 50-28.906S50-57.27 50-38z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 326.562\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 66.906\n\t    },\n\t    align: \"left\"\n\t  },\n\t  VirgaShort: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M50-38v211.72c0 7.29-2.344 11.457-7.03 12.5-1.564 0-2.606-.783-3.126-2.345-.52-1.563-.782-10.156-.782-25.78V54.187C29.167 45.332 16.146 40.906 0 40.906c-22.917 0-39.583 5.21-50 15.625V-38c0-19.27 16.667-28.906 50-28.906S50-57.27 50-38z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 253.126\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 66.906\n\t    },\n\t    align: \"left\"\n\t  },\n\t  Virgula: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M8.178-55.66c0-22.137 12.092-33.2 36.287-33.2 11.835 0 23.53 5.66 35.108 16.98C91.15-60.547 96.94-41.766 96.94-15.534c0 53.515-31.646 87.487-94.937 101.895-2.048-2.06-3.077-5.146-3.077-9.273 0-1.03.247-1.8.76-2.316 42.71-19.027 64.075-41.678 64.075-67.92 0-11.322-2.325-20.326-6.945-27.016-4.62-6.69-9.52-11.052-14.676-13.11-5.147-2.048-11.836-3.85-20.07-5.403C12.81-39.707 8.18-45.37 8.18-55.66z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 98.014,\n\t      height: 175.221\n\t    },\n\t    origin: {\n\t      x: 1.074,\n\t      y: 88.86\n\t    },\n\t    align: \"left\"\n\t  }\n\t};\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.ChantNotationElement = exports.Annotations = exports.Annotation = exports.TextLeftRight = exports.Subtitle = exports.Title = exports.Supertitle = exports.TitleTextElement = exports.DropCap = exports.TranslationText = exports.AboveLinesText = exports.ChoralSign = exports.Lyric = exports.LyricArray = exports.LyricType = exports.TextElement = exports.TextSpan = exports.CurlyBraceVisualizer = exports.RoundBraceVisualizer = exports.GlyphVisualizer = exports.LineaVisualizer = exports.VirgaLineVisualizer = exports.NeumeLineVisualizer = exports.DividerLineVisualizer = exports.ChantLayoutElement = exports.ChantContext = exports.TextMeasuringStrategy = exports.QuickSvg = exports.GlyphCode = exports.DefaultTrailingSpace = exports.TextTypesByClass = exports.TextTypes = exports.MarkingPositionHint = undefined;\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }(); //\n\t// Author(s):\n\t// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n\t//\n\t// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a copy\n\t// of this software and associated documentation files (the \"Software\"), to deal\n\t// in the Software without restriction, including without limitation the rights\n\t// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t// copies of the Software, and to permit persons to whom the Software is\n\t// furnished to do so, subject to the following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included in\n\t// all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\t// THE SOFTWARE.\n\t//\n\t\n\tvar _ExsurgeCore = __webpack_require__(1);\n\t\n\tvar _ExsurgeGlyphs = __webpack_require__(3);\n\t\n\tvar _ExsurgeText = __webpack_require__(2);\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction getFontFilenameForProperties() {\n\t  var properties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\t  var url = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"{}\";\n\t\n\t  var italic = properties[\"font-style\"] === \"italic\" ? \"Italic\" : \"\",\n\t      bold = properties[\"font-weight\"] === \"bold\" ? \"Bold\" : \"\";\n\t  return url.replace(\"{}\", \"\" + (italic || bold ? \"\" + bold + italic : \"Regular\"));\n\t}\n\t\n\t// load in the web font for special chant characters here:\n\t// var __exsurgeCharactersFont = require(\"url?limit=30000!../assets/fonts/ExsurgeChar.otf\")\n\t\n\tvar canAccessDOM = typeof document !== \"undefined\";\n\t\n\tvar __getNeumeFromSvgElem = function __getNeumeFromSvgElem(score, elem) {\n\t  var note = score.notes[elem.parentElement.querySelector(\"[element-index]\").getAttribute(\"element-index\")];\n\t  return note.neume || note;\n\t};\n\t\n\t// for positioning markings on notes\n\tvar MarkingPositionHint = exports.MarkingPositionHint = {\n\t  Default: 0,\n\t  Above: 1,\n\t  Below: 2\n\t};\n\t\n\t/**\n\t * List of types of text and their defaults relative to lyrics\n\t * @type Array\n\t */\n\tvar TextTypes = exports.TextTypes = {\n\t  supertitle: {\n\t    display: \"Supertitle\",\n\t    defaultSize: function defaultSize(size) {\n\t      return size * 7 / 6;\n\t    }, // 14pt\n\t    containedInScore: function containedInScore(score) {\n\t      return score.titles.hasSupertitle();\n\t    },\n\t    getFromScore: function getFromScore(score) {\n\t      return score.titles.supertitle;\n\t    }\n\t  },\n\t  title: {\n\t    display: \"Title\",\n\t    defaultSize: function defaultSize(size) {\n\t      return size * 3 / 2;\n\t    }, // 18pt\n\t    containedInScore: function containedInScore(score) {\n\t      return score.titles.hasTitle();\n\t    },\n\t    getFromScore: function getFromScore(score) {\n\t      return score.titles.title;\n\t    }\n\t  },\n\t  subtitle: {\n\t    display: \"Subtitle\",\n\t    defaultSize: function defaultSize(size) {\n\t      return size;\n\t    }, // 12pt\n\t    containedInScore: function containedInScore(score) {\n\t      return score.titles.hasSubtitle();\n\t    },\n\t    getFromScore: function getFromScore(score) {\n\t      return score.titles.subtitle;\n\t    }\n\t  },\n\t  leftRight: {\n\t    display: \"Left / Right Text\",\n\t    cssClass: \"textLeftRight\",\n\t    defaultSize: function defaultSize(size) {\n\t      return size * 0.9;\n\t    },\n\t    containedInScore: function containedInScore(score) {\n\t      return score.titles.hasTextLeft() || score.titles.hasTextRight();\n\t    },\n\t    getFromScore: function getFromScore(score, elem) {\n\t      return score.titles[elem.extraClass];\n\t    },\n\t    getFromSvgElem: function getFromSvgElem(score, elem) {\n\t      return score.titles[elem.classList.contains(\"textRight\") ? \"textRight\" : \"textLeft\"];\n\t    }\n\t  },\n\t  annotation: {\n\t    display: \"Annotation\",\n\t    defaultSize: function defaultSize(size) {\n\t      return size * 2 / 3;\n\t    },\n\t    containedInScore: function containedInScore(score) {\n\t      return !!score.annotation && (!score.mergeAnnotationWithTextLeft || score.dropCap);\n\t    },\n\t    getFromScore: function getFromScore(score, _ref) {\n\t      var _ref$elementIndex = _ref.elementIndex,\n\t          elementIndex = _ref$elementIndex === undefined ? 0 : _ref$elementIndex;\n\t      return score.annotation && (score.annotation.annotations ? score.annotation.annotations[elementIndex] : score.annotation);\n\t    }\n\t  },\n\t  dropCap: {\n\t    display: \"Drop Cap\",\n\t    defaultSize: function defaultSize(size) {\n\t      return size * 4;\n\t    },\n\t    containedInScore: function containedInScore(score) {\n\t      return !!score.dropCap;\n\t    },\n\t    getFromScore: function getFromScore(score) {\n\t      return score.dropCap;\n\t    }\n\t  },\n\t  al: {\n\t    display: \"Above Staff\",\n\t    cssClass: \"aboveLinesText\",\n\t    defaultSize: function defaultSize(size) {\n\t      return size;\n\t    },\n\t    containedInScore: function containedInScore(score) {\n\t      return score.hasAboveLinesText;\n\t    },\n\t    getFromScore: function getFromScore(score, elem) {\n\t      return score.notations[elem.notation.notationIndex].alText[elem.alIndex];\n\t    },\n\t    getFromSvgElem: function getFromSvgElem(score, elem) {\n\t      return __getNeumeFromSvgElem(score, elem).alText[elem.getAttribute(\"al-index\") || 0];\n\t    }\n\t  },\n\t  choralSign: {\n\t    display: \"Choral Sign\",\n\t    size: function size(ctxt) {\n\t      return ctxt.staffInterval * 1.5;\n\t    },\n\t    containedInScore: function containedInScore(score) {\n\t      return false;\n\t    },\n\t    getFromScore: function getFromScore(score, elem) {\n\t      return score.notes[elem.note.elementIndex].choralSign;\n\t    }\n\t  },\n\t  lyric: {\n\t    display: \"Lyric\",\n\t    defaultSize: function defaultSize(size) {\n\t      return size * 0.9;\n\t    },\n\t    containedInScore: function containedInScore(score) {\n\t      return score.hasLyrics;\n\t    },\n\t    getFromScore: function getFromScore(score, elem) {\n\t      return score.notations[elem.notation.notationIndex].lyrics[elem.lyricIndex];\n\t    },\n\t    getFromSvgElem: function getFromSvgElem(score, elem) {\n\t      return __getNeumeFromSvgElem(score, elem).lyrics[elem.getAttribute(\"lyric-index\") || 0];\n\t    }\n\t  },\n\t  translation: {\n\t    display: \"Translation\",\n\t    defaultSize: function defaultSize(size) {\n\t      return size * 0.75;\n\t    },\n\t    containedInScore: function containedInScore(score) {\n\t      return score.hasTranslations;\n\t    },\n\t    getFromScore: function getFromScore(score, elem) {\n\t      return score.notations[elem.notation.notationIndex].translationText[elem.translationIndex];\n\t    },\n\t    getFromSvgElem: function getFromSvgElem(score, elem) {\n\t      return __getNeumeFromSvgElem(score, elem).translationText[elem.getAttribute(\"translation-index\") || 0];\n\t    }\n\t  }\n\t};\n\tvar TextTypesByClass = exports.TextTypesByClass = {};\n\tObject.entries(TextTypes).forEach(function (_ref2) {\n\t  var _ref3 = _slicedToArray(_ref2, 2),\n\t      key = _ref3[0],\n\t      entry = _ref3[1];\n\t\n\t  var cssClass = entry.cssClass = entry.cssClass || key;\n\t  entry.key = key;\n\t  TextTypesByClass[cssClass] = entry;\n\t});\n\t\n\tvar DefaultTrailingSpace = exports.DefaultTrailingSpace = function DefaultTrailingSpace(ctxt) {\n\t  return ctxt.intraNeumeSpacing * ctxt.interSyllabicMultiplier;\n\t};\n\tDefaultTrailingSpace.isDefault = true;\n\t\n\tvar GlyphCode = exports.GlyphCode = {\n\t  None: \"None\",\n\t\n\t  AcuteAccent: \"AcuteAccent\",\n\t  GraveAccent: \"GraveAccent\",\n\t  Circle: \"Circle\",\n\t  Semicircle: \"Semicircle\",\n\t  ReversedSemicircle: \"ReversedSemicircle\",\n\t  Stropha: \"Stropha\",\n\t  StrophaLiquescent: \"StrophaLiquescent\",\n\t\n\t  BeginningAscLiquescent: \"BeginningAscLiquescent\",\n\t  BeginningDesLiquescent: \"BeginningDesLiquescent\",\n\t\n\t  CustosDescLong: \"CustosDescLong\",\n\t  CustosDescShort: \"CustosDescShort\",\n\t  CustosLong: \"CustosLong\",\n\t  CustosShort: \"CustosShort\",\n\t\n\t  // clefs and other markings\n\t  DoClef: \"DoClef\",\n\t  FaClef: \"FaClef\",\n\t  Flat: \"Flat\",\n\t  Mora: \"Mora\",\n\t  Natural: \"Natural\",\n\t  OriscusAsc: \"OriscusAsc\",\n\t  OriscusDes: \"OriscusDes\",\n\t  OriscusLiquescent: \"OriscusLiquescent\",\n\t\n\t  PodatusLower: \"PodatusLower\",\n\t  PodatusUpper: \"PodatusUpper\",\n\t\n\t  Porrectus1: \"Porrectus1\", // 1 staff line difference,\n\t  Porrectus2: \"Porrectus2\", // 2 lines difference, etc...\n\t  Porrectus3: \"Porrectus3\",\n\t  Porrectus4: \"Porrectus4\",\n\t\n\t  PunctumCavum: \"PunctumCavum\",\n\t  PunctumQuadratum: \"PunctumQuadratum\",\n\t  PunctumQuadratumLiquescent: \"PunctumQuadratumLiquescent\",\n\t  PunctumQuadratumAscLiquescent: \"PunctumQuadratumAscLiquescent\",\n\t  PunctumQuadratumDesLiquescent: \"PunctumQuadratumDesLiquescent\",\n\t  PunctumInclinatum: \"PunctumInclinatum\",\n\t  PunctumInclinatumLiquescent: \"PunctumInclinatumLiquescent\",\n\t  Quilisma: \"Quilisma\",\n\t\n\t  Sharp: \"Sharp\",\n\t  TerminatingAscLiquescent: \"TerminatingAscLiquescent\",\n\t  TerminatingDesLiquescent: \"TerminatingDesLiquescent\",\n\t  VerticalEpisemaAbove: \"VerticalEpisemaAbove\",\n\t  VerticalEpisemaBelow: \"VerticalEpisemaBelow\",\n\t  VirgaLong: \"VirgaLong\",\n\t  VirgaShort: \"VirgaShort\",\n\t  Virgula: \"Virgula\",\n\t\n\t  UpperBrace: \"UpperBrace\"\n\t}; // GlyphCode\n\t\n\tvar QuickSvg = exports.QuickSvg = {\n\t  // namespaces\n\t  ns: \"http://www.w3.org/2000/svg\",\n\t  xmlns: \"http://www.w3.org/2000/xmlns/\",\n\t  xlink: \"http://www.w3.org/1999/xlink\",\n\t\n\t  hasDOMAccess: function hasDOMAccess() {\n\t    return canAccessDOM;\n\t  },\n\t\n\t  // create the root level svg object\n\t  svg: function svg(width, height) {\n\t    var node = document.createElementNS(this.ns, \"svg\");\n\t\n\t    node.setAttribute(\"xmlns\", this.ns);\n\t    node.setAttribute(\"version\", \"1.1\");\n\t    node.setAttributeNS(this.xmlns, \"xmlns:xlink\", this.xlink);\n\t\n\t    node.setAttribute(\"width\", width);\n\t    node.setAttribute(\"height\", height);\n\t\n\t    // create the defs element\n\t    var defs = document.createElementNS(this.ns, \"defs\");\n\t    node.appendChild(defs);\n\t\n\t    node.defs = defs;\n\t\n\t    node.clearNotations = function () {\n\t      // clear out all children except defs\n\t      node.removeChild(defs);\n\t\n\t      while (node.hasChildNodes()) {\n\t        node.removeChild(node.lastChild);\n\t      }node.appendChild(defs);\n\t    };\n\t\n\t    return node;\n\t  },\n\t\n\t  rect: function rect(width, height) {\n\t    var node = document.createElementNS(this.ns, \"rect\");\n\t\n\t    node.setAttribute(\"width\", width);\n\t    node.setAttribute(\"height\", height);\n\t\n\t    return node;\n\t  },\n\t\n\t  line: function line(x1, y1, x2, y2) {\n\t    var node = document.createElementNS(this.ns, \"line\");\n\t\n\t    node.setAttribute(\"x1\", x1);\n\t    node.setAttribute(\"y1\", y1);\n\t    node.setAttribute(\"x2\", x2);\n\t    node.setAttribute(\"y2\", y2);\n\t\n\t    return node;\n\t  },\n\t\n\t  g: function g() {\n\t    var node = document.createElementNS(this.ns, \"g\");\n\t\n\t    return node;\n\t  },\n\t\n\t  text: function text() {\n\t    var node = document.createElementNS(this.ns, \"text\");\n\t\n\t    return node;\n\t  },\n\t\n\t  tspan: function tspan(str) {\n\t    var node = document.createElementNS(this.ns, \"tspan\");\n\t    node.textContent = str;\n\t\n\t    return node;\n\t  },\n\t\n\t  // nodeRef should be the id of the object in defs (without the #)\n\t  use: function use(nodeRef) {\n\t    var node = document.createElementNS(this.ns, \"use\");\n\t    node.setAttributeNS(this.xlink, \"xlink:href\", \"#\" + nodeRef);\n\t\n\t    return node;\n\t  },\n\t\n\t  svgFragmentForGlyph: function svgFragmentForGlyph(glyph) {\n\t    var svgSrc = \"\";\n\t    for (var i = 0; i < glyph.paths.length; ++i) {\n\t      var path = glyph.paths[i];\n\t      svgSrc += QuickSvg.createFragment(path.data ? \"path\" : \"g\", {\n\t        d: path.data || undefined,\n\t        fill: path.type === \"negative\" ? \"#fff\" : undefined\n\t      });\n\t    }\n\t    return svgSrc;\n\t  },\n\t\n\t  nodesForGlyph: function nodesForGlyph(glyph) {\n\t    var functionName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"createNode\";\n\t\n\t    var nodes = [];\n\t    for (var i = 0; i < glyph.paths.length; ++i) {\n\t      var path = glyph.paths[i];\n\t      var props = {};\n\t      if (path.data) props.d = path.data;\n\t      if (path.type === \"negative\") props.fill = \"#fff\";\n\t      nodes.push(QuickSvg[functionName](path.data ? \"path\" : \"g\", props));\n\t    }\n\t    return nodes;\n\t  },\n\t\n\t  createNode: function createNode(name, attributes, children) {\n\t    var node = document.createElementNS(this.ns, name);\n\t    if (attributes && attributes.source) {\n\t      node.source = attributes.source;\n\t      delete attributes.source;\n\t    }\n\t    for (var attr in attributes) {\n\t      if (attributes.hasOwnProperty(attr) && typeof attributes[attr] !== \"undefined\") {\n\t        var val = attributes[attr];\n\t        var match = attr.match(/^([^:]+):([^:]+)$/);\n\t        if (match) {\n\t          node.setAttributeNS(this[match[1]], match[2], val);\n\t        } else {\n\t          node.setAttribute(attr, val);\n\t        }\n\t      }\n\t    }\n\t    if (children) {\n\t      if (typeof children === \"string\") {\n\t        node.textContent = children;\n\t      } else if (children.constructor === [].constructor) {\n\t        for (var i = 0; i < children.length; ++i) {\n\t          node.appendChild(children[i]);\n\t        }\n\t      } else {\n\t        node.appendChild(children);\n\t      }\n\t    }\n\t    return node;\n\t  },\n\t\n\t  createSvgTree: function createSvgTree(name, props) {\n\t    for (var _len = arguments.length, children = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n\t      children[_key - 2] = arguments[_key];\n\t    }\n\t\n\t    if (\"class\" in props) {\n\t      props.className = props.class;\n\t      delete props.class;\n\t    }\n\t    if (children.length === 1 && children[0] instanceof Array) {\n\t      children = children[0];\n\t    }\n\t    var convertKeysToCamelCase = function convertKeysToCamelCase(obj) {\n\t      var _iteratorNormalCompletion = true;\n\t      var _didIteratorError = false;\n\t      var _iteratorError = undefined;\n\t\n\t      try {\n\t        for (var _iterator = Object.keys(obj)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t          var key = _step.value;\n\t\n\t          if (/[-:][a-z]/.test(key)) {\n\t            if (/^\\w+-index$/.test(key)) continue;\n\t            var camelCase = key.replace(/[-:]([a-z])/g, function (whole, letter) {\n\t              return letter.toUpperCase();\n\t            });\n\t            obj[camelCase] = obj[key];\n\t            delete obj[key];\n\t          }\n\t        }\n\t      } catch (err) {\n\t        _didIteratorError = true;\n\t        _iteratorError = err;\n\t      } finally {\n\t        try {\n\t          if (!_iteratorNormalCompletion && _iterator.return) {\n\t            _iterator.return();\n\t          }\n\t        } finally {\n\t          if (_didIteratorError) {\n\t            throw _iteratorError;\n\t          }\n\t        }\n\t      }\n\t    };\n\t    convertKeysToCamelCase(props);\n\t    if (props.style) convertKeysToCamelCase(props.style);\n\t    var source = props.source;\n\t    if (source && source.sourceGabc) {\n\t      props[\"source-gabc\"] = source.sourceGabc;\n\t    }\n\t    return { name: name, props: props, children: children };\n\t  },\n\t\n\t\n\t  createFragment: function createFragment(name, attributes, child) {\n\t    if (child === undefined || child === null) child = \"\";\n\t\n\t    var fragment = \"<\" + name + \" \";\n\t\n\t    for (var attr in attributes) {\n\t      if (attributes.hasOwnProperty(attr) && typeof attributes[attr] !== \"undefined\") fragment += attr + '=\"' + attributes[attr] + '\" ';\n\t    }\n\t\n\t    fragment += \">\" + child + \"</\" + name + \">\";\n\t\n\t    return fragment;\n\t  },\n\t\n\t  parseFragment: function parseFragment(fragment) {\n\t    // create temporary holder\n\t    var well = document.createElement(\"svg\");\n\t\n\t    // act as a setter if svg is given\n\t    if (fragment) {\n\t      var container = this.g();\n\t\n\t      // dump raw svg\n\t      // do this to allow the browser to automatically create svg nodes?\n\t      well.innerHTML = \"<svg>\" + fragment.replace(/\\n/, \"\").replace(/<(\\w+)([^<]+?)\\/>/g, \"<$1$2></$1>\") + \"</svg>\";\n\t\n\t      // transplant nodes\n\t      for (var i = 0, il = well.firstChild.childNodes.length; i < il; i++) {\n\t        container.appendChild(well.firstChild.firstChild);\n\t      }return container;\n\t    }\n\t  },\n\t\n\t  translate: function translate(node, x, y) {\n\t    node.setAttribute(\"transform\", \"translate(\" + x + \",\" + y + \")\");\n\t    return node;\n\t  },\n\t\n\t  scale: function scale(node, sx, sy) {\n\t    node.setAttribute(\"transform\", \"scale(\" + sx + \",\" + sy + \")\");\n\t    return node;\n\t  }\n\t};\n\t\n\tvar TextMeasuringStrategy = exports.TextMeasuringStrategy = {\n\t  // shapes\n\t  Svg: 0,\n\t  Canvas: 1,\n\t  OpenTypeJS: 2\n\t};\n\t\n\tvar specialCharMap = {\n\t  \"℣\": 'v',\n\t  \"℟\": 'r'\n\t};\n\t\n\t/*\n\t * ChantContext\n\t */\n\t\n\tvar ChantContext = exports.ChantContext = function () {\n\t  function ChantContext() {\n\t    var textMeasuringStrategy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : QuickSvg.hasDOMAccess() ? TextMeasuringStrategy.Canvas : TextMeasuringStrategy.OpenTypeJS;\n\t\n\t    _classCallCheck(this, ChantContext);\n\t\n\t    this.textMeasuringStrategy = textMeasuringStrategy;\n\t    this.defs = {};\n\t    this.makeDefs = [];\n\t    if (QuickSvg.hasDOMAccess()) {\n\t      this.defsNode = QuickSvg.createNode(\"defs\");\n\t    }\n\t\n\t    // font styles\n\t    this.textStyles = {};\n\t    this.textColor = \"#000\";\n\t    this.setFont(\"'Palatino Linotype', 'Book Antiqua', Palatino, serif\", 16);\n\t\n\t    this.rubricColor = \"#d00\";\n\t    this.specialCharProperties = {\n\t      \"font-family\": \"'Exsurge Characters'\",\n\t      fill: this.rubricColor,\n\t      class: 'rubric'\n\t    };\n\t    this.textBeforeSpecialChar = \"\";\n\t    this.textAfterSpecialChar = \".\";\n\t    this.specialCharText = function (char) {\n\t      return specialCharMap[char] || char;\n\t    };\n\t\n\t    this.fontStyleDictionary = {\n\t      b: { \"font-weight\": \"bold\" },\n\t      i: { \"font-style\": \"italic\" },\n\t      u: { \"text-decoration\": \"underline\" },\n\t      ul: { \"text-decoration\": \"underline\" },\n\t      c: { fill: this.rubricColor, class: 'rubric' },\n\t      sc: {\n\t        \"font-variant\": \"small-caps\",\n\t        \"font-variant-caps\": \"small-caps\",\n\t        \"font-feature-settings\": \"'smcp'\",\n\t        \"-webkit-font-feature-settings\": \"'smcp'\"\n\t      },\n\t      v: {}\n\t    };\n\t\n\t    this.markupSymbolDictionary = {\n\t      \"*\": \"b\",\n\t      \"_\": \"i\",\n\t      \"^\": \"c\",\n\t      \"%\": \"sc\"\n\t    };\n\t\n\t    this.textStyles.al.prefix = \"<i>\";\n\t\n\t    this.textStyles.translation.prefix = \"<i>\";\n\t\n\t    this.textStyles.dropCap.padding = 1; // minimum padding on either side of drop cap in staffIntervals\n\t\n\t    this.textStyles.annotation.padding = 1; // minimum padding on either side of annotation in staffIntervals\n\t\n\t    this.minLedgerSeparation = 2; // multiple of staffInterval\n\t    this.minSpaceAboveStaff = 2; // multiple of staffInterval\n\t    this.minSpaceBelowStaff = 1; // multiple of staffInterval\n\t    this.spaceBetweenSystems = 1.5; // multiple of staffInterval\n\t\n\t    // everything depends on the scale of the punctum\n\t    this.glyphPunctumWidth = _ExsurgeGlyphs.Glyphs.PunctumQuadratum.bounds.width;\n\t    this.glyphPunctumHeight = _ExsurgeGlyphs.Glyphs.PunctumQuadratum.bounds.height;\n\t\n\t    // max space to add between notations when justifying, in multiples of this.staffInterval\n\t    this.maxExtraSpaceInStaffIntervals = 0.5;\n\t\n\t    // for keeping track of the clef\n\t    this.activeClef = null;\n\t\n\t    this.neumeLineColor = \"#000\";\n\t    this.staffLineColor = \"#000\";\n\t    this.dividerLineColor = \"#000\";\n\t\n\t    this.defaultLanguage = _ExsurgeText.language.latin;\n\t\n\t    // calculate the pixel ratio for drawing to a canvas\n\t    this.pixelRatio = window.devicePixelRatio || 1.0;\n\t\n\t    //this.canvasCtxt.scale(this.pixelRatio, this.pixelRatio);\n\t\n\t    if (textMeasuringStrategy === TextMeasuringStrategy.Svg) {\n\t      this.svgTextMeasurer = QuickSvg.svg(0, 0);\n\t      this.svgTextMeasurer.setAttribute(\"id\", \"TextMeasurer\");\n\t      this.svgTextMeasurer.setAttribute(\"style\", \"position:absolute\");\n\t      document.body.insertBefore(this.svgTextMeasurer, document.body.firstChild);\n\t    } else if (textMeasuringStrategy === TextMeasuringStrategy.Canvas) {\n\t      this.makeCanvasIfNeeded();\n\t    }\n\t\n\t    // for connecting neume syllables...\n\t    this.syllableConnector = \"-\";\n\t\n\t    // set whether to scale the def tags (scaleDefs = true) or the use tags.\n\t    this.scaleDefs = true;\n\t\n\t    // fixme: for now, we just set these using the glyph scales as noted above, presuming a\n\t    // staff line size of 0.5 in. Really what we should do is scale the punctum size based\n\t    // on the text metrics, right? 1 punctum ~ x height size?\n\t    this.setGlyphScaling(1.0 / 16.0);\n\t\n\t    // minimum space between puncta of different syllables, in multiples of this.intraNeumeSpacing\n\t    this.interSyllabicMultiplier = 2.5;\n\t\n\t    // space between an accidental and the following note, in multiples of this.intraNeumeSpacing\n\t    this.accidentalSpaceMultiplier = 2;\n\t\n\t    // space added between puncta of different words, in multiples of this.intraNeumeSpacing\n\t    this.interVerbalMultiplier = 1;\n\t\n\t    this.drawGuides = false;\n\t    this.drawDebuggingBounds = true;\n\t\n\t    // we keep track of where we are in processing notations, so that\n\t    // we can maintain the context for notations to know about.\n\t    //\n\t    // these are only gauranteed to be valid during the performLayout phase!\n\t    this.activeNotations = null;\n\t    this.currNotationIndex = -1;\n\t\n\t    // chant notation elements are normally separated by a minimum fixed amount of space\n\t    // on the staff line. It can happen, however, that two text elements are almost close\n\t    // enough to merge, only to be separated much more by the required hyphen (or other\n\t    // connecting string).\n\t    //\n\t    // This tolerance value allows a little bit of flexibility to merge two close lyrical\n\t    // elements, thus bringing the chant notation elements a bit closer than otherwise\n\t    // would be normally allowed.\n\t    //\n\t    // condensing tolerance is a percentage value (0.0-1.0, inclusive) that indicates\n\t    // how much the default spacing can shrink. E.g., a value of 0.20 allows the layout\n\t    // engine to separate two glyphs by only 80% of the normal inter-neume spacing value.\n\t    this.condensingTolerance = 0.3;\n\t\n\t    // if auto color is true, then exsurge tries to automatically colorize\n\t    // some elements of the chant (directives become rubric color, etc.)\n\t    this.autoColor = true;\n\t\n\t    this.useExtraTextOnly = true;\n\t\n\t    this.noteIdPrefix = 'note-';\n\t\n\t    this.insertFontsInDoc();\n\t  }\n\t\n\t  _createClass(ChantContext, [{\n\t    key: \"getFontForProperties\",\n\t    value: function getFontForProperties() {\n\t      var properties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\t      var fontFamily = arguments[1];\n\t\n\t      var key = getFontFilenameForProperties(properties),\n\t          keyWithFontFamily = getFontFilenameForProperties(properties, fontFamily);\n\t      return this.fontDictionary && (this.fontDictionary[keyWithFontFamily] || this.fontDictionary[fontFamily] || this.fontDictionary.Regular);\n\t    }\n\t  }, {\n\t    key: \"setFont\",\n\t    value: function setFont(font) {\n\t      var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16;\n\t      var baseStyle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\t      var opentypeFontDictionary = arguments[3];\n\t      var _iteratorNormalCompletion2 = true;\n\t      var _didIteratorError2 = false;\n\t      var _iteratorError2 = undefined;\n\t\n\t      try {\n\t        for (var _iterator2 = Object.entries(TextTypes)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n\t          var _step2$value = _slicedToArray(_step2.value, 2),\n\t              key = _step2$value[0],\n\t              textType = _step2$value[1];\n\t\n\t          var textStyle = this.textStyles[key] = this.textStyles[key] || {};\n\t          textStyle.size = textType.defaultSize ? textType.defaultSize(size, this) : textType.size(this);\n\t          textStyle.font = font;\n\t          textStyle.color = this.textColor || \"#000\";\n\t        }\n\t      } catch (err) {\n\t        _didIteratorError2 = true;\n\t        _iteratorError2 = err;\n\t      } finally {\n\t        try {\n\t          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n\t            _iterator2.return();\n\t          }\n\t        } finally {\n\t          if (_didIteratorError2) {\n\t            throw _iteratorError2;\n\t          }\n\t        }\n\t      }\n\t\n\t      this.baseTextStyle = baseStyle;\n\t\n\t      if (opentypeFontDictionary) {\n\t        this.textMeasuringStrategy = TextMeasuringStrategy.OpenTypeJS;\n\t        this.fontDictionary = opentypeFontDictionary;\n\t      }\n\t    }\n\t  }, {\n\t    key: \"setRubricColor\",\n\t    value: function setRubricColor(color) {\n\t      this.rubricColor = color;\n\t      this.specialCharProperties.fill = color;\n\t      this.fontStyleDictionary.c.fill = color;\n\t    }\n\t  }, {\n\t    key: \"setScaleDefs\",\n\t    value: function setScaleDefs(scaleDefs) {\n\t      scaleDefs = !!scaleDefs;\n\t      if (this.scaleDefs !== scaleDefs) {\n\t        this.scaleDefs = scaleDefs;\n\t        this.setGlyphScaling(this.glyphScaling);\n\t      }\n\t    }\n\t  }, {\n\t    key: \"createStyleCss\",\n\t    value: function createStyleCss() {\n\t      var style = \"\";\n\t      var _iteratorNormalCompletion3 = true;\n\t      var _didIteratorError3 = false;\n\t      var _iteratorError3 = undefined;\n\t\n\t      try {\n\t        for (var _iterator3 = Object.entries(TextTypes)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n\t          var _step3$value = _slicedToArray(_step3.value, 2),\n\t              key = _step3$value[0],\n\t              textType = _step3$value[1];\n\t\n\t          var cssClass = textType.cssClass,\n\t              _textStyles$key = this.textStyles[key],\n\t              color = _textStyles$key.color,\n\t              font = _textStyles$key.font,\n\t              size = _textStyles$key.size;\n\t\n\t          style += \"svg.Exsurge .\" + cssClass + \"{fill:\" + color + \";font-family:\" + font + \";font-size:\" + size + \"px;font-kerning:normal}\";\n\t        }\n\t      } catch (err) {\n\t        _didIteratorError3 = true;\n\t        _iteratorError3 = err;\n\t      } finally {\n\t        try {\n\t          if (!_iteratorNormalCompletion3 && _iterator3.return) {\n\t            _iterator3.return();\n\t          }\n\t        } finally {\n\t          if (_didIteratorError3) {\n\t            throw _iteratorError3;\n\t          }\n\t        }\n\t      }\n\t\n\t      return style;\n\t    }\n\t  }, {\n\t    key: \"createStyleNode\",\n\t    value: function createStyleNode() {\n\t      var node = QuickSvg.createNode(\"style\", {});\n\t      node.textContent = this.createStyleCss(this);\n\t      return node;\n\t    }\n\t  }, {\n\t    key: \"createStyleTree\",\n\t    value: function createStyleTree() {\n\t      return { name: \"style\", props: {}, children: [this.createStyleCss(this)] };\n\t    }\n\t  }, {\n\t    key: \"createStyle\",\n\t    value: function createStyle() {\n\t      return \"<style>\" + this.createStyleCss(this) + \"</style>\";\n\t    }\n\t  }, {\n\t    key: \"updateHyphenWidth\",\n\t    value: function updateHyphenWidth() {\n\t      // measure the size of a hyphen for the lyrics\n\t      var hyphen = new Lyric(this, this.syllableConnector, LyricType.SingleSyllable);\n\t      var multiplier = this.minLyricWordSpacing / (this.hyphenWidth || this.minLyricWordSpacing) || 1;\n\t      this.hyphenWidth = hyphen.bounds.width;\n\t\n\t      this.minLyricWordSpacing = multiplier * this.hyphenWidth;\n\t    }\n\t  }, {\n\t    key: \"setStaffHeight\",\n\t    value: function setStaffHeight(staffHeight) {\n\t      this.setGlyphScaling(staffHeight / 600);\n\t    }\n\t  }, {\n\t    key: \"setGlyphScaling\",\n\t    value: function setGlyphScaling(glyphScaling) {\n\t      this.glyphScaling = glyphScaling;\n\t\n\t      this.staffInterval = this.glyphPunctumWidth * this.glyphScaling;\n\t\n\t      // setup the line weights for the various elements.\n\t      this.staffLineWeight = Math.ceil(5 * this.staffInterval / 8) / 5;\n\t      this.neumeLineWeight = this.staffLineWeight; // the weight of connecting lines in the glyphs.\n\t      this.dividerLineWeight = this.neumeLineWeight; // of quarter bar, half bar, etc.\n\t      this.episemaLineWeight = this.neumeLineWeight * 1.25; // of horizontal episemata\n\t\n\t      this.intraNeumeSpacing = this.staffInterval / 2.0;\n\t\n\t      while (this.defsNode && this.defsNode.firstChild) {\n\t        this.defsNode.removeChild(this.defsNode.firstChild);\n\t      }for (var i = 0; i < this.makeDefs.length; ++i) {\n\t        this.makeDefs[i]();\n\t      }\n\t\n\t      this.updateHyphenWidth();\n\t    }\n\t  }, {\n\t    key: \"calculateHeightFromStaffPosition\",\n\t    value: function calculateHeightFromStaffPosition(staffPosition) {\n\t      return -staffPosition * this.staffInterval;\n\t    }\n\t  }, {\n\t    key: \"insertFontsInDoc\",\n\t    value: function insertFontsInDoc() {\n\t      if (!canAccessDOM) return;\n\t\n\t      var styleElement = document.getElementById(\"exsurge-fonts\");\n\t\n\t      if (styleElement === null) {\n\t        // create it since it doesn't exist yet.\n\t        styleElement = document.createElement(\"style\");\n\t        styleElement.id = \"exsurge-fonts\";\n\t\n\t        // styleElement.appendChild(document.createTextNode(\"@font-face{font-family: 'Exsurge Characters';font-weight: normal;font-style: normal;src: url(\" + __exsurgeCharactersFont + \") format('opentype');}\"));\n\t\n\t        document.head.appendChild(styleElement);\n\t      }\n\t    }\n\t\n\t    // returns the next neume starting at this.currNotationIndex, or null\n\t    // if there isn't a neume after this one...\n\t\n\t  }, {\n\t    key: \"findNextNeume\",\n\t    value: function findNextNeume() {\n\t      if (typeof this.currNotationIndex === \"undefined\") throw \"findNextNeume() called without a valid currNotationIndex set\";\n\t\n\t      for (var i = this.currNotationIndex + 1; i < this.notations.length; i++) {\n\t        var notation = this.notations[i];\n\t\n\t        if (notation.isNeume && !notation.hasNoWidth) return notation;\n\t      }\n\t\n\t      return null;\n\t    }\n\t  }, {\n\t    key: \"makeCanvasIfNeeded\",\n\t    value: function makeCanvasIfNeeded() {\n\t      if (!this.canvas) {\n\t        this.canvas = document.createElement(\"canvas\");\n\t        this.canvasCtxt = this.canvas.getContext(\"2d\");\n\t      }\n\t    }\n\t  }, {\n\t    key: \"setCanvasSize\",\n\t    value: function setCanvasSize(width, height) {\n\t      var scale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\t\n\t      this.makeCanvasIfNeeded();\n\t\n\t      this.canvas.style.width = width * scale + \"px\";\n\t      this.canvas.style.height = height * scale + \"px\";\n\t      scale *= this.pixelRatio;\n\t      this.canvas.width = width * scale;\n\t      this.canvas.height = height * scale;\n\t\n\t      this.canvasCtxt.setTransform(scale, 0, 0, scale, 0, 0);\n\t    }\n\t  }]);\n\t\n\t  return ChantContext;\n\t}();\n\t\n\t/*\n\t * ChantLayoutElement\n\t */\n\t\n\t\n\tvar ChantLayoutElement = exports.ChantLayoutElement = function () {\n\t  function ChantLayoutElement() {\n\t    _classCallCheck(this, ChantLayoutElement);\n\t\n\t    this.bounds = new _ExsurgeCore.Rect();\n\t    this.origin = new _ExsurgeCore.Point(0, 0);\n\t\n\t    this.selected = false;\n\t    this.highlighted = false;\n\t  }\n\t\n\t  // draws the element on an html5 canvas\n\t\n\t\n\t  _createClass(ChantLayoutElement, [{\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      throw \"ChantLayout Elements must implement draw(ctxt)\";\n\t    }\n\t\n\t    // returns svg element\n\t\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      throw \"ChantLayout Elements must implement createSvgNode(ctxt)\";\n\t    }\n\t\n\t    // returns svg code for the element, used for printing support\n\t\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      throw \"ChantLayout Elements must implement createSvgFragment(ctxt)\";\n\t    }\n\t  }]);\n\t\n\t  return ChantLayoutElement;\n\t}();\n\t\n\tvar DividerLineVisualizer = exports.DividerLineVisualizer = function (_ChantLayoutElement) {\n\t  _inherits(DividerLineVisualizer, _ChantLayoutElement);\n\t\n\t  function DividerLineVisualizer(ctxt, staffPosition0, staffPosition1, divider) {\n\t    _classCallCheck(this, DividerLineVisualizer);\n\t\n\t    var _this = _possibleConstructorReturn(this, (DividerLineVisualizer.__proto__ || Object.getPrototypeOf(DividerLineVisualizer)).call(this));\n\t\n\t    _this.divider = divider;\n\t\n\t    var y0 = ctxt.calculateHeightFromStaffPosition(staffPosition0);\n\t    var y1 = ctxt.calculateHeightFromStaffPosition(staffPosition1);\n\t\n\t    if (y0 > y1) {\n\t      var temp = y0;\n\t      y0 = y1;\n\t      y1 = temp;\n\t    }\n\t\n\t    _this.bounds.x = 0;\n\t    _this.bounds.y = y0;\n\t    _this.bounds.width = ctxt.dividerLineWeight;\n\t    _this.bounds.height = y1 - y0;\n\t\n\t    _this.origin.x = _this.bounds.width / 2;\n\t    _this.origin.y = y0;\n\t    return _this;\n\t  }\n\t\n\t  _createClass(DividerLineVisualizer, [{\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      var canvasCtxt = ctxt.canvasCtxt;\n\t\n\t      canvasCtxt.fillStyle = ctxt.dividerLineColor;\n\t\n\t      canvasCtxt.fillRect(this.bounds.x, this.bounds.y, ctxt.dividerLineWeight, this.bounds.height);\n\t    }\n\t  }, {\n\t    key: \"getSvgProps\",\n\t    value: function getSvgProps(ctxt) {\n\t      var props = {\n\t        x: this.bounds.x,\n\t        y: this.bounds.y,\n\t        width: ctxt.dividerLineWeight,\n\t        height: this.bounds.height,\n\t        fill: ctxt.dividerLineColor,\n\t        class: \"dividerLine\"\n\t      };\n\t      if (this.divider) {\n\t        if (this.divider.selected) props.class += \" selected\";\n\t        props[\"source-index\"] = this.divider.sourceIndex;\n\t        props[\"element-index\"] = this.divider.elementIndex;\n\t        props.source = this.divider;\n\t      }\n\t      return props;\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      return QuickSvg.createNode(\"rect\", this.getSvgProps(ctxt));\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      return QuickSvg.createSvgTree(\"rect\", this.getSvgProps(ctxt));\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      return QuickSvg.createFragment(\"rect\", this.getSvgProps(ctxt));\n\t    }\n\t  }]);\n\t\n\t  return DividerLineVisualizer;\n\t}(ChantLayoutElement);\n\t\n\tvar NeumeLineVisualizer = exports.NeumeLineVisualizer = function (_ChantLayoutElement2) {\n\t  _inherits(NeumeLineVisualizer, _ChantLayoutElement2);\n\t\n\t  function NeumeLineVisualizer(ctxt, note0, note1, hanging) {\n\t    _classCallCheck(this, NeumeLineVisualizer);\n\t\n\t    var _this2 = _possibleConstructorReturn(this, (NeumeLineVisualizer.__proto__ || Object.getPrototypeOf(NeumeLineVisualizer)).call(this));\n\t\n\t    var staffPosition0 = note0.staffPosition;\n\t    var staffPosition1 = note1.staffPosition;\n\t\n\t    // note0 should be the upper one for our calculations here\n\t    if (staffPosition0 < staffPosition1) {\n\t      var temp = staffPosition0;\n\t      staffPosition0 = staffPosition1;\n\t      staffPosition1 = temp;\n\t    }\n\t\n\t    var y0 = ctxt.calculateHeightFromStaffPosition(staffPosition0);\n\t    var y1 = 0;\n\t\n\t    if (hanging) {\n\t      // if the difference between the notes is only one, and the upper\n\t      // note is on a line, and the lower note is within the four staff lines,\n\t      // then our hanging line goes past the lower note by a whole\n\t      // staff interval\n\t      if (staffPosition0 - staffPosition1 === 1 && Math.abs(staffPosition0) % 2 === 1 && staffPosition1 > -3) staffPosition1--;\n\t\n\t      y1 += ctxt.glyphPunctumHeight * ctxt.glyphScaling / 2.2;\n\t    }\n\t\n\t    y1 += ctxt.calculateHeightFromStaffPosition(staffPosition1);\n\t\n\t    _this2.bounds.x = 0;\n\t    _this2.bounds.y = y0;\n\t    _this2.bounds.width = ctxt.neumeLineWeight;\n\t    _this2.bounds.height = y1 - y0;\n\t\n\t    _this2.origin.x = 0;\n\t    _this2.origin.y = 0;\n\t    return _this2;\n\t  }\n\t\n\t  _createClass(NeumeLineVisualizer, [{\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      var canvasCtxt = ctxt.canvasCtxt;\n\t\n\t      canvasCtxt.fillStyle = ctxt.neumeLineColor;\n\t\n\t      canvasCtxt.fillRect(this.bounds.x, this.bounds.y, ctxt.neumeLineWeight, this.bounds.height);\n\t    }\n\t  }, {\n\t    key: \"getSvgProps\",\n\t    value: function getSvgProps(ctxt) {\n\t      return {\n\t        x: this.bounds.x,\n\t        y: this.bounds.y,\n\t        width: ctxt.neumeLineWeight,\n\t        height: this.bounds.height,\n\t        fill: ctxt.neumeLineColor,\n\t        class: \"neumeLine\"\n\t      };\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      return QuickSvg.createNode(\"rect\", this.getSvgProps(ctxt));\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      return QuickSvg.createSvgTree(\"rect\", this.getSvgProps(ctxt));\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      return QuickSvg.createFragment(\"rect\", this.getSvgProps(ctxt));\n\t    }\n\t  }]);\n\t\n\t  return NeumeLineVisualizer;\n\t}(ChantLayoutElement);\n\t\n\tvar VirgaLineVisualizer = exports.VirgaLineVisualizer = function (_ChantLayoutElement3) {\n\t  _inherits(VirgaLineVisualizer, _ChantLayoutElement3);\n\t\n\t  function VirgaLineVisualizer(ctxt, note) {\n\t    _classCallCheck(this, VirgaLineVisualizer);\n\t\n\t    var _this3 = _possibleConstructorReturn(this, (VirgaLineVisualizer.__proto__ || Object.getPrototypeOf(VirgaLineVisualizer)).call(this));\n\t\n\t    var staffPosition = note.staffPosition;\n\t\n\t    var y0 = ctxt.calculateHeightFromStaffPosition(staffPosition);\n\t    var y1;\n\t\n\t    if (Math.abs(staffPosition % 2) === 0) y1 = y0 + ctxt.staffInterval * 1.8;else y1 = y0 + ctxt.staffInterval * 2.7;\n\t\n\t    _this3.bounds.x = 0;\n\t    _this3.bounds.y = y0;\n\t    _this3.bounds.width = ctxt.neumeLineWeight;\n\t    _this3.bounds.height = y1 - y0;\n\t\n\t    _this3.origin.x = 0;\n\t    _this3.origin.y = 0;\n\t    return _this3;\n\t  }\n\t\n\t  _createClass(VirgaLineVisualizer, [{\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      var canvasCtxt = ctxt.canvasCtxt;\n\t\n\t      canvasCtxt.fillStyle = ctxt.neumeLineColor;\n\t      canvasCtxt.fillRect(this.bounds.x, this.bounds.y, ctxt.neumeLineWeight, this.bounds.height);\n\t    }\n\t  }, {\n\t    key: \"getSvgProps\",\n\t    value: function getSvgProps(ctxt) {\n\t      return {\n\t        x: this.bounds.x,\n\t        y: this.bounds.y,\n\t        width: ctxt.neumeLineWeight,\n\t        height: this.bounds.height,\n\t        fill: ctxt.neumeLineColor,\n\t        class: \"neumeLine\"\n\t      };\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      return QuickSvg.createNode(\"rect\", this.getSvgProps(ctxt));\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      return QuickSvg.createSvgTree(\"rect\", this.getSvgProps(ctxt));\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      return QuickSvg.createFragment(\"rect\", this.getSvgProps(ctxt));\n\t    }\n\t  }]);\n\t\n\t  return VirgaLineVisualizer;\n\t}(ChantLayoutElement);\n\t\n\tvar LineaVisualizer = exports.LineaVisualizer = function (_ChantLayoutElement4) {\n\t  _inherits(LineaVisualizer, _ChantLayoutElement4);\n\t\n\t  function LineaVisualizer(ctxt, note) {\n\t    _classCallCheck(this, LineaVisualizer);\n\t\n\t    var _this4 = _possibleConstructorReturn(this, (LineaVisualizer.__proto__ || Object.getPrototypeOf(LineaVisualizer)).call(this));\n\t\n\t    var staffPosition = note.staffPosition;\n\t\n\t    var y0 = ctxt.calculateHeightFromStaffPosition(staffPosition) - note.origin.y;\n\t    var y1 = y0 + note.bounds.height;\n\t\n\t    _this4.bounds.x = 0;\n\t    _this4.bounds.y = y0;\n\t    _this4.bounds.width = ctxt.neumeLineWeight * 5 + note.bounds.width;\n\t    _this4.bounds.height = y1 - y0;\n\t\n\t    _this4.origin.x = ctxt.neumeLineWeight * 2.5;\n\t    _this4.origin.y = 0;\n\t    return _this4;\n\t  }\n\t\n\t  _createClass(LineaVisualizer, [{\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      var canvasCtxt = ctxt.canvasCtxt;\n\t\n\t      canvasCtxt.fillStyle = ctxt.neumeLineColor;\n\t      canvasCtxt.fillRect(this.bounds.x, this.bounds.y, ctxt.neumeLineWeight, this.bounds.height);\n\t      canvasCtxt.fillRect(this.bounds.x + this.bounds.width - ctxt.neumeLineWeight, this.bounds.y, ctxt.neumeLineWeight, this.bounds.height);\n\t    }\n\t  }, {\n\t    key: \"getSvgProps\",\n\t    value: function getSvgProps(ctxt, x) {\n\t      return {\n\t        x: x,\n\t        y: this.bounds.y,\n\t        width: ctxt.neumeLineWeight,\n\t        height: this.bounds.height,\n\t        fill: ctxt.neumeLineColor,\n\t        class: \"neumeLine\"\n\t      };\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      var _this5 = this;\n\t\n\t      return QuickSvg.createNode(\"g\", null, [this.bounds.x, this.bounds.x + this.bounds.width - ctxt.neumeLineWeight].map(function (x) {\n\t        return QuickSvg.createNode(\"rect\", _this5.getSvgProps(ctxt, x));\n\t      }));\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      var _this6 = this;\n\t\n\t      return QuickSvg.createSvgTree.apply(QuickSvg, [\"g\", {}].concat(_toConsumableArray([this.bounds.x, this.bounds.x + this.bounds.width - ctxt.neumeLineWeight].map(function (x) {\n\t        return QuickSvg.createSvgTree(\"rect\", _this6.getSvgProps(ctxt, x));\n\t      }))));\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      var _this7 = this;\n\t\n\t      return QuickSvg.createFragment(\"g\", null, [this.bounds.x, this.bounds.x + this.bounds.width - ctxt.neumeLineWeight].map(function (x) {\n\t        return QuickSvg.createFragment(\"rect\", _this7.getSvgProps(ctxt, x));\n\t      }).join(''));\n\t    }\n\t  }]);\n\t\n\t  return LineaVisualizer;\n\t}(ChantLayoutElement);\n\t\n\tvar GlyphVisualizer = exports.GlyphVisualizer = function (_ChantLayoutElement5) {\n\t  _inherits(GlyphVisualizer, _ChantLayoutElement5);\n\t\n\t  function GlyphVisualizer(ctxt, glyphCode) {\n\t    _classCallCheck(this, GlyphVisualizer);\n\t\n\t    var _this8 = _possibleConstructorReturn(this, (GlyphVisualizer.__proto__ || Object.getPrototypeOf(GlyphVisualizer)).call(this));\n\t\n\t    _this8.glyph = null;\n\t\n\t    _this8.setGlyph(ctxt, glyphCode);\n\t    return _this8;\n\t  }\n\t\n\t  _createClass(GlyphVisualizer, [{\n\t    key: \"setGlyph\",\n\t    value: function setGlyph(ctxt, glyphCode) {\n\t      var _this9 = this;\n\t\n\t      if (this.glyphCode !== glyphCode) {\n\t        if (typeof glyphCode === \"undefined\" || glyphCode === null || glyphCode === \"\") this.glyphCode = GlyphCode.None;else this.glyphCode = glyphCode;\n\t\n\t        this.glyph = _ExsurgeGlyphs.Glyphs[this.glyphCode];\n\t\n\t        // if this glyph hasn't been used yet, then load it up in the defs section for sharing\n\t        if (!ctxt.defs.hasOwnProperty(this.glyphCode)) {\n\t          var getDefProps = function getDefProps() {\n\t            var options = {\n\t              id: _this9.glyphCode,\n\t              class: \"glyph\"\n\t            };\n\t            if (ctxt.scaleDefs === true) {\n\t              options.transform = \"scale(\" + ctxt.glyphScaling + \")\";\n\t            }\n\t            return options;\n\t          };\n\t          var makeDef = function makeDef() {\n\t            var options = getDefProps();\n\t            // create the ref\n\t            ctxt.defs[_this9.glyphCode] = QuickSvg.createFragment(\"g\", options, QuickSvg.svgFragmentForGlyph(_this9.glyph));\n\t\n\t            if (ctxt.defsNode) ctxt.defsNode.appendChild(QuickSvg.createNode(\"g\", options, QuickSvg.nodesForGlyph(_this9.glyph)));\n\t          };\n\t          makeDef.makeSvgTree = function () {\n\t            return QuickSvg.createSvgTree.apply(QuickSvg, [\"g\", getDefProps()].concat(_toConsumableArray(QuickSvg.nodesForGlyph(_this9.glyph, \"createSvgTree\"))));\n\t          };\n\t          makeDef();\n\t          ctxt.makeDefs.push(makeDef);\n\t        }\n\t\n\t        this.align = this.glyph.align;\n\t      }\n\t\n\t      this.origin.x = this.glyph.origin.x * ctxt.glyphScaling;\n\t      this.origin.y = this.glyph.origin.y * ctxt.glyphScaling;\n\t\n\t      this.bounds.x = 0;\n\t      this.bounds.y = -this.origin.y;\n\t      this.bounds.width = this.glyph.bounds.width * ctxt.glyphScaling;\n\t      this.bounds.height = this.glyph.bounds.height * ctxt.glyphScaling;\n\t    }\n\t  }, {\n\t    key: \"setStaffPosition\",\n\t    value: function setStaffPosition(ctxt, staffPosition) {\n\t      this.bounds.y = ctxt.calculateHeightFromStaffPosition(staffPosition) - this.origin.y;\n\t    }\n\t  }, {\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      var canvasCtxt = ctxt.canvasCtxt;\n\t\n\t      var x = this.bounds.x + this.origin.x;\n\t      var y = this.bounds.y + this.origin.y;\n\t      canvasCtxt.translate(x, y);\n\t      canvasCtxt.scale(ctxt.glyphScaling, ctxt.glyphScaling);\n\t\n\t      for (var i = 0; i < this.glyph.paths.length; i++) {\n\t        var path = this.glyph.paths[i];\n\t        canvasCtxt.fillStyle = path.type === \"negative\" ? \"#fff\" : ctxt.neumeLineColor;\n\t        canvasCtxt.fill(new Path2D(path.data));\n\t      }\n\t\n\t      canvasCtxt.scale(1.0 / ctxt.glyphScaling, 1.0 / ctxt.glyphScaling);\n\t      canvasCtxt.translate(-x, -y);\n\t    }\n\t  }, {\n\t    key: \"getSvgAttributes\",\n\t    value: function getSvgAttributes(ctxt, source) {\n\t      var className = \"\";\n\t      if (/^Porrectus\\d$/.test(this.glyphCode)) {\n\t        var notes = source.neume.notes,\n\t            noteIndex = notes.indexOf(source),\n\t            nextNote = notes[noteIndex + 1];\n\t        className = source.selected ? nextNote.selected ? \"selected\" : \"selectedA\" : nextNote.selected ? \"selectedB\" : \"\";\n\t      } else {\n\t        var isSelected = source && (source.selected || source.model && source.model.selected);\n\t        className = isSelected ? \"selected\" : \"\";\n\t      }\n\t      var result = {\n\t        \"xlink:href\": \"#\" + this.glyphCode,\n\t        class: className\n\t      };\n\t      if (source) {\n\t        result[\"source-index\"] = source.sourceIndex;\n\t        result[\"element-index\"] = source.elementIndex;\n\t        if ('noteIndex' in source) {\n\t          result.class += ' note';\n\t          result.id = ctxt.noteIdPrefix + (source.noteIndex + 1);\n\t          if (source.neume) {\n\t            var glyphCode = source.glyphVisualizer.glyphCode;\n\t            if (/^Porrectus/.test(glyphCode)) {\n\t              result.class += ' porrectus porrectus-start';\n\t            } else if (glyphCode === 'None') {\n\t              result.class += ' porrectus porrectus-end';\n\t            }\n\t          }\n\t        }\n\t      }\n\t      if (ctxt.scaleDefs === true) {\n\t        result.x = this.bounds.x + this.origin.x;\n\t        result.y = this.bounds.y + this.origin.y;\n\t      } else {\n\t        result.x = (this.bounds.x + this.origin.x) / ctxt.glyphScaling;\n\t        result.y = (this.bounds.y + this.origin.y) / ctxt.glyphScaling;\n\t        result.transform = \"scale(\" + ctxt.glyphScaling + \")\";\n\t      }\n\t      return result;\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt, source) {\n\t      var attributes = this.getSvgAttributes(ctxt, source);\n\t      attributes.source = source;\n\t      return QuickSvg.createNode(\"use\", attributes);\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt, source) {\n\t      var attributes = this.getSvgAttributes(ctxt, source);\n\t      if (source) attributes.source = source;\n\t      return QuickSvg.createSvgTree(\"use\", attributes);\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt, source) {\n\t      return QuickSvg.createFragment(\"use\", this.getSvgAttributes(ctxt, source));\n\t    }\n\t  }]);\n\t\n\t  return GlyphVisualizer;\n\t}(ChantLayoutElement);\n\t\n\tvar RoundBraceVisualizer = exports.RoundBraceVisualizer = function (_ChantLayoutElement6) {\n\t  _inherits(RoundBraceVisualizer, _ChantLayoutElement6);\n\t\n\t  function RoundBraceVisualizer(ctxt, x1, x2, y, isAbove) {\n\t    _classCallCheck(this, RoundBraceVisualizer);\n\t\n\t    var _this10 = _possibleConstructorReturn(this, (RoundBraceVisualizer.__proto__ || Object.getPrototypeOf(RoundBraceVisualizer)).call(this));\n\t\n\t    if (x1 > x2) {\n\t      // swap the xs\n\t      var temp = x1;\n\t      x1 = x2;\n\t      x2 = temp;\n\t    }\n\t\n\t    _this10.isAbove = isAbove;\n\t    _this10.braceHeight = 3 * ctxt.staffInterval / 2;\n\t\n\t    _this10.bounds = new _ExsurgeCore.Rect(x1, isAbove ? y - _this10.braceHeight : y, x2 - x1, _this10.braceHeight);\n\t\n\t    _this10.origin.x = 0;\n\t    _this10.origin.y = 0;\n\t    return _this10;\n\t  }\n\t\n\t  _createClass(RoundBraceVisualizer, [{\n\t    key: \"getSvgPathProps\",\n\t    value: function getSvgPathProps(ctxt) {\n\t      return {\n\t        d: this.generatePathString(),\n\t        stroke: ctxt.neumeLineColor,\n\t        \"stroke-width\": ctxt.staffLineWeight + \"px\",\n\t        fill: \"none\",\n\t        class: \"brace\"\n\t      };\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      var node = QuickSvg.createNode(\"path\", this.getSvgPathProps(ctxt));\n\t      if (this.accent) {\n\t        return QuickSvg.createNode(\"g\", {\n\t          class: \"accentedBrace\"\n\t        }, [node, this.accent.createSvgNode(ctxt)]);\n\t      } else return node;\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      var node = QuickSvg.createSvgTree(\"path\", this.getSvgPathProps(ctxt));\n\t      if (this.accent) {\n\t        return QuickSvg.createSvgTree(\"g\", {\n\t          class: \"accentedBrace\"\n\t        }, node, this.accent.createSvgTree(ctxt));\n\t      } else return node;\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      var fragment = QuickSvg.createFragment(\"path\", this.getSvgPathProps(ctxt));\n\t\n\t      if (this.accent) {\n\t        fragment += this.accent.createSvgFragment(ctxt);\n\t\n\t        return QuickSvg.createFragment(\"g\", {\n\t          class: \"accentedBrace\"\n\t        }, fragment);\n\t      } else return fragment;\n\t    }\n\t\n\t    // returns svg path d string\n\t\n\t  }, {\n\t    key: \"generatePathString\",\n\t    value: function generatePathString() {\n\t      var x1 = this.bounds.x;\n\t      var x2 = this.bounds.right();\n\t      var width = this.bounds.width;\n\t      var y, dx, dy;\n\t\n\t      dx = width / 6;\n\t      dy = this.bounds.height;\n\t      if (this.isAbove) {\n\t        y = this.bounds.bottom();\n\t        dy = -dy;\n\t      } else {\n\t        y = this.bounds.y;\n\t      }\n\t\n\t      //Calculate Control Points of path,\n\t      var cx1 = x1 + dx;\n\t      var cy = y + dy;\n\t      var cx2 = x2 - dx;\n\t\n\t      // two decimal points should be enough, but if we need more precision, we can\n\t      // up it here.\n\t      var dp = 2;\n\t      return \"M \" + x1.toFixed(dp) + \" \" + y.toFixed(dp) + \" C \" + cx1.toFixed(dp) + \" \" + cy.toFixed(dp) + \" \" + cx2.toFixed(dp) + \" \" + cy.toFixed(dp) + \" \" + x2.toFixed(dp) + \" \" + y.toFixed(dp);\n\t    }\n\t  }]);\n\t\n\t  return RoundBraceVisualizer;\n\t}(ChantLayoutElement);\n\t\n\tvar CurlyBraceVisualizer = exports.CurlyBraceVisualizer = function (_ChantLayoutElement7) {\n\t  _inherits(CurlyBraceVisualizer, _ChantLayoutElement7);\n\t\n\t  function CurlyBraceVisualizer(ctxt, x1, x2, y) {\n\t    var isAbove = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n\t    var addAcuteAccent = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n\t\n\t    _classCallCheck(this, CurlyBraceVisualizer);\n\t\n\t    var _this11 = _possibleConstructorReturn(this, (CurlyBraceVisualizer.__proto__ || Object.getPrototypeOf(CurlyBraceVisualizer)).call(this));\n\t\n\t    if (x1 > x2) {\n\t      // swap the xs\n\t      var temp = x1;\n\t      x1 = x2;\n\t      x2 = temp;\n\t    }\n\t\n\t    _this11.isAbove = isAbove;\n\t    _this11.braceHeight = ctxt.staffInterval / 2;\n\t\n\t    // y is the actual vertical start of the brace (left hand side)\n\t    // thus for a brace over notes, bounds.y is the bottom of brace,\n\t    // but for a brace under the notes, y is simply the y passed in.\n\t    if (isAbove) y -= _this11.braceHeight;\n\t\n\t    var bounds = new _ExsurgeCore.Rect(x1, y, x2 - x1, _this11.braceHeight);\n\t\n\t    if (addAcuteAccent && isAbove) {\n\t      _this11.accent = new GlyphVisualizer(ctxt, GlyphCode.AcuteAccent);\n\t      _this11.accent.bounds.x += bounds.x + (x2 - x1) / 2;\n\t      _this11.accent.bounds.y += bounds.y - ctxt.staffInterval / 4;\n\t\n\t      bounds.union(_this11.accent.bounds);\n\t    }\n\t\n\t    _this11.bounds = bounds;\n\t\n\t    _this11.origin.x = 0;\n\t    _this11.origin.y = 0;\n\t    return _this11;\n\t  }\n\t\n\t  _createClass(CurlyBraceVisualizer, [{\n\t    key: \"getSvgPathProps\",\n\t    value: function getSvgPathProps(ctxt) {\n\t      return {\n\t        d: this.generatePathString(),\n\t        stroke: ctxt.neumeLineColor,\n\t        \"stroke-width\": ctxt.staffLineWeight + \"px\",\n\t        fill: \"none\",\n\t        class: \"brace\"\n\t      };\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      var node = QuickSvg.createNode(\"path\", this.getSvgPathProps(ctxt));\n\t\n\t      if (this.accent) {\n\t        return QuickSvg.createNode(\"g\", {\n\t          class: \"accentedBrace\"\n\t        }, [node, this.accent.createSvgNode(ctxt)]);\n\t      } else return node;\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      var node = QuickSvg.createSvgTree(\"path\", this.getSvgPathProps(ctxt));\n\t      if (this.accent) {\n\t        return QuickSvg.createSvgTree(\"g\", {\n\t          class: \"accentedBrace\"\n\t        }, node, this.accent.createSvgTree(ctxt));\n\t      } else return node;\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      var fragment = QuickSvg.createFragment(\"path\", this.getSvgPathProps(ctxt));\n\t\n\t      if (this.accent) {\n\t        fragment += this.accent.createSvgFragment(ctxt);\n\t\n\t        return QuickSvg.createFragment(\"g\", {\n\t          class: \"accentedBrace\"\n\t        }, fragment);\n\t      } else return fragment;\n\t    }\n\t\n\t    // code below inspired by: https://gist.github.com/alexhornbake\n\t    // optimized for braces that are only drawn horizontally.\n\t    // returns svg path d string\n\t\n\t  }, {\n\t    key: \"generatePathString\",\n\t    value: function generatePathString() {\n\t      var q = 0.6; // .5 is normal, higher q = more expressive bracket\n\t\n\t      var x1 = this.bounds.x;\n\t      var x2 = this.bounds.right();\n\t      var width = this.bounds.width;\n\t      var y, h;\n\t\n\t      if (this.isAbove) {\n\t        y = this.bounds.bottom();\n\t        h = -this.braceHeight;\n\t      } else {\n\t        y = this.bounds.y;\n\t        h = this.braceHeight;\n\t      }\n\t\n\t      // calculate Control Points of path\n\t      var qy1 = y + q * h;\n\t      var qx2 = x1 + 0.25 * width;\n\t      var qy2 = y + (1 - q) * h;\n\t      var tx1 = x1 + 0.5 * width;\n\t      var ty1 = y + h;\n\t      var qy3 = y + q * h;\n\t      var qx4 = x1 + 0.75 * width;\n\t      var qy4 = y + (1 - q) * h;\n\t\n\t      // two decimal points should be enough, but if we need more precision, we can\n\t      // up it here.\n\t      var dp = 2;\n\t      return \"M \" + x1.toFixed(dp) + \" \" + y.toFixed(dp) + \" Q \" + x1.toFixed(dp) + \" \" + qy1.toFixed(dp) + \" \" + qx2.toFixed(dp) + \" \" + qy2.toFixed(dp) + \" T \" + tx1.toFixed(dp) + \" \" + ty1.toFixed(dp) + \" M \" + x2.toFixed(dp) + \" \" + y.toFixed(dp) + \" Q \" + x2.toFixed(dp) + \" \" + qy3.toFixed(dp) + \" \" + qx4.toFixed(dp) + \" \" + qy4.toFixed(dp) + \" T \" + tx1.toFixed(dp) + \" \" + ty1.toFixed(dp);\n\t    }\n\t  }]);\n\t\n\t  return CurlyBraceVisualizer;\n\t}(ChantLayoutElement);\n\t\n\tvar TextSpan = exports.TextSpan = function () {\n\t  function TextSpan(text, properties, activeTags) {\n\t    var index = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\t\n\t    _classCallCheck(this, TextSpan);\n\t\n\t    if (typeof properties === \"undefined\" || properties === null) properties = {};\n\t\n\t    this.text = text;\n\t    this.properties = properties;\n\t    this.activeTags = activeTags || [];\n\t    this.index = index;\n\t  }\n\t\n\t  _createClass(TextSpan, [{\n\t    key: \"clone\",\n\t    value: function clone() {\n\t      return new TextSpan(this.text, this.properties, this.activeTags, this.index);\n\t    }\n\t  }]);\n\t\n\t  return TextSpan;\n\t}();\n\t\n\tfunction MarkupStackFrame(tagName, startIndex) {\n\t  var properties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\t\n\t  this.tagName = tagName;\n\t  this.startIndex = startIndex;\n\t  this.properties = properties;\n\t}\n\t\n\tMarkupStackFrame.createStackFrame = function (ctxt, tagName, startIndex) {\n\t  return new MarkupStackFrame(tagName, startIndex, ctxt.fontStyleDictionary[tagName]);\n\t};\n\t\n\t// for escaping html strings before they go into the svgs\n\t// adapted from http://stackoverflow.com/a/12034334/5720160\n\tvar __subsForTspans = {\n\t  \"&\": \"&amp;\",\n\t  \"<\": \"&lt;\",\n\t  \">\": \"&gt;\"\n\t};\n\t\n\tvar TextElement = exports.TextElement = function (_ChantLayoutElement8) {\n\t  _inherits(TextElement, _ChantLayoutElement8);\n\t\n\t  function TextElement(ctxt, text, fontFamily, fontSize, textAnchor, sourceIndex, sourceGabc) {\n\t    _classCallCheck(this, TextElement);\n\t\n\t    // set these to some sane values for now...\n\t    var _this12 = _possibleConstructorReturn(this, (TextElement.__proto__ || Object.getPrototypeOf(TextElement)).call(this));\n\t\n\t    _this12.bounds.x = 0;\n\t    _this12.bounds.y = 0;\n\t    _this12.bounds.width = 0;\n\t    _this12.bounds.height = 0;\n\t    _this12.origin.x = 0;\n\t    _this12.origin.y = 0;\n\t\n\t    _this12.fontFamily = fontFamily;\n\t    _this12.fontSize = fontSize;\n\t    _this12.textAnchor = textAnchor;\n\t    _this12.sourceIndex = sourceIndex;\n\t    _this12.sourceGabc = sourceGabc;\n\t    _this12.dominantBaseline = \"baseline\"; // default placement\n\t\n\t    _this12.generateSpansFromText(ctxt, text);\n\t\n\t    _this12.recalculateMetrics(ctxt);\n\t    return _this12;\n\t  }\n\t\n\t  _createClass(TextElement, [{\n\t    key: \"getFromScore\",\n\t    value: function getFromScore(score) {\n\t      return this.textType.getFromScore(score, this);\n\t    }\n\t  }, {\n\t    key: \"generateSpansFromText\",\n\t    value: function generateSpansFromText(ctxt, text) {\n\t      var _this13 = this;\n\t\n\t      text = text.replace(/\\s+/g, \" \");\n\t      this.text = \"\";\n\t      this.spans = [];\n\t\n\t      // save ourselves a lot of grief for a very common text:\n\t      if (text === \"*\" || text === \"†\") {\n\t        this.spans.push(new TextSpan(text));\n\t        return;\n\t      }\n\t\n\t      var markupStack = [];\n\t      var spanStartIndex = 0;\n\t      var newLineInNextSpan = 0;\n\t\n\t      var filterFrames = function filterFrames(frame, symbol) {\n\t        return frame.Symbol === symbol;\n\t      };\n\t\n\t      var closeSpan = function closeSpan(spanText, index, extraProperties) {\n\t        if (spanText === \"\" && !_this13.dropCap) return;\n\t\n\t        _this13.text += spanText;\n\t\n\t        var properties = {};\n\t        for (var i = 0; i < markupStack.length; i++) {\n\t          Object.assign(properties, markupStack[i].properties);\n\t        }if (extraProperties) Object.assign(properties, extraProperties);\n\t        if (newLineInNextSpan) {\n\t          properties.newLine = newLineInNextSpan;\n\t          newLineInNextSpan = 0;\n\t        }\n\t\n\t        _this13.spans.push(new TextSpan(spanText, properties, markupStack.map(function (frame) {\n\t          return frame.tagName;\n\t        }), index));\n\t      };\n\t\n\t      var markupRegex = /(<br\\/?>)|<sp>([arv])\\/<\\/sp>|([arv])\\/\\.|([℣℟])\\.?|(?:([*_^%])|<(\\/)?([bciuv]|ul|sc)>)(?=(?:(.+?)(?:\\5|<\\/\\7>))?)/gi;\n\t\n\t      var match = null;\n\t      var openedAsterisk = false;\n\t      var closeCurrentSpan = function closeCurrentSpan() {\n\t        return closeSpan(text.substring(spanStartIndex, match.index), spanStartIndex);\n\t      };\n\t      while (match = markupRegex.exec(text)) {\n\t        var _match = match,\n\t            _match2 = _slicedToArray(_match, 9),\n\t            newLine = _match2[1],\n\t            specialChar = _match2[2],\n\t            specialChar2 = _match2[3],\n\t            specialChar3 = _match2[4],\n\t            markupSymbol = _match2[5],\n\t            closingTag = _match2[6],\n\t            tagName = _match2[7],\n\t            enclosedText = _match2[8];\n\t\n\t        specialChar = specialChar || specialChar2 || specialChar3;\n\t        // non-matching symbols first\n\t        if (newLine) {\n\t          // close the current span, if any:\n\t          if (match.index > spanStartIndex) {\n\t            closeCurrentSpan();\n\t          }\n\t          // add the newline span:\n\t          newLineInNextSpan++;\n\t        } else if (specialChar) {\n\t          closeCurrentSpan();\n\t          closeSpan(ctxt.textBeforeSpecialChar + ctxt.specialCharText(specialChar) + ctxt.textAfterSpecialChar, match.index, ctxt.specialCharProperties);\n\t        } else {\n\t          // otherwise we're dealing with matching markup delimeters\n\t          if (markupSymbol === \"*\") {\n\t            // we are only strict with the asterisk, because there are cases when it needs to be displayed rather than count as a markup symbol\n\t            if (enclosedText && /[^\\s*]/.test(enclosedText)) {\n\t              openedAsterisk = true;\n\t            } else if (openedAsterisk) {\n\t              openedAsterisk = false;\n\t            } else {\n\t              // actually use the asterisk, since it doesn't have a matching closing asterisk\n\t              continue;\n\t            }\n\t          }\n\t          if (markupSymbol) {\n\t            tagName = ctxt.markupSymbolDictionary[markupSymbol];\n\t            if (markupStack.length > 0 && markupStack[markupStack.length - 1].tagName === tagName) {\n\t              closingTag = true;\n\t            }\n\t          }\n\t          if (markupStack.length > 0 && markupStack[markupStack.length - 1].tagName === tagName) {\n\t            if (closingTag) {\n\t              // group close\n\t              closeCurrentSpan();\n\t              markupStack.pop();\n\t            }\n\t          } else if (markupStack.filter(filterFrames).length > 0) {\n\t            // trying to open a recursive group (or forgot to close a previous group)\n\t            // in either case, we just unwind to the previous stack frame\n\t            spanStartIndex = markupStack[markupStack.length - 1].startIndex;\n\t            markupStack.pop();\n\t            continue;\n\t          } else {\n\t            closeCurrentSpan();\n\t            if (closingTag) {\n\t              // out of order group close:\n\t              var index = markupStack.findIndex(function (frame) {\n\t                return frame.tagName === tagName;\n\t              });\n\t              if (index >= 0) {\n\t                markupStack.splice(index, 1);\n\t              }\n\t            } else {\n\t              // group open\n\t              markupStack.push(MarkupStackFrame.createStackFrame(ctxt, tagName, match.index));\n\t            }\n\t          }\n\t        }\n\t\n\t        // advance the start index past the current markup\n\t        spanStartIndex = match.index + match[0].length;\n\t      }\n\t\n\t      // if we finished matches, and there is still some text left,\n\t      // or if we haven't generated any spans yet, create one final run\n\t      if (spanStartIndex < text.length || this.spans.length === 0) closeSpan(text.slice(spanStartIndex), spanStartIndex);\n\t    }\n\t  }, {\n\t    key: \"getCanvasFontForProperties\",\n\t    value: function getCanvasFontForProperties(ctxt) {\n\t      var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\n\t      var font = \"\";\n\t      if (properties[\"font-style\"] === \"italic\") font += \"italic \";\n\t      if (properties[\"font-variant\"] === \"small-caps\") font += \"small-caps \";\n\t      if (properties[\"font-weight\"] === \"bold\") font += \"bold \";\n\t      var fontSize = parseFloat(properties[\"font-size\"]) || this.fontSize(ctxt);\n\t      if (/%$/.test(properties[\"font-size\"])) {\n\t        fontSize *= this.fontSize(ctxt) / 100;\n\t      }\n\t      font += fontSize * (this.resize || 1) + \"px \";\n\t      font += properties[\"font-family\"] || this.fontFamily(ctxt);\n\t      return font;\n\t    }\n\t  }, {\n\t    key: \"measureSubstringBBox\",\n\t    value: function measureSubstringBBox(ctxt, length) {\n\t      return this.measureSubstring(ctxt, length, true);\n\t    }\n\t\n\t    // if length is undefined and this.rightAligned === true, then offsets will be marked for each newLine span\n\t\n\t  }, {\n\t    key: \"measureSubstring\",\n\t    value: function measureSubstring(ctxt, length) {\n\t      var returnBBox = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\t\n\t      if (length === 0) return 0;\n\t      if (!length) length = Infinity;\n\t      if (length < 0) {\n\t        var lines = -length;\n\t        length = Infinity;\n\t      }\n\t      var canvasCtxt = ctxt.canvasCtxt;\n\t      var width = 0;\n\t      var widths = [];\n\t      var newLineSpans = [this.spans[0]];\n\t      var subStringLength = 0;\n\t      var numLines = 1;\n\t      var fontSize = this.fontSize(ctxt) * (this.resize || 1);\n\t      var bbox = new _ExsurgeCore.Rect(0, 0, 0, 0);\n\t      for (var i = 0; i < this.spans.length; i++) {\n\t        var span = this.spans[i],\n\t            myText = span.text.slice(0, length - subStringLength);\n\t        if (span.properties.newLine) {\n\t          numLines += parseInt(span.properties.newLine) || 1;\n\t          if (!lines && this.rightAligned === true && length === Infinity) {\n\t            newLineSpans[newLineSpans.length - 1].properties.xOffset = this.firstLineMaxWidth - width;\n\t            newLineSpans.push(span);\n\t          } else if (--lines === 0) break;\n\t          widths.push(width);\n\t          width = 0;\n\t        }\n\t        if (ctxt.textMeasuringStrategy === TextMeasuringStrategy.Canvas) {\n\t          canvasCtxt.font = this.getCanvasFontForProperties(ctxt, span.properties);\n\t          var metrics = canvasCtxt.measureText(myText, width, fontSize * (numLines - 1));\n\t          if (\"actualBoundingBoxAscent\" in metrics) {\n\t            var left = metrics.actualBoundingBoxLeft;\n\t            bbox.union(new _ExsurgeCore.Rect(width - left, fontSize * (numLines - 1) - metrics.actualBoundingBoxAscent, metrics.width + left, metrics.actualBoundingBoxDescent + metrics.actualBoundingBoxAscent));\n\t            if (this instanceof DropCap) {\n\t              width += Math.max(0, left);\n\t            }\n\t          } else {\n\t            bbox.union(new _ExsurgeCore.Rect(width, fontSize * (numLines - 2), metrics.width, fontSize));\n\t          }\n\t          width += metrics.width;\n\t        } else if (ctxt.textMeasuringStrategy === TextMeasuringStrategy.OpenTypeJS && ctxt.fontDictionary) {\n\t          // get the bounding box for the substring, placing it at x = width, y = fontSize * (numLines - 1)\n\t          var font = ctxt.getFontForProperties(span.properties, span.properties[\"font-family\"] || this.fontFamily(ctxt));\n\t          var options = { features: { liga: true } };\n\t          if (span.properties[\"font-variant\"] === \"small-caps\") {\n\t            options.features.smcp = true;\n\t          }\n\t          var spanFontSize = parseFloat(span.properties[\"font-size\"]) || fontSize;\n\t          if (/%$/.test(span.properties[\"font-size\"])) {\n\t            spanFontSize *= fontSize / 100;\n\t          }\n\t          var subBbox = font.getPath(myText, width, fontSize * (numLines - 1), spanFontSize, options).getBoundingBox();\n\t          var subWidth = font.getAdvanceWidth(myText, spanFontSize, options);\n\t\n\t          bbox.union(new _ExsurgeCore.Rect(width + subBbox.x1, subBbox.y1, subWidth - subBbox.x1, subBbox.y2 - subBbox.y1));\n\t          width += subWidth;\n\t          if (this instanceof DropCap) {\n\t            width -= subBbox.x1;\n\t          }\n\t        }\n\t        subStringLength += myText.length;\n\t        if (subStringLength === length) break;\n\t      }\n\t      if (!lines && width && newLineSpans.length && this.rightAligned === true && length === Infinity) {\n\t        newLineSpans[newLineSpans.length - 1].properties.xOffset = this.firstLineMaxWidth - width;\n\t      }\n\t      width = Math.max.apply(Math, [width].concat(widths));\n\t      if (returnBBox === true) {\n\t        var height = bbox.height;\n\t        var y = bbox.y,\n\t            x = bbox.x;\n\t        return { width: width, height: height, x: x, y: y };\n\t      } else {\n\t        return width;\n\t      }\n\t    }\n\t  }, {\n\t    key: \"recalculateMetrics\",\n\t    value: function recalculateMetrics(ctxt) {\n\t      var resetNewLines = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\t\n\t      if (resetNewLines) {\n\t        delete this.maxWidth;\n\t        delete this.firstLineMaxWidth;\n\t        delete this.rightAligned;\n\t        delete this.resize;\n\t        delete this.numLines;\n\t        // replace newlines with spaces\n\t        this.spans.forEach(function (span) {\n\t          delete span.properties.xOffset;\n\t          if (span.properties.newLine === true) {\n\t            delete span.properties.newLine;\n\t            span.text = \" \" + span.text;\n\t          }\n\t        });\n\t      }\n\t\n\t      this.bounds.x = 0;\n\t      this.bounds.y = 0;\n\t\n\t      this.origin.x = 0;\n\t\n\t      if (ctxt.textMeasuringStrategy === TextMeasuringStrategy.Svg) {\n\t        while (ctxt.svgTextMeasurer.firstChild) {\n\t          ctxt.svgTextMeasurer.removeChild(ctxt.svgTextMeasurer.firstChild);\n\t        }ctxt.svgTextMeasurer.appendChild(this.createSvgNode(ctxt));\n\t        ctxt.svgTextMeasurer.appendChild(ctxt.createStyleNode());\n\t\n\t        var bbox = ctxt.svgTextMeasurer.firstChild.getBBox();\n\t        this.bounds.width = bbox.width;\n\t        this.bounds.height = bbox.height;\n\t        this.origin.y = -bbox.y; // offset to baseline from top\n\t        this.origin.x = -bbox.x;\n\t      } else {\n\t        var _bbox = this.measureSubstringBBox(ctxt);\n\t        this.bounds.width = _bbox.width;\n\t        this.bounds.height = _bbox.height;\n\t        this.origin.y = -_bbox.y;\n\t        this.origin.x = -_bbox.x;\n\t      }\n\t      this.numLines = this.spans.reduce(function (result, span) {\n\t        return result + (span.properties.newLine ? parseInt(span.properties.newLine) || 1 : 0);\n\t      }, 1);\n\t    }\n\t  }, {\n\t    key: \"setMaxWidth\",\n\t    value: function setMaxWidth(ctxt, maxWidth) {\n\t      var firstLineMaxWidth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : maxWidth;\n\t\n\t      if (this.spans.filter(function (s) {\n\t        return s.properties.newLine === true;\n\t      }).length) {\n\t        // first get rid of any new lines set from a previous maxWidth\n\t        this.recalculateMetrics(ctxt);\n\t      }\n\t      if (this.bounds.width > maxWidth) {\n\t        this.maxWidth = maxWidth;\n\t        var percentage = maxWidth / this.bounds.width;\n\t        if (this instanceof Lyric && percentage >= 0.85) {\n\t          this.resize = percentage;\n\t        } else {\n\t          if (firstLineMaxWidth < 0) firstLineMaxWidth = maxWidth;\n\t          this.firstLineMaxWidth = firstLineMaxWidth;\n\t          var lastWidth = 0,\n\t              lastMatch = null,\n\t              regex = /\\s+|$/g,\n\t              max = firstLineMaxWidth,\n\t              match;\n\t          while ((match = regex.exec(this.text)) && (!lastMatch || match.index > lastMatch.index)) {\n\t            var width = this.measureSubstring(ctxt, match.index);\n\t            if (width > max && lastMatch) {\n\t              var _spans;\n\t\n\t              var spanIndex = 0,\n\t                  length = 0;\n\t              while (length < lastMatch.index && spanIndex < this.spans.length) {\n\t                var span = this.spans[spanIndex++];\n\t                length += span.text.length + (span.properties.newLine ? 1 : 0);\n\t              }\n\t              if (length > lastMatch.index) {\n\t                var _span = this.spans[--spanIndex];\n\t                length -= _span.text.length;\n\t              }\n\t              var splitSpan = this.spans[spanIndex],\n\t                  textLeft = splitSpan.text.slice(0, lastMatch.index - length),\n\t                  textRight = splitSpan.text.slice(lastMatch.index + lastMatch[0].length - length),\n\t                  newSpans = [];\n\t              this.rightAligned = max === firstLineMaxWidth && firstLineMaxWidth !== maxWidth;\n\t              if (textLeft) newSpans.push(new TextSpan(textLeft, splitSpan.properties, splitSpan.activeTags));\n\t              if (textRight) {\n\t                newSpans.push(new TextSpan(textRight, Object.assign({}, splitSpan.properties, { newLine: true }), splitSpan.activeTags));\n\t              } else if (this.spans[spanIndex + 1]) {\n\t                this.spans[spanIndex + 1].properties.newLine = true;\n\t              }\n\t              (_spans = this.spans).splice.apply(_spans, [spanIndex, 1].concat(newSpans));\n\t              this.needsLayout = true;\n\t              max = maxWidth;\n\t              if (match.index === this.text.length || this.measureSubstring(ctxt) <= maxWidth) break;\n\t              width = 0;\n\t              match = lastMatch = null;\n\t            }\n\t            lastWidth = width;\n\t            lastMatch = match;\n\t          }\n\t        }\n\t        this.recalculateMetrics(ctxt, false);\n\t      }\n\t    }\n\t  }, {\n\t    key: \"getCssClasses\",\n\t    value: function getCssClasses() {\n\t      return this.textType && this.textType.cssClass || \"\";\n\t    }\n\t  }, {\n\t    key: \"getExtraStyleProperties\",\n\t    value: function getExtraStyleProperties(ctxt) {\n\t      return ctxt.baseTextStyle || {};\n\t    }\n\t  }, {\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      var canvasCtxt = ctxt.canvasCtxt;\n\t\n\t      if (this.textAnchor === \"middle\") canvasCtxt.textAlign = \"center\";else canvasCtxt.textAlign = \"start\";\n\t\n\t      var translateWidth = 0,\n\t          translateHeight = 0;\n\t      for (var i = 0; i < this.spans.length; i++) {\n\t        var span = this.spans[i];\n\t        var xOffset = span.properties.xOffset || 0;\n\t        if (span.properties.newLine) {\n\t          count = parseInt(span.properties.newLine) || 1;\n\t          canvasCtxt.translate(translateWidth + xOffset, this.fontSize(ctxt) * count);\n\t          translateWidth = -xOffset;\n\t          translateHeight -= this.fontSize(ctxt);\n\t        } else if (xOffset) {\n\t          canvasCtxt.translate(translateWidth + xOffset, 0);\n\t          translateWidth = -xOffset;\n\t        }\n\t        var properties = Object.assign({}, this.getExtraStyleProperties(ctxt), span.properties);\n\t        canvasCtxt.font = this.getCanvasFontForProperties(ctxt, properties);\n\t        canvasCtxt.fillStyle = properties.fill || \"#000\";\n\t        canvasCtxt.fillText(span.text, this.bounds.x, this.bounds.y, span.properties.textLength || undefined);\n\t        var metrics = canvasCtxt.measureText(span.text, this.bounds.x, this.bounds.y);\n\t        translateWidth -= metrics.width;\n\t        canvasCtxt.translate(metrics.width, 0);\n\t      }\n\t      canvasCtxt.translate(translateWidth, translateHeight);\n\t    }\n\t  }, {\n\t    key: \"getSvgProps\",\n\t    value: function getSvgProps() {\n\t      return {\n\t        \"source-index\": this.sourceIndex,\n\t        x: this.bounds.x,\n\t        y: this.bounds.y,\n\t        class: this.getCssClasses().trim(),\n\t        \"text-anchor\": this.textAnchor\n\t        //'dominant-baseline': this.dominantBaseline, // hanging baseline doesn't work in Safari\n\t      };\n\t    }\n\t  }, {\n\t    key: \"getSpanOptions\",\n\t    value: function getSpanOptions(span, ctxt) {\n\t      var useStyleObject = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\t\n\t      var options = {\n\t        \"source-index\": span.index,\n\t        class: span.properties.class,\n\t        style: useStyleObject ? Object.assign({}, span.properties) : (0, _ExsurgeCore.getCssForProperties)(span.properties)\n\t      };\n\t\n\t      if (span.properties.newLine) {\n\t        var xOffset = span.properties.xOffset || 0;\n\t        options.dy = 1.1 * (parseInt(span.properties.newLine) || 1) + \"em\";\n\t        options.x = this.bounds.x + xOffset;\n\t      } else if (span.properties.xOffset) {\n\t        options.x = this.bounds.x + span.properties.xOffset;\n\t      }\n\t      if (span.properties.textLength) {\n\t        options.textLength = span.properties.textLength;\n\t        options.lengthAdjust = \"spacingAndGlyphs\";\n\t        options.y = this.bounds.y;\n\t      }\n\t      if (this.resize) {\n\t        options[\"font-size\"] = span.properties[\"font-size\"] || this.fontSize(ctxt) * this.resize;\n\t      }\n\t      // if (ctxt.setFontFamilyAttributes) {\n\t      //   options[\"font-family\"] =\n\t      //     span.properties[\"font-family\"] ||\n\t      //     getFontFilenameForProperties(span.properties, this.fontFamily(ctxt));\n\t      //   let properties = Object.assign({}, span.properties);\n\t      //   delete properties[\"font-weight\"];\n\t      //   delete properties[\"font-style\"];\n\t      //   options[\"style\"] = getCssForProperties(properties);\n\t      // } else {\n\t      //   options[\"style\"] = getCssForProperties(span.properties);\n\t      // }\n\t\n\t      return options;\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      var spans = [];\n\t\n\t      for (var i = 0; i < this.spans.length; i++) {\n\t        var span = this.spans[i];\n\t        var _options = this.getSpanOptions(span, ctxt);\n\t\n\t        spans.push(QuickSvg.createNode(\"tspan\", _options, span.text));\n\t      }\n\t\n\t      var options = this.getSvgProps();\n\t      var extraStyleProperties = this.getExtraStyleProperties(ctxt);\n\t      options.style = (0, _ExsurgeCore.getCssForProperties)(extraStyleProperties);\n\t      if (extraStyleProperties.class) {\n\t        options.class = extraStyleProperties.class + ' ' + options.class;\n\t      }\n\t      options.source = this;\n\t\n\t      return this.svgNode = QuickSvg.createNode(\"text\", options, spans);\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      var spans = [];\n\t\n\t      for (var i = 0; i < this.spans.length; i++) {\n\t        var span = this.spans[i];\n\t        var _options2 = this.getSpanOptions(span, ctxt, true);\n\t\n\t        spans.push(QuickSvg.createSvgTree(\"tspan\", _options2, span.text));\n\t      }\n\t\n\t      var options = this.getSvgProps();\n\t      options.style = this.getExtraStyleProperties(ctxt);\n\t      if (options.style.class) {\n\t        options.class = options.style.class + ' ' + options.class;\n\t      }\n\t      options.source = this;\n\t\n\t      return QuickSvg.createSvgTree.apply(QuickSvg, [\"text\", options].concat(spans));\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      var spans = \"\";\n\t\n\t      for (var i = 0; i < this.spans.length; i++) {\n\t        var span = this.spans[i];\n\t        var _options3 = this.getSpanOptions(span, ctxt);\n\t\n\t        spans += QuickSvg.createFragment(\"tspan\", _options3, TextElement.escapeForTspan(span.text));\n\t      }\n\t\n\t      var options = this.getSvgProps();\n\t      var extraStyleProperties = this.getExtraStyleProperties(ctxt);\n\t      options.style = (0, _ExsurgeCore.getCssForProperties)(extraStyleProperties);\n\t      if (extraStyleProperties.class) {\n\t        options.class = extraStyleProperties.class + ' ' + options.class;\n\t      }\n\t      if (ctxt.setFontFamilyAttributes) {\n\t        options[\"font-size\"] = this.fontSize(ctxt);\n\t      }\n\t\n\t      return QuickSvg.createFragment(\"text\", options, spans);\n\t    }\n\t  }], [{\n\t    key: \"escapeForTspan\",\n\t    value: function escapeForTspan(string) {\n\t      return String(string).replace(/[&<>]/g, function (s) {\n\t        return __subsForTspans[s];\n\t      });\n\t    }\n\t  }]);\n\t\n\t  return TextElement;\n\t}(ChantLayoutElement);\n\t\n\tvar LyricType = exports.LyricType = {\n\t  SingleSyllable: 0,\n\t  BeginningSyllable: 1,\n\t  MiddleSyllable: 2,\n\t  EndingSyllable: 3,\n\t\n\t  Directive: 4 // for asterisks, \"ij.\" elements, or other performance notes.\n\t};\n\t\n\tvar LyricArray = exports.LyricArray = {\n\t  getLeft: function getLeft(lyricArray) {\n\t    if (lyricArray.length === 0) return NaN;\n\t\n\t    var x = Number.MAX_VALUE;\n\t    for (var i = 0; i < lyricArray.length; i++) {\n\t      if (lyricArray[i]) x = Math.min(x, lyricArray[i].notation.bounds.x + lyricArray[i].bounds.x);\n\t    }\n\t\n\t    return x;\n\t  },\n\t\n\t  getRight: function getRight(lyricArray, presumeConnectorNeeded) {\n\t    if (lyricArray.length === 0) return NaN;\n\t\n\t    var x = Number.MIN_VALUE;\n\t    for (var i = 0; i < lyricArray.length; i++) {\n\t      var l = lyricArray[i];\n\t      if (l) x = Math.max(x, l.notation.bounds.x + l.bounds.x + l.bounds.width + (presumeConnectorNeeded && l.allowsConnector() && !l.needsConnector ? l.getConnectorWidth() : 0));\n\t    }\n\t\n\t    return x;\n\t  },\n\t\n\t  hasOnlyOneLyric: function hasOnlyOneLyric(lyricArray) {\n\t    return lyricArray.filter(function (l) {\n\t      return l.originalText;\n\t    }).length === 1;\n\t  },\n\t\n\t  indexOfLyric: function indexOfLyric(lyricArray) {\n\t    return lyricArray.indexOf(lyricArray.filter(function (l) {\n\t      return l.originalText;\n\t    })[0]);\n\t  },\n\t\n\t  mergeIn: function mergeIn(lyricArray, newLyrics) {\n\t    for (var i = 0; i < newLyrics.length; ++i) {\n\t      if (newLyrics[i].originalText || !lyricArray[i]) lyricArray[i] = newLyrics[i];\n\t    }\n\t  },\n\t\n\t  mergeInArray: function mergeInArray(lyricArray, notations) {\n\t    for (var i = 0; i < notations.length; ++i) {\n\t      this.mergeIn(lyricArray, notations[i].lyrics);\n\t    }\n\t  },\n\t\n\t  setNotation: function setNotation(lyricArray, notation) {\n\t    notation.lyrics = lyricArray;\n\t    for (var i = 0; i < lyricArray.length; ++i) {\n\t      lyricArray[i].notation = notation;\n\t    }\n\t  }\n\t};\n\t\n\tvar Lyric = exports.Lyric = function (_TextElement) {\n\t  _inherits(Lyric, _TextElement);\n\t\n\t  function Lyric(ctxt, text, lyricType, notation, notations, sourceIndex) {\n\t    _classCallCheck(this, Lyric);\n\t\n\t    var _this14 = _possibleConstructorReturn(this, (Lyric.__proto__ || Object.getPrototypeOf(Lyric)).call(this, ctxt, (ctxt.textStyles.lyric.prefix || \"\") + text, function (ctxt) {\n\t      return ctxt.textStyles.lyric.font;\n\t    }, function (ctxt) {\n\t      return ctxt.textStyles.lyric.size;\n\t    }, \"start\", sourceIndex, text));\n\t\n\t    _this14.textType = TextTypes.lyric;\n\t\n\t    // save the original text in case we need to later use the lyric\n\t    // in a dropcap...\n\t    _this14.originalText = text;\n\t\n\t    _this14.notation = notation;\n\t    _this14.notations = notations;\n\t\n\t    if (typeof lyricType === \"undefined\" || lyricType === null || lyricType === \"\") _this14.lyricType = LyricType.SingleSyllable;else _this14.lyricType = lyricType;\n\t\n\t    // Lyrics keep track of how to center them on notation elements.\n\t    // centerTextIndex is the index in this.text where the centering starts,\n\t    // centerLength is how many characters comprise the center point.\n\t    // performLayout will do the processing\n\t    _this14.centerStartIndex = -1;\n\t    _this14.centerLength = text.length;\n\t\n\t    _this14.needsConnector = false;\n\t\n\t    // Lyrics can have their own language defined, which affects the alignment\n\t    // of the text with the notation element\n\t    _this14.language = null;\n\t\n\t    if (_this14.allowsConnector) _this14.connectorSpan = new TextSpan(ctxt.syllableConnector);\n\t    return _this14;\n\t  }\n\t\n\t  _createClass(Lyric, [{\n\t    key: \"allowsConnector\",\n\t    value: function allowsConnector() {\n\t      return this.lyricType === LyricType.BeginningSyllable || this.lyricType === LyricType.MiddleSyllable;\n\t    }\n\t  }, {\n\t    key: \"setForceConnector\",\n\t    value: function setForceConnector(force) {\n\t      this.forceConnector = force && this.allowsConnector();\n\t    }\n\t  }, {\n\t    key: \"setNeedsConnector\",\n\t    value: function setNeedsConnector(needs, width) {\n\t      if (needs === true || this.forceConnector) {\n\t        this.needsConnector = true;\n\t        if (typeof width !== \"undefined\") {\n\t          this.setConnectorWidth(width);\n\t        } else {\n\t          this.bounds.width = this.widthWithoutConnector + this.getConnectorWidth();\n\t        }\n\t\n\t        if (this.spans.length > 0 && this.spans[this.spans.length - 1] !== this.connectorSpan) this.spans.push(this.connectorSpan);\n\t      } else {\n\t        this.connectorWidth = 0;\n\t        this.needsConnector = false;\n\t        this.bounds.width = this.widthWithoutConnector;\n\t\n\t        var span = this.spans.pop();\n\t        if (span && span !== this.connectorSpan) this.spans.push(span);\n\t      }\n\t    }\n\t  }, {\n\t    key: \"setConnectorWidth\",\n\t    value: function setConnectorWidth(width) {\n\t      this.connectorWidth = width;\n\t      this.connectorSpan.properties = Object.assign({}, this.connectorSpan.properties, { textLength: width });\n\t      if (this.needsConnector) this.bounds.width = this.widthWithoutConnector + this.getConnectorWidth();\n\t    }\n\t  }, {\n\t    key: \"getConnectorWidth\",\n\t    value: function getConnectorWidth() {\n\t      return this.connectorWidth || this.defaultConnectorWidth;\n\t    }\n\t  }, {\n\t    key: \"getLeft\",\n\t    value: function getLeft() {\n\t      return this.notation.bounds.x + this.bounds.x;\n\t    }\n\t  }, {\n\t    key: \"getRight\",\n\t    value: function getRight() {\n\t      return this.notation.bounds.x + this.bounds.x + this.bounds.width;\n\t    }\n\t  }, {\n\t    key: \"recalculateMetrics\",\n\t    value: function recalculateMetrics(ctxt) {\n\t      var resetNewLines = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\t\n\t      this.setNeedsConnector();\n\t\n\t      _get(Lyric.prototype.__proto__ || Object.getPrototypeOf(Lyric.prototype), \"recalculateMetrics\", this).call(this, ctxt, resetNewLines);\n\t\n\t      this.widthWithoutConnector = this.bounds.width;\n\t\n\t      this.connectorWidth = 0;\n\t      this.defaultConnectorWidth = ctxt.hyphenWidth;\n\t\n\t      var activeLanguage = this.language || ctxt.defaultLanguage;\n\t\n\t      // calculate the point where the text lines up to the staff notation\n\t      // and offset the rect that much. By default we just center the text,\n\t      // but the logic below allows for smarter lyric alignment based\n\t      // on manual override or language control.\n\t      var offset = this.widthWithoutConnector / 2,\n\t          x1,\n\t          x2,\n\t          vowelSegmentWidth = this.widthWithoutConnector;\n\t\n\t      // some simple checks for sanity, and disable manual centering if the numbers are bad\n\t      if (this.centerStartIndex >= 0 && (this.centerStartIndex >= this.text.length || this.centerLength < 0 || this.centerStartIndex + this.centerLength > this.text.length)) this.centerStartIndex = -1;\n\t\n\t      if (this.text.length === 0) {\n\t        // if we have no text to work with, then there's nothing to do!\n\t        // Unless it's a drop cap, in which case we center the connector:\n\t        if (this.dropCap && this.originalText) {\n\t          offset = ctxt.hyphenWidth / 2;\n\t          vowelSegmentWidth = ctxt.hyphenWidth;\n\t        }\n\t      } else if (this.centerStartIndex >= 0) {\n\t        // if we have manually overriden the centering logic for this lyric,\n\t        // then always use that.\n\t        if (ctxt.textMeasuringStrategy === TextMeasuringStrategy.Svg) {\n\t          // svgTextMeasurer still has the current lyric in it...\n\t          x1 = ctxt.svgTextMeasurer.firstChild.getSubStringLength(0, this.centerStartIndex);\n\t          x2 = ctxt.svgTextMeasurer.firstChild.getSubStringLength(0, this.centerStartIndex + this.centerLength);\n\t        } else {\n\t          x1 = this.measureSubstring(ctxt, this.centerStartIndex);\n\t          x2 = this.measureSubstring(ctxt, this.centerStartIndex + this.centerLength);\n\t        }\n\t        offset = (x1 + x2) / 2;\n\t        vowelSegmentWidth = x2 - x1;\n\t      } else {\n\t        // if it's a directive with no manual centering override, then\n\t        // just center the text.\n\t        if (this.lyricType !== LyricType.Directive) {\n\t          // only consider text content after the last space (if any)\n\t          var startIndex = this.text.lastIndexOf(\" \") + 1;\n\t\n\t          // unless there are no text characters following the space:\n\t          if (startIndex > 0 && !this.text.slice(startIndex).match(/[a-záéíóúýäëïöüÿàèìòùỳāēīōūȳăĕĭŏŭ]/i)) {\n\t            startIndex = 0;\n\t          }\n\t\n\t          // Non-directive elements are lined up to the chant notation based on vowel segments,\n\t          var result = activeLanguage.findVowelSegment(this.text, startIndex);\n\t\n\t          if (result.found !== true) {\n\t            var match = this.text.slice(startIndex).match(/[a-z]+/i);\n\t            if (match) {\n\t              result.startIndex = startIndex + match.index;\n\t              result.length = match[0].length;\n\t            } else {\n\t              result.startIndex = startIndex;\n\t              result.length = this.text.length - startIndex;\n\t            }\n\t          }\n\t          if (ctxt.textMeasuringStrategy === TextMeasuringStrategy.Svg) {\n\t            // svgTextMeasurer still has the current lyric in it...\n\t            x1 = ctxt.svgTextMeasurer.firstChild.getSubStringLength(0, result.startIndex);\n\t            x2 = ctxt.svgTextMeasurer.firstChild.getSubStringLength(0, result.startIndex + result.length);\n\t          } else {\n\t            x1 = this.measureSubstring(ctxt, result.startIndex);\n\t            x2 = this.measureSubstring(ctxt, result.startIndex + result.length);\n\t          }\n\t          offset = (x1 + x2) / 2;\n\t          vowelSegmentWidth = x2 - x1;\n\t        }\n\t      }\n\t\n\t      this.vowelSegmentWidth = vowelSegmentWidth;\n\t\n\t      this.bounds.x = -offset;\n\t      this.bounds.y = 0;\n\t\n\t      this.origin.x = offset;\n\t    }\n\t  }, {\n\t    key: \"generateDropCap\",\n\t    value: function generateDropCap(ctxt) {\n\t      if (this.dropCap) return this.dropCap;\n\t      // disallow special characters:\n\t      if (this.spans[0].properties['font-family'] === ctxt.specialCharProperties['font-family']) {\n\t        return null;\n\t      }\n\t      var dropCapSpan = this.spans[0].clone();\n\t      dropCapSpan.text = dropCapSpan.text.slice(0, 1).toUpperCase();\n\t      var dropCapLowerCase = dropCapSpan.text.toLowerCase();\n\t      // disallow any characters that do not change from .toUpperCase():\n\t      if (dropCapSpan.text === dropCapLowerCase) return null;\n\t\n\t      if (dropCapSpan.activeTags.indexOf(\"sc\") >= 0) dropCapSpan.text = dropCapLowerCase;\n\t\n\t      var dropCap = this.dropCap = new DropCap(ctxt, \"\", this.sourceIndex);\n\t      dropCap.spans = [dropCapSpan];\n\t      var dropCapSourceGabcLength = this.sourceGabc.match(/^(?:<\\/?[^>]>)*.?(?:<\\/[^>]>)*/)[0].length;\n\t      dropCap.sourceGabc = this.sourceGabc.slice(0, dropCapSourceGabcLength);\n\t      this.sourceIndex += dropCap.sourceGabc.length;\n\t      this.sourceGabc = this.sourceGabc.slice(dropCapSourceGabcLength);\n\t\n\t      this.spans[0].text = this.spans[0].text.slice(1);\n\t      this.text = this.text.slice(1);\n\t      this.centerStartIndex--; // lost a letter, so adjust centering accordingly\n\t\n\t      return dropCap;\n\t    }\n\t  }, {\n\t    key: \"getCssClasses\",\n\t    value: function getCssClasses() {\n\t      var classes = this.lyricType === LyricType.Directive ? \"directive \" : \"\";\n\t\n\t      return classes + _get(Lyric.prototype.__proto__ || Object.getPrototypeOf(Lyric.prototype), \"getCssClasses\", this).call(this);\n\t    }\n\t  }, {\n\t    key: \"getExtraStyleProperties\",\n\t    value: function getExtraStyleProperties(ctxt) {\n\t      var props = _get(Lyric.prototype.__proto__ || Object.getPrototypeOf(Lyric.prototype), \"getExtraStyleProperties\", this).call(this, ctxt);\n\t\n\t      if (this.lyricType === LyricType.Directive && ctxt.autoColor === true) props = Object.assign({}, props, { fill: ctxt.rubricColor });\n\t\n\t      return props;\n\t    }\n\t  }]);\n\t\n\t  return Lyric;\n\t}(TextElement);\n\t\n\tvar ChoralSign = exports.ChoralSign = function (_TextElement2) {\n\t  _inherits(ChoralSign, _TextElement2);\n\t\n\t  function ChoralSign(ctxt, text, note, sourceIndex) {\n\t    _classCallCheck(this, ChoralSign);\n\t\n\t    var _this15 = _possibleConstructorReturn(this, (ChoralSign.__proto__ || Object.getPrototypeOf(ChoralSign)).call(this, ctxt, (ctxt.textStyles.choralSign.prefix || \"\") + text, function (ctxt) {\n\t      return ctxt.textStyles.choralSign.font;\n\t    }, TextTypes.choralSign.size, \"start\", sourceIndex, text));\n\t\n\t    _this15.positionHint = MarkingPositionHint.Default;\n\t    _this15.note = note;\n\t    _this15.textType = TextTypes.choralSign;\n\t    return _this15;\n\t  }\n\t\n\t  _createClass(ChoralSign, [{\n\t    key: \"recalculateMetrics\",\n\t    value: function recalculateMetrics(ctxt) {\n\t      _get(ChoralSign.prototype.__proto__ || Object.getPrototypeOf(ChoralSign.prototype), \"recalculateMetrics\", this).call(this, ctxt);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      this.recalculateMetrics(ctxt);\n\t      this.bounds.x = this.note.bounds.x + Math.max(0, (ctxt.staffInterval - this.bounds.width) / 2); // center on the note itself\n\t\n\t      var offset = void 0,\n\t          staffPosition = void 0;\n\t      if (this.positionHint === MarkingPositionHint.Below) {\n\t        offset = -1;\n\t        staffPosition = this.note.staffPosition + 2 * offset;\n\t        staffPosition += staffPosition % 2 === 0 ? 0.3 : 1;\n\t      } else {\n\t        offset = 1;\n\t        staffPosition = this.note.staffPosition + 2 * offset;\n\t        staffPosition += staffPosition % 2 === 0 ? 0.3 : -0.4;\n\t      }\n\t      // if (staffPosition % 2 === 0) staffPosition += offset;\n\t      this.bounds.y = ctxt.calculateHeightFromStaffPosition(staffPosition) + this.origin.y;\n\t    }\n\t  }]);\n\t\n\t  return ChoralSign;\n\t}(TextElement);\n\t\n\tvar AboveLinesText = exports.AboveLinesText = function (_TextElement3) {\n\t  _inherits(AboveLinesText, _TextElement3);\n\t\n\t  /**\n\t   * @param {String} text\n\t   */\n\t  function AboveLinesText(ctxt, text, notation, sourceIndex) {\n\t    _classCallCheck(this, AboveLinesText);\n\t\n\t    var _this16 = _possibleConstructorReturn(this, (AboveLinesText.__proto__ || Object.getPrototypeOf(AboveLinesText)).call(this, ctxt, (ctxt.textStyles.al.prefix || \"\") + text, function (ctxt) {\n\t      return ctxt.textStyles.al.font;\n\t    }, function (ctxt) {\n\t      return ctxt.textStyles.al.size;\n\t    }, \"start\", sourceIndex, text));\n\t\n\t    _this16.notation = notation;\n\t    _this16.textType = TextTypes.al;\n\t\n\t    _this16.padding = ctxt.staffInterval / 2;\n\t    return _this16;\n\t  }\n\t\n\t  return AboveLinesText;\n\t}(TextElement);\n\t\n\tvar TranslationText = exports.TranslationText = function (_TextElement4) {\n\t  _inherits(TranslationText, _TextElement4);\n\t\n\t  /**\n\t   * @param {String} text\n\t   */\n\t  function TranslationText(ctxt, text, notation, sourceIndex) {\n\t    _classCallCheck(this, TranslationText);\n\t\n\t    var gabcSource = text;\n\t    var anchor = \"start\";\n\t    if (text === \"/\") {\n\t      text = \"\";\n\t      anchor = \"end\";\n\t    } else {\n\t      text = (ctxt.textStyles.translation.prefix || \"\") + text;\n\t    }\n\t\n\t    var _this17 = _possibleConstructorReturn(this, (TranslationText.__proto__ || Object.getPrototypeOf(TranslationText)).call(this, ctxt, text, function (ctxt) {\n\t      return ctxt.textStyles.translation.font;\n\t    }, function (ctxt) {\n\t      return ctxt.textStyles.translation.size;\n\t    }, anchor, sourceIndex, gabcSource));\n\t\n\t    _this17.notation = notation;\n\t    _this17.textType = TextTypes.translation;\n\t\n\t    _this17.padding = ctxt.staffInterval / 2;\n\t    return _this17;\n\t  }\n\t\n\t  return TranslationText;\n\t}(TextElement);\n\t\n\tvar DropCap = exports.DropCap = function (_TextElement5) {\n\t  _inherits(DropCap, _TextElement5);\n\t\n\t  /**\n\t   * @param {String} text\n\t   */\n\t  function DropCap(ctxt, text, sourceIndex) {\n\t    _classCallCheck(this, DropCap);\n\t\n\t    var _this18 = _possibleConstructorReturn(this, (DropCap.__proto__ || Object.getPrototypeOf(DropCap)).call(this, ctxt, (ctxt.textStyles.dropCap.prefix || \"\") + text, function (ctxt) {\n\t      return ctxt.textStyles.dropCap.font;\n\t    }, function (ctxt) {\n\t      return ctxt.textStyles.dropCap.size;\n\t    }, \"middle\", sourceIndex, text));\n\t\n\t    _this18.textType = TextTypes.dropCap;\n\t\n\t    _this18.padding = ctxt.staffInterval * ctxt.textStyles.dropCap.padding;\n\t    return _this18;\n\t  }\n\t\n\t  return DropCap;\n\t}(TextElement);\n\t\n\tvar TitleTextElement = exports.TitleTextElement = function (_TextElement6) {\n\t  _inherits(TitleTextElement, _TextElement6);\n\t\n\t  function TitleTextElement(ctxt, text, fontFamily, fontSize, textAnchor, sourceIndex, sourceGabc) {\n\t    _classCallCheck(this, TitleTextElement);\n\t\n\t    return _possibleConstructorReturn(this, (TitleTextElement.__proto__ || Object.getPrototypeOf(TitleTextElement)).call(this, ctxt, text, fontFamily, fontSize, textAnchor, sourceIndex, sourceGabc));\n\t  }\n\t\n\t  return TitleTextElement;\n\t}(TextElement);\n\t\n\tvar Supertitle = exports.Supertitle = function (_TitleTextElement) {\n\t  _inherits(Supertitle, _TitleTextElement);\n\t\n\t  function Supertitle(ctxt, text, sourceIndex) {\n\t    _classCallCheck(this, Supertitle);\n\t\n\t    var _this20 = _possibleConstructorReturn(this, (Supertitle.__proto__ || Object.getPrototypeOf(Supertitle)).call(this, ctxt, (ctxt.textStyles.supertitle.prefix || \"\") + text, function (ctxt) {\n\t      return ctxt.textStyles.supertitle.font;\n\t    }, function (ctxt) {\n\t      return ctxt.textStyles.supertitle.size;\n\t    }, \"middle\", sourceIndex, text));\n\t\n\t    _this20.textType = TextTypes.supertitle;\n\t\n\t    _this20.padding = function (ctxt) {\n\t      return (Number(ctxt.textStyles.supertitle.padding) || 1) * ctxt.textStyles.supertitle.size / 3;\n\t    };\n\t    return _this20;\n\t  }\n\t\n\t  return Supertitle;\n\t}(TitleTextElement);\n\t\n\tvar Title = exports.Title = function (_TitleTextElement2) {\n\t  _inherits(Title, _TitleTextElement2);\n\t\n\t  function Title(ctxt, text, sourceIndex) {\n\t    _classCallCheck(this, Title);\n\t\n\t    var _this21 = _possibleConstructorReturn(this, (Title.__proto__ || Object.getPrototypeOf(Title)).call(this, ctxt, (ctxt.textStyles.title.prefix || \"\") + text, function (ctxt) {\n\t      return ctxt.textStyles.title.font;\n\t    }, function (ctxt) {\n\t      return ctxt.textStyles.title.size;\n\t    }, \"middle\", sourceIndex, text));\n\t\n\t    _this21.textType = TextTypes.title;\n\t\n\t    _this21.padding = function (ctxt) {\n\t      return (Number(ctxt.textStyles.title.padding) || 1) * ctxt.textStyles.title.size / 3;\n\t    };\n\t    return _this21;\n\t  }\n\t\n\t  return Title;\n\t}(TitleTextElement);\n\t\n\tvar Subtitle = exports.Subtitle = function (_TitleTextElement3) {\n\t  _inherits(Subtitle, _TitleTextElement3);\n\t\n\t  function Subtitle(ctxt, text, sourceIndex) {\n\t    _classCallCheck(this, Subtitle);\n\t\n\t    var _this22 = _possibleConstructorReturn(this, (Subtitle.__proto__ || Object.getPrototypeOf(Subtitle)).call(this, ctxt, (ctxt.textStyles.subtitle.prefix || \"\") + text, function (ctxt) {\n\t      return ctxt.textStyles.subtitle.font;\n\t    }, function (ctxt) {\n\t      return ctxt.textStyles.subtitle.size;\n\t    }, \"middle\", sourceIndex, text));\n\t\n\t    _this22.textType = TextTypes.subtitle;\n\t\n\t    _this22.padding = function (ctxt) {\n\t      return (Number(ctxt.textStyles.subtitle.padding) || 1) * ctxt.textStyles.subtitle.size / 3;\n\t    };\n\t    return _this22;\n\t  }\n\t\n\t  return Subtitle;\n\t}(TitleTextElement);\n\t\n\tvar TextLeftRight = exports.TextLeftRight = function (_TitleTextElement4) {\n\t  _inherits(TextLeftRight, _TitleTextElement4);\n\t\n\t  function TextLeftRight(ctxt, text, type, sourceIndex) {\n\t    _classCallCheck(this, TextLeftRight);\n\t\n\t    var _this23 = _possibleConstructorReturn(this, (TextLeftRight.__proto__ || Object.getPrototypeOf(TextLeftRight)).call(this, ctxt, (ctxt.textStyles.leftRight.prefix || \"\") + text, function (ctxt) {\n\t      return ctxt.textStyles.leftRight.font;\n\t    }, function (ctxt) {\n\t      return ctxt.textStyles.leftRight.size;\n\t    }, type === \"textLeft\" ? \"start\" : \"end\", sourceIndex, text));\n\t\n\t    _this23.textType = TextTypes.leftRight;\n\t    _this23.extraClass = type === \"textLeft\" ? \"textLeft\" : \"textRight\";\n\t    _this23.headerKey = type === \"textLeft\" ? \"text-left\" : \"text-right\";\n\t    _this23.padding = function (ctxt) {\n\t      return (Number(ctxt.textStyles.leftRight.padding) || 1) * ctxt.textStyles.leftRight.size / 5;\n\t    };\n\t    return _this23;\n\t  }\n\t\n\t  _createClass(TextLeftRight, [{\n\t    key: \"getCssClasses\",\n\t    value: function getCssClasses() {\n\t      return this.extraClass + \" \" + _get(TextLeftRight.prototype.__proto__ || Object.getPrototypeOf(TextLeftRight.prototype), \"getCssClasses\", this).call(this);\n\t    }\n\t  }]);\n\t\n\t  return TextLeftRight;\n\t}(TitleTextElement);\n\t\n\tvar Annotation = exports.Annotation = function (_TextElement7) {\n\t  _inherits(Annotation, _TextElement7);\n\t\n\t  /**\n\t   * @param {String} text\n\t   */\n\t  function Annotation(ctxt, text) {\n\t    _classCallCheck(this, Annotation);\n\t\n\t    var _this24 = _possibleConstructorReturn(this, (Annotation.__proto__ || Object.getPrototypeOf(Annotation)).call(this, ctxt, (ctxt.textStyles.annotation.prefix || \"\") + text, function (ctxt) {\n\t      return ctxt.textStyles.annotation.font;\n\t    }, function (ctxt) {\n\t      return ctxt.textStyles.annotation.size;\n\t    }, \"middle\"));\n\t\n\t    _this24.textType = TextTypes.annotation;\n\t    _this24.padding = ctxt.staffInterval * ctxt.textStyles.annotation.padding;\n\t    _this24.dominantBaseline = \"hanging\"; // so that annotations can be aligned at the top.\n\t    return _this24;\n\t  }\n\t\n\t  return Annotation;\n\t}(TextElement);\n\t\n\tvar Annotations = exports.Annotations = function (_ChantLayoutElement9) {\n\t  _inherits(Annotations, _ChantLayoutElement9);\n\t\n\t  /**\n\t   * @param {String} text\n\t   */\n\t  function Annotations(ctxt) {\n\t    _classCallCheck(this, Annotations);\n\t\n\t    var _this25 = _possibleConstructorReturn(this, (Annotations.__proto__ || Object.getPrototypeOf(Annotations)).call(this));\n\t\n\t    for (var _len2 = arguments.length, texts = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n\t      texts[_key2 - 1] = arguments[_key2];\n\t    }\n\t\n\t    _this25.annotations = texts.map(function (text) {\n\t      return new Annotation(ctxt, text);\n\t    });\n\t    _this25.padding = Math.max.apply(null, _this25.annotations.map(function (annotation) {\n\t      return annotation.padding;\n\t    }));\n\t    return _this25;\n\t  }\n\t\n\t  _createClass(Annotations, [{\n\t    key: \"updateBounds\",\n\t    value: function updateBounds(multiplier) {\n\t      if (!multiplier) multiplier = 1;\n\t      for (var i = 0; i < this.annotations.length; ++i) {\n\t        var annotation = this.annotations[i];\n\t        annotation.bounds.x += this.bounds.x * multiplier;\n\t        annotation.bounds.y += this.bounds.y * multiplier;\n\t      }\n\t    }\n\t  }, {\n\t    key: \"recalculateMetrics\",\n\t    value: function recalculateMetrics(ctxt) {\n\t      this.bounds.x = 0;\n\t      this.bounds.y = 0;\n\t\n\t      this.bounds.width = 0;\n\t      this.bounds.height = 0;\n\t\n\t      this.origin.x = 0;\n\t      this.origin.y = 0;\n\t\n\t      for (var i = 0; i < this.annotations.length; ++i) {\n\t        var annotation = this.annotations[i];\n\t        annotation.recalculateMetrics(ctxt);\n\t        this.bounds.width = Math.max(this.bounds.width, annotation.bounds.width);\n\t        annotation.bounds.y += this.bounds.height;\n\t        this.bounds.height += annotation.bounds.height;\n\t        this.origin.y = this.origin.y || annotation.origin.y;\n\t      }\n\t    }\n\t  }, {\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      this.updateBounds();\n\t      this.annotations.forEach(function (annotation) {\n\t        annotation.draw(ctxt);\n\t      });\n\t      this.updateBounds(-1);\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      this.updateBounds();\n\t      var result = this.annotations.map(function (annotation) {\n\t        return annotation.createSvgNode(ctxt);\n\t      });\n\t      this.updateBounds(-1);\n\t      return result;\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      this.updateBounds();\n\t      var result = this.annotations.map(function (annotation) {\n\t        return annotation.createSvgTree(ctxt);\n\t      });\n\t      this.updateBounds(-1);\n\t      return { children: result };\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      this.updateBounds();\n\t      var result = this.annotations.map(function (annotation) {\n\t        return annotation.createSvgFragment(ctxt);\n\t      }).join(\"\");\n\t      this.updateBounds(-1);\n\t      return result;\n\t    }\n\t  }]);\n\t\n\t  return Annotations;\n\t}(ChantLayoutElement);\n\t\n\tvar ChantNotationElement = exports.ChantNotationElement = function (_ChantLayoutElement10) {\n\t  _inherits(ChantNotationElement, _ChantLayoutElement10);\n\t\n\t  function ChantNotationElement() {\n\t    _classCallCheck(this, ChantNotationElement);\n\t\n\t    //double\n\t    var _this26 = _possibleConstructorReturn(this, (ChantNotationElement.__proto__ || Object.getPrototypeOf(ChantNotationElement)).call(this));\n\t\n\t    _this26.leadingSpace = 0.0;\n\t    _this26.trailingSpace = DefaultTrailingSpace;\n\t    _this26.keepWithNext = false;\n\t    _this26.needsLayout = true;\n\t\n\t    _this26.lyrics = [];\n\t\n\t    _this26.score = null; // the ChantScore\n\t    _this26.line = null; // the ChantLine\n\t\n\t    _this26.visualizers = [];\n\t    return _this26;\n\t  }\n\t\n\t  _createClass(ChantNotationElement, [{\n\t    key: \"hasLyrics\",\n\t    value: function hasLyrics() {\n\t      return this.lyrics.length !== 0;\n\t    }\n\t  }, {\n\t    key: \"getAllLyricsLeft\",\n\t    value: function getAllLyricsLeft() {\n\t      if (this.lyrics.length === 0) return this.bounds.right();\n\t\n\t      var x = Number.MAX_VALUE;\n\t      for (var i = 0; i < this.lyrics.length; i++) {\n\t        if (this.lyrics[i]) x = Math.min(x, this.lyrics[i].bounds.x);\n\t      }\n\t\n\t      return this.bounds.x + x;\n\t    }\n\t  }, {\n\t    key: \"getAllLyricsRight\",\n\t    value: function getAllLyricsRight() {\n\t      if (this.lyrics.length === 0) return this.bounds.x;\n\t\n\t      var x = Number.MIN_VALUE;\n\t      for (var i = 0; i < this.lyrics.length; i++) {\n\t        if (this.lyrics[i]) x = Math.max(x, this.lyrics[i].bounds.x + this.lyrics[i].bounds.width);\n\t      }\n\t\n\t      return this.bounds.x + x;\n\t    }\n\t\n\t    // used by subclasses while building up the chant notations.\n\t\n\t  }, {\n\t    key: \"addVisualizer\",\n\t    value: function addVisualizer(chantLayoutElement) {\n\t      if (!chantLayoutElement.ignoreBounds) {\n\t        if (this.bounds.isEmpty()) this.bounds = chantLayoutElement.bounds.clone();else this.bounds.union(chantLayoutElement.bounds);\n\t      }\n\t\n\t      this.visualizers.push(chantLayoutElement);\n\t    }\n\t\n\t    // same as addVisualizer, except the element is unshifted to the front\n\t    // of the visualizer array rather than the end. This way, some\n\t    // visualizers can be placed behind the others...ledger lines for example.\n\t\n\t  }, {\n\t    key: \"prependVisualizer\",\n\t    value: function prependVisualizer(chantLayoutElement) {\n\t      if (this.bounds.isEmpty()) this.bounds = chantLayoutElement.bounds.clone();else this.bounds.union(chantLayoutElement.bounds);\n\t\n\t      this.visualizers.unshift(chantLayoutElement);\n\t    }\n\t\n\t    // chant notation elements are given an opportunity to perform their layout via this function.\n\t    // subclasses should call this function first in overrides of this function.\n\t    // on completion, exsurge presumes that the bounds, the origin, and the fragment objects are\n\t    // all valid and prepared for higher level layout.\n\t\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      if (typeof this.trailingSpace === \"function\") this.calculatedTrailingSpace = this.trailingSpace(ctxt);else this.calculatedTrailingSpace = this.trailingSpace;\n\t\n\t      // reset the bounds and the staff notations before doing a layout\n\t      this.visualizers = [];\n\t      this.bounds = new _ExsurgeCore.Rect(Infinity, Infinity, -Infinity, -Infinity);\n\t\n\t      for (var i = 0; i < this.lyrics.length; i++) {\n\t        this.lyrics[i].recalculateMetrics(ctxt);\n\t      }if (this.alText) for (i = 0; i < this.alText.length; i++) {\n\t        this.alText[i].recalculateMetrics(ctxt);\n\t      }if (this.translationText) for (i = 0; i < this.translationText.length; i++) {\n\t        this.translationText[i].recalculateMetrics(ctxt);\n\t      }\n\t    }\n\t\n\t    // some subclasses have internal dependencies on other notations (for example,\n\t    // a custos can depend on a later neume which it uses to set its height).\n\t    // subclasses can override this function so that when the notations are\n\t    // altered, the subclass can correctly invalidate (and later restore) its own\n\t    // depedencies\n\t\n\t  }, {\n\t    key: \"resetDependencies\",\n\t    value: function resetDependencies() {}\n\t\n\t    // a helper function for subclasses to call after they are done performing layout...\n\t\n\t  }, {\n\t    key: \"finishLayout\",\n\t    value: function finishLayout(ctxt) {\n\t      var _this27 = this;\n\t\n\t      this.bounds.x = 0;\n\t\n\t      var language = this.lyrics[0] && this.lyrics[0].language || ctxt.defaultLanguage;\n\t      // center the neume itself over the syllable, or just the first punctum\n\t      // if the neume is wider than the syllable + the width of a punctum, we always revert to centering just over the punctum\n\t      var calculateLyricX = language.centerNeume ? function (lyric) {\n\t        return lyric.bounds.x = _this27.bounds.width + ctxt.staffInterval < lyric.vowelSegmentWidth ? _this27.bounds.width / 2 - lyric.origin.x : _this27.origin.x - lyric.origin.x;\n\t      } : function (lyric) {\n\t        return lyric.bounds.x = _this27.origin.x - lyric.origin.x;\n\t      };\n\t      this.lyrics.forEach(calculateLyricX);\n\t\n\t      this.needsLayout = false;\n\t    }\n\t  }, {\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      var canvasCtxt = ctxt.canvasCtxt;\n\t      canvasCtxt.translate(this.bounds.x, 0);\n\t\n\t      for (var i = 0; i < this.visualizers.length; i++) {\n\t        this.visualizers[i].draw(ctxt);\n\t      }for (i = 0; i < this.lyrics.length; i++) {\n\t        this.lyrics[i].draw(ctxt);\n\t      }if (this.translationText) for (i = 0; i < this.translationText.length; i++) {\n\t        this.translationText[i].draw(ctxt);\n\t      }if (this.alText) for (i = 0; i < this.alText.length; i++) {\n\t        this.alText[i].draw(ctxt);\n\t      }canvasCtxt.translate(-this.bounds.x, 0);\n\t    }\n\t  }, {\n\t    key: \"getInnerSvgNodes\",\n\t    value: function getInnerSvgNodes(ctxt) {\n\t      var functionName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"createSvgNode\";\n\t\n\t      var inner = [];\n\t\n\t      for (i = 0; i < this.lyrics.length; i++) {\n\t        inner.push(this.lyrics[i][functionName](ctxt));\n\t      }if (this.translationText) for (i = 0; i < this.translationText.length; i++) {\n\t        inner.push(this.translationText[i][functionName](ctxt));\n\t      }if (this.alText) for (i = 0; i < this.alText.length; i++) {\n\t        inner.push(this.alText[i][functionName](ctxt));\n\t      }if (this.visualizers.length) {\n\t        var visualizers = [];\n\t        for (var i = 0; i < this.visualizers.length; i++) {\n\t          visualizers.push(this.visualizers[i][functionName](ctxt, this));\n\t        }if (functionName === \"createSvgTree\") {\n\t          inner.push(QuickSvg.createSvgTree.apply(QuickSvg, [\"g\", { class: \"Notations\" }].concat(visualizers)));\n\t        } else {\n\t          inner.push(QuickSvg.createNode(\"g\", { class: \"Notations\" }, visualizers));\n\t        }\n\t      }\n\t      return inner;\n\t    }\n\t  }, {\n\t    key: \"getSvgProps\",\n\t    value: function getSvgProps() {\n\t      return {\n\t        // this.constructor.name will not be the same after being mangled by UglifyJS\n\t        class: \"ChantNotationElement \" + this.constructor.name,\n\t        transform: \"translate(\" + this.bounds.x + \",\" + 0 + \")\"\n\t      };\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      var inner = this.getInnerSvgNodes(ctxt, \"createSvgNode\");\n\t      var svgProps = this.getSvgProps();\n\t      svgProps.source = this;\n\t      return QuickSvg.createNode(\"g\", svgProps, inner);\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      var inner = this.getInnerSvgNodes(ctxt, \"createSvgTree\");\n\t      var svgProps = this.getSvgProps();\n\t      svgProps.source = this;\n\t      return QuickSvg.createSvgTree.apply(QuickSvg, [\"g\", svgProps].concat(_toConsumableArray(inner)));\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      var inner = \"\";\n\t\n\t      for (i = 0; i < this.lyrics.length; i++) {\n\t        inner += this.lyrics[i].createSvgFragment(ctxt);\n\t      }if (this.translationText) for (i = 0; i < this.translationText.length; i++) {\n\t        inner += this.translationText[i].createSvgFragment(ctxt);\n\t      }if (this.alText) for (i = 0; i < this.alText.length; i++) {\n\t        inner += this.alText[i].createSvgFragment(ctxt);\n\t      }for (var i = 0; i < this.visualizers.length; i++) {\n\t        inner += this.visualizers[i].createSvgFragment(ctxt, this);\n\t      }return QuickSvg.createFragment(\"g\", this.getSvgProps(), inner);\n\t    }\n\t  }]);\n\t\n\t  return ChantNotationElement;\n\t}(ChantLayoutElement);\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.ChantDocument = exports.ChantScore = exports.ChantMapping = exports.ChantLineBreak = exports.TextOnly = exports.FaClef = exports.DoClef = exports.Clef = exports.Note = exports.NoteShapeModifiers = exports.NoteShape = exports.LiquescentType = undefined;\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _ExsurgeChantChantLine = __webpack_require__(6);\n\t\n\tvar _ExsurgeChantSigns = __webpack_require__(8);\n\t\n\tvar _ExsurgeCore = __webpack_require__(1);\n\t\n\tvar _ExsurgeDrawing = __webpack_require__(4);\n\t\n\tvar _ExsurgeGabc = __webpack_require__(9);\n\t\n\tvar _ExsurgeTitles = __webpack_require__(11);\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } //\n\t// Author(s):\n\t// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n\t//\n\t// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a copy\n\t// of this software and associated documentation files (the \"Software\"), to deal\n\t// in the Software without restriction, including without limitation the rights\n\t// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t// copies of the Software, and to permit persons to whom the Software is\n\t// furnished to do so, subject to the following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included in\n\t// all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\t// THE SOFTWARE.\n\t//\n\t\n\tvar LiquescentType = exports.LiquescentType = {\n\t  None: 0,\n\t\n\t  // flags that can be combined, though of course it\n\t  // it doesn't make sense to combine some!\n\t  Large: 1 << 0,\n\t  Small: 1 << 1,\n\t  Ascending: 1 << 2,\n\t  Descending: 1 << 3,\n\t  InitioDebilis: 1 << 4,\n\t\n\t  // handy liquescent types\n\t  LargeAscending: 1 << 0 | 1 << 2,\n\t  LargeDescending: 1 << 0 | 1 << 3,\n\t  SmallAscending: 1 << 1 | 1 << 2,\n\t  SmallDescending: 1 << 1 | 1 << 3\n\t};\n\t\n\tvar NoteShape = exports.NoteShape = {\n\t  // shapes\n\t  Default: 0,\n\t  Virga: 1,\n\t  Inclinatum: 2,\n\t  Quilisma: 3,\n\t  Stropha: 4,\n\t  Oriscus: 5\n\t};\n\t\n\tvar NoteShapeModifiers = exports.NoteShapeModifiers = {\n\t  // flags which modify the shape\n\t  // not all of them apply to every shape of course\n\t  None: 0,\n\t  Ascending: 1 << 0,\n\t  Descending: 1 << 1,\n\t  Cavum: 1 << 2,\n\t  Stemmed: 1 << 3,\n\t  Linea: 1 << 4,\n\t  Reverse: 1 << 5\n\t};\n\t\n\t/**\n\t * @class\n\t */\n\t\n\tvar Note = exports.Note = function (_ChantLayoutElement) {\n\t  _inherits(Note, _ChantLayoutElement);\n\t\n\t  /**\n\t   * @para {Pitch} pitch\n\t   */\n\t  function Note(pitch) {\n\t    _classCallCheck(this, Note);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Note.__proto__ || Object.getPrototypeOf(Note)).call(this));\n\t\n\t    if (typeof pitch !== \"undefined\") _this.pitch = pitch;else _this.pitch = null;\n\t\n\t    _this.glyphVisualizer = null;\n\t\n\t    // The staffPosition on a note is an integer that indicates the vertical position on the staff.\n\t    // 0 is the center space on the staff (equivalent to gabc 'g'). Positive numbers go up\n\t    // the staff, and negative numbers go down, i.e., 1 is gabc 'h', 2 is gabc 'i', -1 is gabc 'f', etc.\n\t    _this.staffPosition = 0;\n\t    _this.liquescent = LiquescentType.None;\n\t    _this.shape = NoteShape.Default;\n\t    _this.shapeModifiers = NoteShapeModifiers.None;\n\t\n\t    // notes keep track of the neume they belong to in order to facilitate layout\n\t    // this.neume gets set when a note is added to a neume via Neume.addNote()\n\t    _this.neume = null;\n\t\n\t    // various markings that can exist on a note, organized by type\n\t    // for faster access and simpler code logic\n\t    _this.episemata = [];\n\t    _this.morae = []; // silly to have an array of these, but gabc allows multiple morae per note!\n\t\n\t    // these are set on the note when they are needed, otherwise, they're undefined\n\t    // this.ictus\n\t    // this.accuteAccent\n\t    // this.braceStart\n\t    // this.braceEnd\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Note, [{\n\t    key: \"setGlyph\",\n\t    value: function setGlyph(ctxt, glyphCode) {\n\t      if (this.glyphVisualizer) this.glyphVisualizer.setGlyph(ctxt, glyphCode);else this.glyphVisualizer = new _ExsurgeDrawing.GlyphVisualizer(ctxt, glyphCode);\n\t\n\t      this.glyphVisualizer.setStaffPosition(ctxt, this.staffPosition);\n\t\n\t      // assign glyphvisualizer metrics to this note\n\t      this.bounds.x = this.glyphVisualizer.bounds.x;\n\t      this.bounds.y = this.glyphVisualizer.bounds.y;\n\t      this.bounds.width = this.glyphVisualizer.bounds.width;\n\t      this.bounds.height = this.glyphVisualizer.bounds.height;\n\t\n\t      this.origin.x = this.glyphVisualizer.origin.x;\n\t      this.origin.y = this.glyphVisualizer.origin.y;\n\t    }\n\t\n\t    // a utility function for modifiers\n\t\n\t  }, {\n\t    key: \"shapeModifierMatches\",\n\t    value: function shapeModifierMatches(shapeModifier) {\n\t      if (shapeModifier === NoteShapeModifiers.None) return this.shapeModifier === NoteShapeModifiers.None;else return this.shapeModifier & shapeModifier !== 0;\n\t    }\n\t  }, {\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      this.glyphVisualizer.bounds.x = this.bounds.x;\n\t      this.glyphVisualizer.bounds.y = this.bounds.y;\n\t\n\t      this.glyphVisualizer.draw(ctxt);\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      this.glyphVisualizer.bounds.x = this.bounds.x;\n\t      this.glyphVisualizer.bounds.y = this.bounds.y;\n\t      this.svgNode = this.glyphVisualizer.createSvgNode(ctxt, this);\n\t      return this.svgNode;\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      this.glyphVisualizer.bounds.x = this.bounds.x;\n\t      this.glyphVisualizer.bounds.y = this.bounds.y;\n\t      return this.glyphVisualizer.createSvgTree(ctxt, this);\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      this.glyphVisualizer.bounds.x = this.bounds.x;\n\t      this.glyphVisualizer.bounds.y = this.bounds.y;\n\t      return this.glyphVisualizer.createSvgFragment(ctxt, this);\n\t    }\n\t  }]);\n\t\n\t  return Note;\n\t}(_ExsurgeDrawing.ChantLayoutElement);\n\t\n\tvar Clef = exports.Clef = function (_ChantNotationElement) {\n\t  _inherits(Clef, _ChantNotationElement);\n\t\n\t  function Clef(staffPosition, octave) {\n\t    var defaultAccidental = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\t\n\t    _classCallCheck(this, Clef);\n\t\n\t    var _this2 = _possibleConstructorReturn(this, (Clef.__proto__ || Object.getPrototypeOf(Clef)).call(this));\n\t\n\t    _this2.isClef = true;\n\t    _this2.staffPosition = staffPosition;\n\t    _this2.octave = octave;\n\t    _this2.defaultAccidental = defaultAccidental;\n\t    _this2.activeAccidental = defaultAccidental;\n\t    _this2.keepWithNext = true;\n\t    return _this2;\n\t  }\n\t\n\t  _createClass(Clef, [{\n\t    key: \"resetAccidentals\",\n\t    value: function resetAccidentals() {\n\t      this.activeAccidental = this.defaultAccidental;\n\t    }\n\t  }, {\n\t    key: \"pitchToStaffPosition\",\n\t    value: function pitchToStaffPosition(pitch) {}\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      ctxt.activeClef = this;\n\t\n\t      if (this.defaultAccidental) this.defaultAccidental.performLayout(ctxt);\n\t\n\t      _get(Clef.prototype.__proto__ || Object.getPrototypeOf(Clef.prototype), \"performLayout\", this).call(this, ctxt);\n\t    }\n\t  }, {\n\t    key: \"finishLayout\",\n\t    value: function finishLayout(ctxt) {\n\t      // if we have a default accidental, then add a glyph for it now\n\t      if (this.defaultAccidental) {\n\t        var accidentalGlyph = this.defaultAccidental.createGlyphVisualizer(ctxt);\n\t        accidentalGlyph.bounds.x += this.visualizers[0].bounds.right() + ctxt.intraNeumeSpacing;\n\t        this.addVisualizer(accidentalGlyph);\n\t      }\n\t\n\t      _get(Clef.prototype.__proto__ || Object.getPrototypeOf(Clef.prototype), \"finishLayout\", this).call(this, ctxt);\n\t    }\n\t  }, {\n\t    key: \"clone\",\n\t    value: function clone() {\n\t      if (this.model) return this.model.clone();\n\t      var clone = new this.constructor(this.staffPosition, this.octave, this.defaultAccidental);\n\t      clone.sourceGabc = this.sourceGabc;\n\t      clone.sourceIndex = this.sourceIndex;\n\t      clone.elementIndex = this.elementIndex;\n\t      clone.model = this;\n\t      return clone;\n\t    }\n\t  }], [{\n\t    key: \"default\",\n\t    value: function _default() {\n\t      return __defaultDoClef;\n\t    }\n\t  }]);\n\t\n\t  return Clef;\n\t}(_ExsurgeDrawing.ChantNotationElement);\n\t\n\tvar DoClef = exports.DoClef = function (_Clef) {\n\t  _inherits(DoClef, _Clef);\n\t\n\t  function DoClef(staffPosition, octave) {\n\t    var defaultAccidental = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\t\n\t    _classCallCheck(this, DoClef);\n\t\n\t    var _this3 = _possibleConstructorReturn(this, (DoClef.__proto__ || Object.getPrototypeOf(DoClef)).call(this, staffPosition, octave, defaultAccidental));\n\t\n\t    _this3.leadingSpace = 0.0;\n\t    return _this3;\n\t  }\n\t\n\t  _createClass(DoClef, [{\n\t    key: \"pitchToStaffPosition\",\n\t    value: function pitchToStaffPosition(pitch) {\n\t      return (pitch.octave - this.octave) * 7 + this.staffPosition + _ExsurgeCore.Pitch.stepToStaffOffset(pitch.step) - _ExsurgeCore.Pitch.stepToStaffOffset(_ExsurgeCore.Step.Do);\n\t    }\n\t  }, {\n\t    key: \"staffPositionToPitch\",\n\t    value: function staffPositionToPitch(staffPosition) {\n\t      var offset = staffPosition - this.staffPosition;\n\t      var octaveOffset = Math.floor(offset / 7);\n\t\n\t      var step = _ExsurgeCore.Pitch.staffOffsetToStep(offset);\n\t\n\t      if (this.activeAccidental && this.activeAccidental.staffPosition === staffPosition) step += this.activeAccidental.accidentalType;\n\t\n\t      return new _ExsurgeCore.Pitch(step, this.octave + octaveOffset);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(DoClef.prototype.__proto__ || Object.getPrototypeOf(DoClef.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var glyph = new _ExsurgeDrawing.GlyphVisualizer(ctxt, _ExsurgeDrawing.GlyphCode.DoClef);\n\t      glyph.setStaffPosition(ctxt, this.staffPosition);\n\t      this.addVisualizer(glyph);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return DoClef;\n\t}(Clef);\n\t\n\tvar __defaultDoClef = new DoClef(3, 2);\n\t\n\tvar FaClef = exports.FaClef = function (_Clef2) {\n\t  _inherits(FaClef, _Clef2);\n\t\n\t  function FaClef(staffPosition, octave) {\n\t    var defaultAccidental = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\t\n\t    _classCallCheck(this, FaClef);\n\t\n\t    var _this4 = _possibleConstructorReturn(this, (FaClef.__proto__ || Object.getPrototypeOf(FaClef)).call(this, staffPosition, octave, defaultAccidental));\n\t\n\t    _this4.octave = octave;\n\t\n\t    _this4.leadingSpace = 0;\n\t    return _this4;\n\t  }\n\t\n\t  _createClass(FaClef, [{\n\t    key: \"pitchToStaffPosition\",\n\t    value: function pitchToStaffPosition(pitch) {\n\t      return (pitch.octave - this.octave) * 7 + this.staffPosition + _ExsurgeCore.Pitch.stepToStaffOffset(pitch.step) - _ExsurgeCore.Pitch.stepToStaffOffset(_ExsurgeCore.Step.Fa);\n\t    }\n\t  }, {\n\t    key: \"staffPositionToPitch\",\n\t    value: function staffPositionToPitch(staffPosition) {\n\t      var offset = staffPosition - this.staffPosition + 3; // + 3 because it's a fa clef (3 == offset from Do)\n\t      var octaveOffset = Math.floor(offset / 7);\n\t\n\t      var step = _ExsurgeCore.Pitch.staffOffsetToStep(offset);\n\t\n\t      if (this.activeAccidental && this.activeAccidental.staffPosition === staffPosition) step += this.activeAccidental.accidentalType;\n\t\n\t      return new _ExsurgeCore.Pitch(step, this.octave + octaveOffset);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(FaClef.prototype.__proto__ || Object.getPrototypeOf(FaClef.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var glyph = new _ExsurgeDrawing.GlyphVisualizer(ctxt, _ExsurgeDrawing.GlyphCode.FaClef);\n\t      glyph.setStaffPosition(ctxt, this.staffPosition);\n\t      this.addVisualizer(glyph);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return FaClef;\n\t}(Clef);\n\t\n\t/*\n\t * TextOnly\n\t */\n\t\n\t\n\tvar TextOnly = exports.TextOnly = function (_ChantNotationElement2) {\n\t  _inherits(TextOnly, _ChantNotationElement2);\n\t\n\t  function TextOnly(sourceIndex, sourceLength) {\n\t    _classCallCheck(this, TextOnly);\n\t\n\t    var _this5 = _possibleConstructorReturn(this, (TextOnly.__proto__ || Object.getPrototypeOf(TextOnly)).call(this));\n\t\n\t    _this5.sourceIndex = sourceIndex;\n\t    _this5.sourceLength = sourceLength;\n\t    _this5.sourceGabc = \"\";\n\t    _this5.trailingSpace = 0;\n\t    return _this5;\n\t  }\n\t\n\t  _createClass(TextOnly, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(TextOnly.prototype.__proto__ || Object.getPrototypeOf(TextOnly.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      // add an empty glyph as a placeholder\n\t      this.addVisualizer(new _ExsurgeDrawing.GlyphVisualizer(ctxt, _ExsurgeDrawing.GlyphCode.None));\n\t\n\t      this.origin.x = 0;\n\t      this.origin.y = 0;\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return TextOnly;\n\t}(_ExsurgeDrawing.ChantNotationElement);\n\t\n\tvar ChantLineBreak = exports.ChantLineBreak = function (_ChantNotationElement3) {\n\t  _inherits(ChantLineBreak, _ChantNotationElement3);\n\t\n\t  function ChantLineBreak(justify) {\n\t    _classCallCheck(this, ChantLineBreak);\n\t\n\t    var _this6 = _possibleConstructorReturn(this, (ChantLineBreak.__proto__ || Object.getPrototypeOf(ChantLineBreak)).call(this));\n\t\n\t    _this6.calculatedTrailingSpace = _this6.trailingSpace = 0;\n\t    _this6.justify = justify;\n\t    return _this6;\n\t  }\n\t\n\t  _createClass(ChantLineBreak, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      // reset the bounds before doing a layout\n\t      this.bounds = new _ExsurgeCore.Rect(0, 0, 0, 0);\n\t    }\n\t  }, {\n\t    key: \"clone\",\n\t    value: function clone() {\n\t      var lb = new ChantLineBreak();\n\t      lb.justify = this.justify;\n\t\n\t      return lb;\n\t    }\n\t  }]);\n\t\n\t  return ChantLineBreak;\n\t}(_ExsurgeDrawing.ChantNotationElement);\n\t\n\t// a chant mapping is a lightweight format independent way of\n\t// tracking how a chant language (e.g., gabc) has been\n\t// mapped to exsurge notations.\n\t\n\t\n\tvar ChantMapping =\n\t// source can be any object type. in the case of gabc, source is a text\n\t// string that maps to a gabc word (e.g.: \"no(g)bis(fg)\").\n\t// notations is an array of ChantNotationElements\n\texports.ChantMapping = function ChantMapping(source, notations, sourceIndex) {\n\t  _classCallCheck(this, ChantMapping);\n\t\n\t  this.source = source;\n\t  this.notations = notations;\n\t  this.sourceIndex = sourceIndex;\n\t};\n\t\n\tvar __connectorSpan = new _ExsurgeDrawing.TextSpan(\" • \"),\n\t    __mergeAnnotationWithTextLeft = function __mergeAnnotationWithTextLeft() {\n\t  for (var _len = arguments.length, annotationSpans = Array(_len), _key = 0; _key < _len; _key++) {\n\t    annotationSpans[_key] = arguments[_key];\n\t  }\n\t\n\t  return annotationSpans.reduce(function (result, spans) {\n\t    if (result && result.length) {\n\t      if (spans && spans.length) return result.concat(__connectorSpan, spans);else return result;\n\t    } else if (spans && spans.length) {\n\t      return spans;\n\t    }\n\t    return [];\n\t  });\n\t};\n\t\n\t/*\n\t * Score, document\n\t */\n\t\n\tvar ChantScore = exports.ChantScore = function () {\n\t  // mappings is an array of ChantMappings.\n\t  function ChantScore(ctxt) {\n\t    var mappings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\t    var useDropCap = arguments[2];\n\t\n\t    _classCallCheck(this, ChantScore);\n\t\n\t    this.mappings = mappings;\n\t\n\t    this.lines = [];\n\t    this.notes = [];\n\t    if (ctxt) this.titles = new _ExsurgeTitles.Titles(ctxt, this);\n\t\n\t    this.startingClef = null;\n\t\n\t    this.useDropCap = useDropCap;\n\t    this.dropCap = null;\n\t\n\t    this.annotation = null;\n\t\n\t    this.compiled = false;\n\t\n\t    this.autoColoring = true;\n\t    this.needsLayout = true;\n\t\n\t    // valid after chant lines are created...\n\t    this.bounds = new _ExsurgeCore.Rect();\n\t\n\t    this.mergeAnnotationWithTextLeft = __mergeAnnotationWithTextLeft;\n\t\n\t    if (ctxt) this.updateNotations(ctxt);\n\t  }\n\t\n\t  /**\n\t   * Make a copy of the score, only including the specified lines\n\t   * @param  {number} startLine starting index\n\t   * @param  {number} endLine   ending index\n\t   * @return {ChantScore}           the partial score\n\t   */\n\t\n\t\n\t  _createClass(ChantScore, [{\n\t    key: \"copyLines\",\n\t    value: function copyLines(startLine, endLine) {\n\t      var result = new ChantScore();\n\t      result.lines = this.lines.slice(startLine, endLine);\n\t      result.bounds = this.bounds.clone();\n\t      var lastLine = result.lines.slice(-1)[0];\n\t      result.bounds.height = lastLine.bounds.bottom() - lastLine.origin.y;\n\t      if (startLine === 0) {\n\t        result.titles = this.titles;\n\t        result.dropCap = this.dropCap;\n\t        result.annotation = this.annotation;\n\t      }\n\t      return result;\n\t    }\n\t  }, {\n\t    key: \"updateSelection\",\n\t    value: function updateSelection(selection) {\n\t      this.selection = selection;\n\t      var elementSelection = selection && selection.element || {\n\t        indices: []\n\t      };\n\t      var selectedIndices = elementSelection.indices;\n\t      var insertion = elementSelection.insertion;\n\t      if (!insertion && selectedIndices.length === 1 && this.notes[selectedIndices[0]] instanceof TextOnly) {\n\t        // if there is only one selection, and its a text only, it should display as an insertion cursor:\n\t        insertion = { afterElementIndex: selectedIndices[0] };\n\t      }\n\t      // update the selected elements so that they can be given a .selected class when rendered\n\t      for (var i = 0; i < this.notes.length; ++i) {\n\t        var element = this.notes[i];\n\t        element.selected = selectedIndices.includes(i);\n\t      }\n\t      (this.startingClef.model || this.startingClef).selected = selectedIndices.includes(-1);\n\t      for (var _i = 0; _i < this.lines.length; ++_i) {\n\t        this.lines[_i].insertionCursor = null;\n\t      }\n\t      // update the insertion cursor, so it can be drawn on the correct system\n\t      this.insertionElement = null;\n\t      var insertionLine = null;\n\t      if (insertion) {\n\t        if (typeof insertion.chantLine === \"number\") {\n\t          insertionLine = this.lines[insertion.chantLine];\n\t          this.insertionElement = insertionLine.startingClef;\n\t          insertionLine.insertionCursor = new _ExsurgeChantSigns.InsertionCursor();\n\t        } else if (typeof insertion.afterElementIndex === \"number\") {\n\t          this.insertionElement = this.notes[insertion.afterElementIndex];\n\t          if (!this.insertionElement) {\n\t            insertionLine = this.lines[0];\n\t            this.insertionElement = insertionLine.startingClef;\n\t          } else if (this.insertionElement.neume) {\n\t            this.insertionElement = this.insertionElement.neume;\n\t          }\n\t          if (!insertionLine) {\n\t            insertionLine = this.insertionElement.line || this.lines[this.lines.length - 1];\n\t          }\n\t          insertionLine.insertionCursor = new _ExsurgeChantSigns.InsertionCursor();\n\t        }\n\t      }\n\t    }\n\t  }, {\n\t    key: \"updateNotations\",\n\t    value: function updateNotations(ctxt) {\n\t      var i, j, mapping, notation;\n\t\n\t      // flatten all mappings into one array for N(0) access to notations\n\t      this.notations = [];\n\t      this.notes = [];\n\t      this.hasLyrics = false;\n\t      this.hasAboveLinesText = false;\n\t      this.hasTranslations = false;\n\t      var elementSelection = this.selection && this.selection.element || {\n\t        indices: []\n\t      };\n\t      var selectedIndices = elementSelection.indices;\n\t      var nonNoteElementCount = 0;\n\t\n\t      // find the starting clef...\n\t      // start with a default clef in case the notations don't provide one.\n\t      this.startingClef = null;\n\t\n\t      for (i = 0; i < this.mappings.length; i++) {\n\t        mapping = this.mappings[i];\n\t        for (j = 0; j < mapping.notations.length; j++) {\n\t          notation = mapping.notations[j];\n\t          notation.score = this;\n\t          notation.mapping = mapping;\n\t\n\t          if (!this.startingClef) {\n\t            if (notation.isNeume) {\n\t              this.startingClef = Clef.default();\n\t            } else if (notation.isClef) {\n\t              this.startingClef = notation;\n\t              continue;\n\t            }\n\t          }\n\t\n\t          notation.notationIndex = this.notations.push(notation) - 1;\n\t          if (!this.hasLyrics && notation.hasLyrics()) this.hasLyrics = true;\n\t          if (!this.hasAboveLinesText && notation.alText) this.hasAboveLinesText = true;\n\t          if (!this.hasTranslations && notation.translationText) this.hasTranslations = true;\n\t\n\t          // Update this.notes and find element indices:\n\t          var elements = notation.notes || [notation];\n\t          var _iteratorNormalCompletion = true;\n\t          var _didIteratorError = false;\n\t          var _iteratorError = undefined;\n\t\n\t          try {\n\t            for (var _iterator = elements[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t              var element = _step.value;\n\t\n\t              var elementIndex = element.elementIndex = this.notes.push(element) - 1;\n\t              if (element instanceof Note) {\n\t                element.noteIndex = elementIndex - nonNoteElementCount;\n\t              } else {\n\t                ++nonNoteElementCount;\n\t              }\n\t\n\t              element.selected = selectedIndices.includes(elementIndex);\n\t            }\n\t          } catch (err) {\n\t            _didIteratorError = true;\n\t            _iteratorError = err;\n\t          } finally {\n\t            try {\n\t              if (!_iteratorNormalCompletion && _iterator.return) {\n\t                _iterator.return();\n\t              }\n\t            } finally {\n\t              if (_didIteratorError) {\n\t                throw _iteratorError;\n\t              }\n\t            }\n\t          }\n\t        }\n\t      }\n\t\n\t      // if we've reached this far and we *still* don't have a clef, then there aren't even\n\t      // any neumes in the score. still, set the default clef just for good measure\n\t      if (!this.startingClef) this.startingClef = Clef.default();\n\t      this.startingClef.elementIndex = -1;\n\t\n\t      // update drop cap\n\t      if (this.useDropCap) this.recreateDropCap(ctxt);else this.dropCap = null;\n\t\n\t      this.needsLayout = true;\n\t    }\n\t  }, {\n\t    key: \"recreateDropCap\",\n\t    value: function recreateDropCap(ctxt) {\n\t      this.dropCap = null;\n\t\n\t      // find the first notation with lyrics to use\n\t      for (var i = 0; i < this.notations.length; i++) {\n\t        if (this.notations[i].hasLyrics() && this.notations[i].lyrics[0] !== null && this.notations[i].lyrics[0].spans && this.notations[i].lyrics[0].spans.length) {\n\t          var notation = this.notations[i],\n\t              lyrics = notation.lyrics[0];\n\t          if (this.useDropCap) {\n\t            this.dropCap = lyrics.generateDropCap(ctxt);\n\t          } else {\n\t            lyrics.dropCap = null;\n\t            lyrics.generateSpansFromText(ctxt, lyrics.originalText);\n\t          }\n\t          notation.needsLayout = true;\n\t          return;\n\t        }\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Shared layout initialization method for performLayout() and performLayoutAsync()\n\t     * @param  {ChantContext} ctxt\n\t     */\n\t\n\t  }, {\n\t    key: \"initializeLayout\",\n\t    value: function initializeLayout(ctxt) {\n\t      // setup the context\n\t      ctxt.activeClef = this.startingClef;\n\t      ctxt.notations = this.notations;\n\t      ctxt.currNotationIndex = 0;\n\t\n\t      if (this.dropCap) this.dropCap.recalculateMetrics(ctxt);\n\t\n\t      if (this.annotation) this.annotation.recalculateMetrics(ctxt);\n\t    }\n\t\n\t    // this is the the synchronous version of performLayout that\n\t    // process everything without yielding to any other workers/threads.\n\t    // good for server side processing or very small chant pieces.\n\t\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt, force) {\n\t      if (!force && this.needsLayout === false) return; // nothing to do here!\n\t\n\t      ctxt.updateHyphenWidth();\n\t\n\t      this.initializeLayout(ctxt);\n\t\n\t      for (var i = 0; i < this.notations.length; i++) {\n\t        var notation = this.notations[i];\n\t        if (force || notation.needsLayout) {\n\t          ctxt.currNotationIndex = i;\n\t          notation.performLayout(ctxt);\n\t        }\n\t      }\n\t\n\t      this.needsLayout = false;\n\t    }\n\t\n\t    // for web applications, probably performLayoutAsync would be more\n\t    // apppropriate that the above performLayout, since it will process\n\t    // the notations without locking up the UI thread.\n\t\n\t  }, {\n\t    key: \"performLayoutAsync\",\n\t    value: function performLayoutAsync(ctxt, finishedCallback) {\n\t      var _this7 = this;\n\t\n\t      if (this.needsLayout === false) {\n\t        if (finishedCallback) setTimeout(function () {\n\t          return finishedCallback();\n\t        }, 0);\n\t\n\t        return; // nothing to do here!\n\t      }\n\t\n\t      if (ctxt.onFontLoaded) {\n\t        ctxt.onFontLoaded.push(function () {\n\t          return _this7.performLayoutAsync(ctxt, finishedCallback);\n\t        });\n\t        return;\n\t      }\n\t\n\t      // check for sane value of hyphen width:\n\t      ctxt.updateHyphenWidth();\n\t      if (!ctxt.hyphenWidth || ctxt.hyphenWidth / ctxt.textStyles.lyric.size > 0.6) {\n\t        setTimeout(function () {\n\t          _this7.performLayoutAsync(ctxt, finishedCallback);\n\t        }, 100);\n\t        return;\n\t      }\n\t\n\t      this.initializeLayout(ctxt);\n\t\n\t      setTimeout(function () {\n\t        return _this7.layoutElementsAsync(ctxt, 0, finishedCallback);\n\t      }, 0);\n\t    }\n\t  }, {\n\t    key: \"layoutElementsAsync\",\n\t    value: function layoutElementsAsync(ctxt, index, finishedCallback) {\n\t      var _this8 = this;\n\t\n\t      if (index >= this.notations.length) {\n\t        this.needsLayout = false;\n\t\n\t        if (finishedCallback) setTimeout(function () {\n\t          return finishedCallback();\n\t        }, 0);\n\t\n\t        return;\n\t      }\n\t\n\t      if (index === 0) ctxt.activeClef = this.startingClef;\n\t\n\t      var timeout = new Date().getTime() + 50; // process for fifty milliseconds\n\t      do {\n\t        var notation = this.notations[index];\n\t        if (notation.needsLayout) {\n\t          ctxt.currNotationIndex = index;\n\t          notation.performLayout(ctxt);\n\t        }\n\t\n\t        index++;\n\t      } while (index < this.notations.length && new Date().getTime() < timeout);\n\t\n\t      // schedule the next block of processing\n\t      setTimeout(function () {\n\t        return _this8.layoutElementsAsync(ctxt, index, finishedCallback);\n\t      }, 0);\n\t    }\n\t  }, {\n\t    key: \"layoutChantLines\",\n\t    value: function layoutChantLines(ctxt, width, finishedCallback) {\n\t      this.lines = [];\n\t\n\t      if (this.mergeAnnotationWithTextLeft && this.annotation && !this.dropCap) {\n\t        var annotation = this.annotation,\n\t            annotationSpans = annotation.annotations ? annotation.annotations.map(function (annotation) {\n\t          return annotation.spans;\n\t        }) : [annotation.spans];\n\t        this.overrideTextLeft = new _ExsurgeDrawing.TextLeftRight(ctxt, \"\", \"textLeft\");\n\t        if (ctxt.mapAnnotationSpansToTextLeft) {\n\t          annotationSpans = annotationSpans.map(ctxt.mapAnnotationSpansToTextLeft);\n\t        }\n\t        this.overrideTextLeft.spans = this.mergeAnnotationWithTextLeft.apply(this, _toConsumableArray(annotationSpans).concat([this.titles.textLeft && this.titles.textLeft.spans]));\n\t      } else {\n\t        this.overrideTextLeft = null;\n\t      }\n\t\n\t      var y = width > 0 ? this.titles.layoutTitles(ctxt, width) : 0;\n\t      var currIndex = 0;\n\t\n\t      ctxt.activeClef = this.startingClef;\n\t\n\t      var spaceBetweenSystems = ctxt.staffInterval * ctxt.spaceBetweenSystems;\n\t\n\t      do {\n\t        var line = new _ExsurgeChantChantLine.ChantLine(this);\n\t\n\t        line.buildFromChantNotationIndex(ctxt, currIndex, width);\n\t        currIndex = line.notationsStartIndex + line.numNotationsOnLine;\n\t        line.performLayout(ctxt);\n\t        line.elementIndex = this.lines.length;\n\t        this.lines.push(line);\n\t\n\t        line.bounds.y = -line.bounds.y + y;\n\t        y += line.bounds.height + spaceBetweenSystems;\n\t      } while (currIndex < this.notations.length);\n\t\n\t      var lastLine = this.lines[this.lines.length - 1];\n\t\n\t      this.bounds.x = 0;\n\t      this.bounds.y = 0;\n\t      this.bounds.width = lastLine.bounds.width;\n\t      this.bounds.height = y - spaceBetweenSystems;\n\t\n\t      this.pages = [this];\n\t\n\t      if (this.selection) {\n\t        this.updateSelection(this.selection);\n\t      }\n\t\n\t      if (finishedCallback) finishedCallback(this);\n\t    }\n\t  }, {\n\t    key: \"paginate\",\n\t    value: function paginate(height) {\n\t      if (!height) return;\n\t      this.pages = [];\n\t      var pageHeightOffset = 0,\n\t          startLineIndex = 0;\n\t      for (var i = 1; i < this.lines.length; ++i) {\n\t        var line = this.lines[i];\n\t        var pageHeight = line.bounds.bottom() - pageHeightOffset - line.origin.y;\n\t\n\t        if (pageHeight > height) {\n\t          // this line will be the first on the new page\n\t          this.pages.push(this.copyLines(startLineIndex, i));\n\t          startLineIndex = i;\n\t          pageHeightOffset = line.bounds.y - line.origin.y;\n\t          line.bounds.y = line.origin.y;\n\t        } else {\n\t          // not a new page yet...update the bounds:\n\t          line.bounds.y -= pageHeightOffset;\n\t        }\n\t      }\n\t      this.pages.push(this.copyLines(startLineIndex, this.lines.length));\n\t    }\n\t  }, {\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      var scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\t\n\t      ctxt.setCanvasSize(this.bounds.width, this.bounds.height, scale);\n\t\n\t      var canvasCtxt = ctxt.canvasCtxt;\n\t\n\t      canvasCtxt.clearRect(0, 0, ctxt.canvas.width, ctxt.canvas.height);\n\t\n\t      canvasCtxt.translate(this.bounds.x, this.bounds.y);\n\t\n\t      if (this.titles) this.titles.draw(ctxt);\n\t\n\t      for (var i = 0; i < this.lines.length; i++) {\n\t        this.lines[i].draw(ctxt);\n\t      }canvasCtxt.translate(-this.bounds.x, -this.bounds.y);\n\t    }\n\t  }, {\n\t    key: \"getSvgProps\",\n\t    value: function getSvgProps(ctxt, zoom) {\n\t      var width = typeof zoom === \"number\" ? zoom * this.bounds.width : zoom ? undefined : this.bounds.width,\n\t          height = zoom ? undefined : this.bounds.height;\n\t\n\t      return {\n\t        xmlns: \"http://www.w3.org/2000/svg\",\n\t        version: \"1.1\",\n\t        class: \"Exsurge ChantScore\" + (ctxt.editable ? \" EditableChantScore\" : \"\"),\n\t        width: width,\n\t        height: height,\n\t        viewBox: [0, 0, this.bounds.width, this.bounds.height].join(\" \")\n\t      };\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      // create defs section\n\t      var node = [ctxt.defsNode.cloneNode(true)];\n\t      node[0].appendChild(ctxt.createStyleNode());\n\t\n\t      if (this.titles) node.push(this.titles.createSvgNode(ctxt));\n\t\n\t      for (var i = 0; i < this.lines.length; i++) {\n\t        node.push(this.lines[i].createSvgNode(ctxt));\n\t      }node = _ExsurgeDrawing.QuickSvg.createNode(\"g\", {}, node);\n\t\n\t      node = _ExsurgeDrawing.QuickSvg.createNode(\"svg\", this.getSvgProps(ctxt), node);\n\t\n\t      node.source = this;\n\t      this.svg = node;\n\t\n\t      return node;\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt, zoom) {\n\t      // create defs section\n\t      var node = [_ExsurgeDrawing.QuickSvg.createSvgTree.apply(_ExsurgeDrawing.QuickSvg, [\"defs\", {}].concat(_toConsumableArray(ctxt.makeDefs.map(function (makeDef) {\n\t        return makeDef.makeSvgTree();\n\t      })), [ctxt.createStyleTree()]))];\n\t\n\t      if (this.titles) node.push(this.titles.createSvgTree(ctxt));\n\t\n\t      for (var i = 0; i < this.lines.length; i++) {\n\t        node.push(this.lines[i].createSvgTree(ctxt));\n\t      }node = _ExsurgeDrawing.QuickSvg.createSvgTree.apply(_ExsurgeDrawing.QuickSvg, [\"g\", {}].concat(_toConsumableArray(node)));\n\t      var svgProps = this.getSvgProps(ctxt, zoom);\n\t      svgProps.source = this;\n\t      node = _ExsurgeDrawing.QuickSvg.createSvgTree(\"svg\", svgProps, node);\n\t\n\t      return node;\n\t    }\n\t  }, {\n\t    key: \"createSvg\",\n\t    value: function createSvg(ctxt) {\n\t      var fragment = \"\";\n\t\n\t      // create defs section\n\t      for (var def in ctxt.defs) {\n\t        if (ctxt.defs.hasOwnProperty(def)) fragment += ctxt.defs[def];\n\t      }fragment += ctxt.createStyle();\n\t\n\t      fragment = _ExsurgeDrawing.QuickSvg.createFragment(\"defs\", {}, fragment);\n\t\n\t      if (this.titles) fragment += this.titles.createSvgFragment(ctxt);\n\t\n\t      for (var i = 0; i < this.lines.length; i++) {\n\t        fragment += this.lines[i].createSvgFragment(ctxt);\n\t      }fragment = _ExsurgeDrawing.QuickSvg.createFragment(\"g\", {}, fragment);\n\t\n\t      fragment = _ExsurgeDrawing.QuickSvg.createFragment(\"svg\", this.getSvgProps(ctxt), fragment);\n\t\n\t      return fragment;\n\t    }\n\t  }, {\n\t    key: \"createSvgNodeForEachLine\",\n\t    value: function createSvgNodeForEachLine(ctxt) {\n\t      var node = [];\n\t\n\t      var top = 0;\n\t      for (var i = 0; i < this.lines.length; i++) {\n\t        var lineFragment = [ctxt.defsNode.cloneNode(true), this.lines[i].createSvgNode(ctxt, top)];\n\t        lineFragment[0].appendChild(ctxt.createStyleNode());\n\t        var height = this.lines[i].bounds.height + ctxt.staffInterval * 1.5;\n\t        lineFragment = _ExsurgeDrawing.QuickSvg.createNode(\"g\", {}, lineFragment);\n\t        lineFragment = _ExsurgeDrawing.QuickSvg.createNode(\"svg\", {\n\t          xmlns: \"http://www.w3.org/2000/svg\",\n\t          version: \"1.1\",\n\t          class: \"Exsurge ChantScore\",\n\t          width: this.bounds.width,\n\t          height: height,\n\t          viewBox: [0, 0, this.bounds.width, height].join(\" \")\n\t        }, lineFragment);\n\t        node.push(lineFragment);\n\t        top += height;\n\t      }\n\t      return node;\n\t    }\n\t  }, {\n\t    key: \"createSvgForEachLine\",\n\t    value: function createSvgForEachLine(ctxt) {\n\t      var fragment = \"\",\n\t          fragmentDefs = \"\";\n\t\n\t      // create defs section\n\t      for (var def in ctxt.defs) {\n\t        if (ctxt.defs.hasOwnProperty(def)) fragmentDefs += ctxt.defs[def];\n\t      }fragmentDefs += ctxt.createStyle();\n\t\n\t      fragmentDefs = _ExsurgeDrawing.QuickSvg.createFragment(\"defs\", {}, fragmentDefs);\n\t      var top = 0;\n\t      for (var i = 0; i < this.lines.length; i++) {\n\t        var lineFragment = fragmentDefs + this.lines[i].createSvgFragment(ctxt, top);\n\t        var height = this.lines[i].bounds.height + ctxt.staffInterval * 1.5;\n\t        lineFragment = _ExsurgeDrawing.QuickSvg.createFragment(\"g\", {}, lineFragment);\n\t        lineFragment = _ExsurgeDrawing.QuickSvg.createFragment(\"svg\", {\n\t          xmlns: \"http://www.w3.org/2000/svg\",\n\t          version: \"1.1\",\n\t          \"xmlns:xlink\": \"http://www.w3.org/1999/xlink\",\n\t          class: \"Exsurge ChantScore\",\n\t          width: this.bounds.width,\n\t          height: height\n\t        }, lineFragment);\n\t        fragment += lineFragment;\n\t        top += height;\n\t      }\n\t      return fragment;\n\t    }\n\t  }, {\n\t    key: \"unserializeFromJson\",\n\t    value: function unserializeFromJson(data, ctxt) {\n\t      this.autoColoring = data[\"auto-coloring\"];\n\t\n\t      if (data.annotation !== null && data.annotation !== \"\") {\n\t        // create the annotation\n\t        this.annotation = new _ExsurgeDrawing.Annotation(ctxt, data.annotation);\n\t      } else this.annotation = null;\n\t\n\t      var createDropCap = data[\"drop-cap\"] === \"auto\" ? true : false;\n\t\n\t      _ExsurgeGabc.Gabc.parseChantNotations(data.notations, this, createDropCap);\n\t    }\n\t  }, {\n\t    key: \"serializeToJson\",\n\t    value: function serializeToJson() {\n\t      var data = {};\n\t\n\t      data[\"type\"] = \"score\";\n\t      data[\"auto-coloring\"] = true;\n\t\n\t      if (this.annotation !== null) data.annotation = this.annotation.unsanitizedText;else data.annotation = \"\";\n\t\n\t      return data;\n\t    }\n\t  }]);\n\t\n\t  return ChantScore;\n\t}();\n\t\n\tvar ChantDocument = exports.ChantDocument = function () {\n\t  function ChantDocument() {\n\t    _classCallCheck(this, ChantDocument);\n\t\n\t    var defaults = {\n\t      layout: {\n\t        units: \"mm\",\n\t        \"default-font\": {\n\t          \"font-family\": \"Crimson\",\n\t          \"font-size\": 14\n\t        },\n\t        page: {\n\t          width: 8.5,\n\t          height: 11,\n\t          \"margin-left\": 0,\n\t          \"margin-top\": 0,\n\t          \"margin-right\": 0,\n\t          \"margin-bottom\": 0\n\t        }\n\t      },\n\t      scores: []\n\t    };\n\t\n\t    // default layout\n\t    this.copyLayout(this, defaults);\n\t\n\t    this.scores = defaults.scores;\n\t  }\n\t\n\t  _createClass(ChantDocument, [{\n\t    key: \"copyLayout\",\n\t    value: function copyLayout(to, from) {\n\t      to.layout = {\n\t        units: from.layout.units,\n\t        \"default-font\": {\n\t          \"font-family\": from.layout[\"default-font\"][\"font-family\"],\n\t          \"font-size\": from.layout[\"default-font\"][\"font-size\"]\n\t        },\n\t        page: {\n\t          width: from.layout.page.width,\n\t          height: from.layout.page.height,\n\t          \"margin-left\": from.layout.page[\"margin-left\"],\n\t          \"margin-top\": from.layout.page[\"margin-top\"],\n\t          \"margin-right\": from.layout.page[\"margin-right\"],\n\t          \"margin-bottom\": from.layout.page[\"margin-bottom\"]\n\t        }\n\t      };\n\t    }\n\t  }, {\n\t    key: \"unserializeFromJson\",\n\t    value: function unserializeFromJson(data) {\n\t      this.copyLayout(this, data);\n\t\n\t      this.scores = [];\n\t\n\t      // read in the scores\n\t      for (var i = 0; i < data.scores.length; i++) {\n\t        var score = new ChantScore();\n\t\n\t        score.unserializeFromJson(data.scores[i]);\n\t        this.scores.push(score);\n\t      }\n\t    }\n\t  }, {\n\t    key: \"serializeToJson\",\n\t    value: function serializeToJson() {\n\t      var data = {};\n\t\n\t      this.copyLayout(data, this);\n\t\n\t      data.scores = [];\n\t\n\t      // save scores...\n\t      for (var i = 0; i < this.scores.length; i++) {\n\t        data.scores.push(this.scores[i].serializeToJson());\n\t      }return data;\n\t    }\n\t  }]);\n\n\t  return ChantDocument;\n\t}();\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.ChantLine = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _ExsurgeChant = __webpack_require__(5);\n\t\n\tvar _ExsurgeChantMarkings = __webpack_require__(7);\n\t\n\tvar _ExsurgeChantSigns = __webpack_require__(8);\n\t\n\tvar _ExsurgeCore = __webpack_require__(1);\n\t\n\tvar _ExsurgeDrawing = __webpack_require__(4);\n\t\n\tvar _ExsurgeGlyphs = __webpack_require__(3);\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } //\n\t// Author(s):\n\t// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n\t//\n\t// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a copy\n\t// of this software and associated documentation files (the \"Software\"), to deal\n\t// in the Software without restriction, including without limitation the rights\n\t// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t// copies of the Software, and to permit persons to whom the Software is\n\t// furnished to do so, subject to the following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included in\n\t// all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\t// THE SOFTWARE.\n\t//\n\t\n\t// a chant line represents one staff line on the page. ChantLines are created by the score\n\t// and laid out by the page\n\tvar ChantLine = exports.ChantLine = function (_ChantLayoutElement) {\n\t  _inherits(ChantLine, _ChantLayoutElement);\n\t\n\t  function ChantLine(score) {\n\t    _classCallCheck(this, ChantLine);\n\t\n\t    var _this = _possibleConstructorReturn(this, (ChantLine.__proto__ || Object.getPrototypeOf(ChantLine)).call(this));\n\t\n\t    _this.score = score;\n\t\n\t    _this.notationsStartIndex = 0;\n\t    _this.numNotationsOnLine = 0;\n\t    _this.notationBounds = null; // Rect\n\t\n\t    _this.staffLeft = 0;\n\t    _this.staffRight = 0;\n\t\n\t    _this.startingClef = null; // necessary for the layout process\n\t    _this.custos = null;\n\t\n\t    _this.justify = true;\n\t\n\t    // these are markings that exist at the chant line level rather than at the neume level.\n\t    _this.ledgerLines = [];\n\t    _this.braces = [];\n\t\n\t    _this.nextLine = null;\n\t    _this.previousLine = null; // for layout assistance\n\t\n\t    _this.lyricLineHeight = 0; // height of each text line\n\t    _this.lyricLineBaseline = 0; // offsets from the top of the text line to the baseline\n\t    _this.numLyricLines = 0; // maximum count of lyrics on the same syllable\n\t\n\t    // fixme: make these configurable values from the score\n\t    _this.spaceAfterNotations = 0; // the space between the notation bounds and the first text track\n\t    _this.spaceBetweenTextTracks = 0; // spacing between each text track\n\t\n\t    _this.lastLyrics = [];\n\t    return _this;\n\t  }\n\t\n\t  _createClass(ChantLine, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      // start off with a rectangle that holds at least the four staff lines\n\t      this.notationBounds = new _ExsurgeCore.Rect(this.staffLeft, -(ctxt.staffLineWeight / 2 + 3 + ctxt.minSpaceAboveStaff) * ctxt.staffInterval, this.staffRight - this.staffLeft, (ctxt.staffLineWeight + 6 + ctxt.minSpaceAboveStaff) * ctxt.staffInterval);\n\t\n\t      // run through all the elements of the line and calculate the bounds of the notations,\n\t      // as well as the bounds of each text track we will use\n\t      var i;\n\t      var notations = this.score.notations;\n\t      var lastNeumeIndex = this.extraTextOnlyIndex === null ? this.notationsStartIndex + this.numNotationsOnLine : this.extraTextOnlyIndex;\n\t      var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\t      var notation = null;\n\t\n\t      this.notationBounds.union(this.startingClef.bounds);\n\t\n\t      // reset the lyric line offsets before we [re]calculate them now\n\t      this.lyricLineHeight = ctxt.textStyles.lyric.size * 1.1;\n\t      this.lyricLineBaseline = 0;\n\t      this.numLyricLines = 0;\n\t\n\t      this.altLineHeight = 0;\n\t      this.altLineBaseline = 0;\n\t      this.numAltLines = 0;\n\t\n\t      this.translationLineHeight = ctxt.textStyles.translation.size * 1.1;\n\t      this.translationLineBaseline = 0;\n\t      this.numTranslationLines = 0;\n\t\n\t      for (i = this.notationsStartIndex; i < lastNeumeIndex; i++) {\n\t        notation = notations[i];\n\t\n\t        this.notationBounds.union(notation.bounds);\n\t\n\t        // keep track of lyric line offsets\n\t        if (notation.lyrics.length && notation.lyrics[0].text) {\n\t          // if (notation.lyrics[0].bounds.height > this.lyricLineHeight)\n\t          //   this.lyricLineHeight = notation.lyrics[0].bounds.height;\n\t          if (notation.lyrics[0].origin.y > this.lyricLineBaseline) this.lyricLineBaseline = notation.lyrics[0].origin.y;\n\t          if (notation.lyrics.length > this.numLyricLines) this.numLyricLines = notation.lyrics.length;\n\t        }\n\t\n\t        if (notation.alText && this.numAltLines < notation.alText.length) {\n\t          if (notation.alText[0].bounds.height > this.altLineHeight) this.altLineHeight = notation.alText[0].bounds.height;\n\t          if (notation.alText[0].origin.y > this.altLineBaseline) this.altLineBaseline = notation.alText[0].origin.y;\n\t          if (notation.alText.length > this.numAltLines) this.numAltLines = notation.alText.length;\n\t        }\n\t\n\t        if (notation.translationText && notation.translationText[0] && notation.translationText[0].text) {\n\t          // if (\n\t          //   notation.translationText[0].bounds.height > this.translationLineHeight\n\t          // )\n\t          //   this.translationLineHeight =\n\t          //     notation.translationText[0].bounds.height;\n\t          if (notation.translationText[0].origin.y > this.translationLineBaseline) this.translationLineBaseline = notation.translationText[0].origin.y;\n\t          if (notation.translationText.length > this.numTranslationLines) this.numTranslationLines = notation.translationText.length;\n\t        }\n\t      }\n\t\n\t      if (this.custos) this.notationBounds.union(this.custos.bounds);\n\t\n\t      // add any braces to the notationBounds as well\n\t      for (i = 0; i < this.braces.length; i++) {\n\t        this.notationBounds.union(this.braces[i].bounds);\n\t      } // finalize the lyrics placement\n\t      var notationBoundsOffset = this.notationBounds.bottom() + ctxt.minSpaceBelowStaff * ctxt.staffInterval;\n\t      this.lyricLineBaseline += notationBoundsOffset;\n\t      this.translationLineBaseline += notationBoundsOffset;\n\t      this.altLineBaseline += this.notationBounds.y - this.altLineHeight - ctxt.staffInterval * 0.5;\n\t\n\t      for (i = this.notationsStartIndex; i < lastNeumeIndex; i++) {\n\t        notation = notations[i];\n\t        var offset = 0;\n\t        for (var j = 0; j < notation.lyrics.length; j++) {\n\t          notation.lyrics[j].bounds.y = offset + this.lyricLineBaseline;\n\t          offset += this.lyricLineHeight;\n\t        }\n\t\n\t        if (notation.translationText) {\n\t          for (j = 0; j < notation.translationText.length; j++) {\n\t            notation.translationText[j].bounds.y = offset + this.translationLineBaseline;\n\t            offset += this.translationLineHeight;\n\t          }\n\t        }\n\t\n\t        if (notation.alText) {\n\t          offset = 0;\n\t          for (j = 0; j < notation.alText.length; j++) {\n\t            notation.alText[j].bounds.y = offset + this.altLineBaseline;\n\t            offset -= ctxt.textStyles.al.size * 1.1;\n\t          }\n\t        }\n\t      }\n\t\n\t      this.extraTextOnlyHeight = 0;\n\t      // handle placement of extra TextOnly elements:\n\t      if (ctxt.useExtraTextOnly) {\n\t        var extraTextOnlyLyricIndex = this.extraTextOnlyLyricIndex;\n\t        if (this.extraTextOnlyIndex === null) {\n\t          // even if extraTextOnlyIndex is null, there might be extra lines on the last lyric if it is TextOnly:\n\t          var lastNotation = notations[lastNeumeIndex - 1] || {};\n\t          if (lastNotation.constructor === _ExsurgeChant.ChantLineBreak) lastNotation = notations[lastNeumeIndex - 2];\n\t          if (lastNotation.constructor === _ExsurgeChant.TextOnly && lastNotation.lyrics.length === 1 && lastNotation.lyrics[0].bounds.height > this.lyricLineHeight) {\n\t            this.extraTextOnlyHeight = this.lyricLineHeight;\n\t          }\n\t        } else {\n\t          var lastLyrics = null;\n\t          var xOffset = 0;\n\t          offset = (this.numLyricLines - 1) * this.lyricLineHeight;\n\t          offset += this.numTranslationLines * this.translationLineHeight;\n\t          var extraLines = 0;\n\t          for (i = this.extraTextOnlyIndex; i < lastIndex; i++) {\n\t            notation = notations[i];\n\t            if (!notation.lyrics[extraTextOnlyLyricIndex]) continue;\n\t            lastLyrics = notation.lyrics[extraTextOnlyLyricIndex];\n\t            if (lastLyrics.lineWidth) {\n\t              xOffset = this.staffRight - lastLyrics.lineWidth;\n\t              offset += this.lyricLineHeight;\n\t              extraLines++;\n\t            }\n\t            extraLines += lastLyrics.numLines - 1;\n\t            lastLyrics.bounds.y = offset + this.lyricLineBaseline;\n\t            notation.bounds.x += xOffset;\n\t          }\n\t          this.extraTextOnlyHeight = this.lyricLineHeight * extraLines;\n\t        }\n\t      }\n\t\n\t      if (this.startingClef.hasLyrics()) {\n\t        offset = 0;\n\t        for (j = 0; j < this.startingClef.lyrics.length; j++) {\n\t          this.startingClef.lyrics[j].bounds.y = offset + this.lyricLineBaseline;\n\t          offset += this.lyricLineHeight;\n\t        }\n\t      }\n\t\n\t      // dropCap and the annotations\n\t      if (this.notationsStartIndex === 0) {\n\t        if (this.score.annotation !== null) {\n\t          // annotations use dominant-baseline to align text to the top\n\t          this.score.annotation.bounds.x = this.staffLeft / 2;\n\t          this.score.annotation.bounds.y = -ctxt.staffInterval * 3;\n\t          if (this.score.dropCap !== null) {\n\t            var lowestPossibleAnnotationY = this.lyricLineBaseline - this.score.annotation.bounds.height - ctxt.staffInterval * ctxt.textStyles.annotation.padding - this.score.dropCap.origin.y;\n\t            // if the annotation would overlap with the drop cap, move the annotation higher.\n\t            // otherwise, center the annotation in the vertical space between the top of the drop cap and the top of the staff.\n\t            if (lowestPossibleAnnotationY < this.score.annotation.bounds.y) {\n\t              this.score.annotation.bounds.y = lowestPossibleAnnotationY;\n\t            } else {\n\t              this.score.annotation.bounds.y = (this.score.annotation.bounds.y + lowestPossibleAnnotationY) / 2;\n\t            }\n\t            if (this.score.annotation.bounds.y < this.notationBounds.y) {\n\t              this.notationBounds.y = this.score.annotation.bounds.y;\n\t              this.notationBounds.height += this.notationBounds.y - this.score.annotation.bounds.y;\n\t            }\n\t          }\n\t          this.score.annotation.bounds.y += this.score.annotation.origin.y;\n\t        }\n\t\n\t        if (this.score.dropCap !== null) {\n\t          // drop caps and annotations are drawn from their center, so aligning them\n\t          // horizontally is as easy as this.staffLeft / 2\n\t          this.score.dropCap.bounds.x = this.staffLeft / 2;\n\t          this.score.dropCap.bounds.y = this.lyricLineBaseline - this.score.dropCap.origin.y;\n\t          this.notationBounds.union(this.score.dropCap.bounds);\n\t          this.score.dropCap.bounds.y = this.lyricLineBaseline;\n\t        }\n\t      }\n\t\n\t      if (this.numLyricLines > 0) {\n\t        // add up the lyric line heights to get the total height of the chant line\n\t        var lyricAndTextRect = new _ExsurgeCore.Rect(0, notationBoundsOffset, 0, this.lyricLineHeight * this.numLyricLines + this.extraTextOnlyHeight + this.translationLineHeight * this.numTranslationLines);\n\t        this.notationBounds.union(lyricAndTextRect);\n\t      }\n\t      if (this.numAltLines > 0) {\n\t        var altLineTextRect = new _ExsurgeCore.Rect(0, this.notationBounds.y - this.altLineHeight - 0.5 * ctxt.staffInterval - ctxt.textStyles.al.size * 1.1 * (this.numAltLines - 1), 0, ctxt.textStyles.al.size * 1.1 * this.numAltLines);\n\t        this.notationBounds.union(altLineTextRect);\n\t      }\n\t      // Ensure that there is at least minSpaceBelowStaff below the lowest staff line:\n\t      this.notationBounds.union(new _ExsurgeCore.Rect(0, 0, 0, (3 + ctxt.staffLineWeight / 2 + ctxt.minSpaceBelowStaff) * ctxt.staffInterval));\n\t      var totalHeight = this.notationBounds.height;\n\t\n\t      this.bounds.x = 0;\n\t      this.bounds.y = this.notationBounds.y;\n\t      this.bounds.width = this.notationBounds.right();\n\t      this.bounds.height = totalHeight;\n\t\n\t      // the origin of the chant line's coordinate space is at the center line of the left extremity of the staff\n\t      this.origin = new _ExsurgeCore.Point(this.staffLeft, -this.notationBounds.y);\n\t    }\n\t\n\t    // TODO: remove if not necsessary\n\t\n\t  }, {\n\t    key: \"layoutInsertionCursor\",\n\t    value: function layoutInsertionCursor(ctxt) {\n\t      if (this.insertionCursor) {\n\t        // we have either a Notation to draw the cursor after, or the ChantLine itself when the cursor is the first thing on the line\n\t        this.insertionCursor.performLayout(ctxt);\n\t        this.insertionCursor.bounds.x = this.score.insertionElement.bounds.right() + (this.score.insertionElement.trailingSpace && this.score.insertionElement.calculatedTrailingSpace || 0) / 2 - this.insertionCursor.origin.x;\n\t      }\n\t      return this.insertionCursor;\n\t    }\n\t  }, {\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      var canvasCtxt = ctxt.canvasCtxt;\n\t\n\t      canvasCtxt.translate(this.bounds.x, this.bounds.y);\n\t\n\t      // draw the staff lines\n\t      var i,\n\t          x1 = this.staffLeft,\n\t          x2 = this.staffRight,\n\t          y;\n\t      canvasCtxt.lineWidth = ctxt.staffLineWeight;\n\t      canvasCtxt.strokeStyle = ctxt.staffLineColor;\n\t\n\t      for (i = -3; i <= 3; i += 2) {\n\t        y = ctxt.staffInterval * i;\n\t\n\t        canvasCtxt.beginPath();\n\t        canvasCtxt.moveTo(x1, y);\n\t        canvasCtxt.lineTo(x2, y);\n\t        canvasCtxt.stroke();\n\t      }\n\t\n\t      if (this.layoutInsertionCursor(ctxt)) {\n\t        this.insertionCursor.draw(ctxt);\n\t      }\n\t\n\t      // draw the ledger lines\n\t      for (i = 0; i < this.ledgerLines.length; i++) {\n\t        var ledgerLine = this.ledgerLines[i];\n\t        y = ctxt.calculateHeightFromStaffPosition(ledgerLine.staffPosition);\n\t\n\t        canvasCtxt.beginPath();\n\t        canvasCtxt.moveTo(ledgerLine.x1, y);\n\t        canvasCtxt.lineTo(ledgerLine.x2, y);\n\t        canvasCtxt.stroke();\n\t      }\n\t\n\t      // fixme: draw the braces\n\t\n\t      // draw the dropCap and the annotations\n\t      if (this.notationsStartIndex === 0) {\n\t        if (this.score.dropCap !== null) this.score.dropCap.draw(ctxt);\n\t\n\t        if (this.score.annotation !== null && (!this.score.mergeAnnotationWithTextLeft || this.score.dropCap))\n\t          // only draw it if there is a dropCap or there is no mergeAnnotationWithTextLeft\n\t          this.score.annotation.draw(ctxt);\n\t      }\n\t\n\t      // draw the notations\n\t      var notations = this.score.notations;\n\t      var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\t\n\t      for (i = this.notationsStartIndex; i < lastIndex; i++) {\n\t        notations[i].draw(ctxt);\n\t      }this.startingClef.draw(ctxt);\n\t\n\t      if (this.custos) this.custos.draw(ctxt);\n\t\n\t      canvasCtxt.translate(-this.bounds.x, -this.bounds.y);\n\t    }\n\t  }, {\n\t    key: \"getInnerNodes\",\n\t    value: function getInnerNodes(ctxt) {\n\t      var top = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\t      var functionNames = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : { quickSvg: \"createNode\", elements: \"createSvgNode\" };\n\t\n\t      var inner = [];\n\t\n\t      // add the chant lines\n\t      var i,\n\t          x1 = this.staffLeft,\n\t          x2 = this.staffRight;\n\t\n\t      if (ctxt.editable) {\n\t        inner.push(_ExsurgeDrawing.QuickSvg[functionNames.quickSvg](\"rect\", {\n\t          key: \"insertion\",\n\t          x: x1,\n\t          y: ctxt.staffInterval * -3,\n\t          width: x2 - x1,\n\t          height: ctxt.staffInterval * 6,\n\t          fill: \"none\"\n\t        }));\n\t      }\n\t\n\t      // create the staff lines\n\t      for (i = -3; i <= 3; i += 2) {\n\t        inner.push(_ExsurgeDrawing.QuickSvg[functionNames.quickSvg](\"line\", {\n\t          key: i,\n\t          x1: x1,\n\t          y1: ctxt.staffInterval * i,\n\t          x2: x2,\n\t          y2: ctxt.staffInterval * i,\n\t          stroke: ctxt.staffLineColor,\n\t          \"stroke-width\": ctxt.staffLineWeight,\n\t          class: \"staffLine\"\n\t        }));\n\t      }\n\t\n\t      inner = [_ExsurgeDrawing.QuickSvg[functionNames.quickSvg](\"g\", { class: \"staffLines\" }, inner)];\n\t\n\t      if (this.layoutInsertionCursor(ctxt)) {\n\t        inner.push(this.insertionCursor[functionNames.elements](ctxt));\n\t      }\n\t\n\t      // create the ledger lines\n\t      for (i = 0; i < this.ledgerLines.length; i++) {\n\t        var ledgerLine = this.ledgerLines[i];\n\t        var y = ctxt.calculateHeightFromStaffPosition(ledgerLine.staffPosition);\n\t\n\t        inner.push(_ExsurgeDrawing.QuickSvg[functionNames.quickSvg](\"line\", {\n\t          x1: ledgerLine.x1,\n\t          y1: y,\n\t          x2: ledgerLine.x2,\n\t          y2: y,\n\t          stroke: ctxt.staffLineColor,\n\t          \"stroke-width\": ctxt.staffLineWeight,\n\t          class: \"ledgerLine\"\n\t        }));\n\t      }\n\t\n\t      // add any braces\n\t      for (i = 0; i < this.braces.length; i++) {\n\t        inner.push(this.braces[i][functionNames.elements](ctxt));\n\t      } // dropCap and the annotations\n\t      if (this.notationsStartIndex === 0) {\n\t        if (this.score.dropCap !== null) inner.push(this.score.dropCap[functionNames.elements](ctxt));\n\t\n\t        if (this.score.annotation !== null && (!this.score.mergeAnnotationWithTextLeft || this.score.dropCap))\n\t          // only draw it if there is a dropCap or there is no mergeAnnotationWithTextLeft\n\t          inner = inner.concat(this.score.annotation[functionNames.elements](ctxt));\n\t      }\n\t\n\t      inner.push(this.startingClef[functionNames.elements](ctxt));\n\t\n\t      var notations = this.score.notations;\n\t      var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\t\n\t      // add all of the notations\n\t      for (i = this.notationsStartIndex; i < lastIndex; i++) {\n\t        inner.push(notations[i][functionNames.elements](ctxt));\n\t      }if (this.custos) inner.push(this.custos[functionNames.elements](ctxt));\n\t      return inner;\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      var top = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\t\n\t      var inner = this.getInnerNodes(ctxt, top, {\n\t        quickSvg: \"createNode\",\n\t        elements: \"createSvgNode\"\n\t      });\n\t\n\t      return _ExsurgeDrawing.QuickSvg.createNode(\"g\", {\n\t        class: \"chantLine\",\n\t        transform: \"translate(\" + this.bounds.x + \",\" + (this.bounds.y - top) + \")\",\n\t        \"element-index\": this.elementIndex,\n\t        source: this\n\t      }, inner);\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      var top = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\t\n\t      var inner = this.getInnerNodes(ctxt, top, {\n\t        quickSvg: \"createSvgTree\",\n\t        elements: \"createSvgTree\"\n\t      });\n\t\n\t      return _ExsurgeDrawing.QuickSvg.createSvgTree.apply(_ExsurgeDrawing.QuickSvg, [\"g\", {\n\t        class: \"chantLine\",\n\t        transform: \"translate(\" + this.bounds.x + \",\" + (this.bounds.y - top) + \")\",\n\t        \"element-index\": this.elementIndex\n\t      }].concat(_toConsumableArray(inner)));\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      var top = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\t\n\t      var inner = \"\";\n\t\n\t      // add the chant lines\n\t      var i,\n\t          x1 = this.staffLeft,\n\t          x2 = this.staffRight;\n\t\n\t      // create the staff lines\n\t      for (i = -3; i <= 3; i += 2) {\n\t        inner += _ExsurgeDrawing.QuickSvg.createFragment(\"line\", {\n\t          x1: x1,\n\t          y1: ctxt.staffInterval * i,\n\t          x2: x2,\n\t          y2: ctxt.staffInterval * i,\n\t          stroke: ctxt.staffLineColor,\n\t          \"stroke-width\": ctxt.staffLineWeight,\n\t          class: \"staffLine\"\n\t        });\n\t      }\n\t\n\t      inner = _ExsurgeDrawing.QuickSvg.createFragment(\"g\", { class: \"staffLines\" }, inner);\n\t\n\t      if (this.layoutInsertionCursor(ctxt)) {\n\t        inner += this.insertionCursor.createSvgFragment(ctxt);\n\t      }\n\t\n\t      // create the ledger lines\n\t      for (i = 0; i < this.ledgerLines.length; i++) {\n\t        var ledgerLine = this.ledgerLines[i];\n\t        var y = ctxt.calculateHeightFromStaffPosition(ledgerLine.staffPosition);\n\t\n\t        inner += _ExsurgeDrawing.QuickSvg.createFragment(\"line\", {\n\t          x1: ledgerLine.x1,\n\t          y1: y,\n\t          x2: ledgerLine.x2,\n\t          y2: y,\n\t          stroke: ctxt.staffLineColor,\n\t          \"stroke-width\": ctxt.staffLineWeight,\n\t          class: \"ledgerLine\"\n\t        });\n\t      }\n\t\n\t      // add any braces\n\t      for (i = 0; i < this.braces.length; i++) {\n\t        inner += this.braces[i].createSvgFragment(ctxt);\n\t      } // dropCap and the annotations\n\t      if (this.notationsStartIndex === 0) {\n\t        if (this.score.dropCap !== null) inner += this.score.dropCap.createSvgFragment(ctxt);\n\t\n\t        if (this.score.annotation !== null && (!this.score.mergeAnnotationWithTextLeft || this.score.dropCap))\n\t          // only draw it if there is a dropCap or there is no mergeAnnotationWithTextLeft\n\t          inner += this.score.annotation.createSvgFragment(ctxt);\n\t      }\n\t\n\t      inner += this.startingClef.createSvgFragment(ctxt);\n\t\n\t      var notations = this.score.notations;\n\t      var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\t\n\t      // add all of the notations\n\t      for (i = this.notationsStartIndex; i < lastIndex; i++) {\n\t        inner += notations[i].createSvgFragment(ctxt);\n\t      }if (this.custos) inner += this.custos.createSvgFragment(ctxt);\n\t\n\t      return _ExsurgeDrawing.QuickSvg.createFragment(\"g\", {\n\t        class: \"chantLine\",\n\t        transform: \"translate(\" + this.bounds.x + \",\" + (this.bounds.y - top) + \")\",\n\t        \"element-index\": this.elementIndex\n\t      }, inner);\n\t    }\n\t\n\t    // code below based on code by: https://gist.github.com/alexhornbake\n\t    //\n\t    // optimized for braces that are only drawn horizontally.\n\t    // returns svg path string ready to insert into svg doc\n\t\n\t  }, {\n\t    key: \"generateCurlyBraceDrawable\",\n\t    value: function generateCurlyBraceDrawable(ctxt, x1, x2, y, isAbove) {\n\t      var h;\n\t\n\t      if (isAbove) h = -ctxt.staffInterval / 2;else h = ctxt.staffInterval / 2;\n\t\n\t      // and q factor, .5 is normal, higher q = more expressive bracket\n\t      var q = 0.6;\n\t\n\t      var len = x2 - x1;\n\t\n\t      //Calculate Control Points of path,\n\t      var qx1 = x1;\n\t      var qy1 = y + q * h;\n\t      var qx2 = x1 + 0.25 * len;\n\t      var qy2 = y + (1 - q) * h;\n\t      var tx1 = x1 + 0.5 * len;\n\t      var ty1 = y + h;\n\t      var qx3 = x2;\n\t      var qy3 = y + q * h;\n\t      var qx4 = x1 + 0.75 * len;\n\t      var qy4 = y + (1 - q) * h;\n\t      var d = \"M \" + x1 + \" \" + y + \" Q \" + qx1 + \" \" + qy1 + \" \" + qx2 + \" \" + qy2 + \" T \" + tx1 + \" \" + ty1 + \" M \" + x2 + \" \" + y + \" Q \" + qx3 + \" \" + qy3 + \" \" + qx4 + \" \" + qy4 + \" T \" + tx1 + \" \" + ty1;\n\t\n\t      return _ExsurgeDrawing.QuickSvg.createFragment(\"path\", {\n\t        d: d,\n\t        stroke: ctxt.neumeLineColor,\n\t        \"stroke-width\": ctxt.neumeLineWeight + \"px\",\n\t        fill: \"none\"\n\t      });\n\t    }\n\t  }, {\n\t    key: \"buildFromChantNotationIndex\",\n\t    value: function buildFromChantNotationIndex(ctxt, newElementStart, width) {\n\t      // todo: reset / clear the children we have in case they have data\n\t      var notations = this.score.notations,\n\t          beginningLyrics = null,\n\t          prev = null,\n\t          prevNeume = null,\n\t          prevLyrics = [];\n\t      var condensableSpaces = [];\n\t      this.notationsStartIndex = newElementStart;\n\t      this.numNotationsOnLine = 0;\n\t\n\t      this.staffLeft = 0;\n\t      this.paddingLeft = 0;\n\t\n\t      this.extraTextOnlyIndex = null;\n\t      this.extraTextOnlyLyricIndex = 0;\n\t\n\t      if (width > 0) this.staffRight = width;else this.staffRight = Infinity; // no limit to staff size\n\t\n\t      // If this is the first chant line, then we have to make room for a\n\t      // drop cap and/or annotation, if present\n\t      if (this.notationsStartIndex === 0) {\n\t        var padding = 0;\n\t\n\t        if (this.score.dropCap !== null) padding = this.score.dropCap.bounds.width + this.score.dropCap.padding * 2;\n\t\n\t        if (this.score.annotation !== null && (!this.score.mergeAnnotationWithTextLeft || this.score.dropCap)) padding = Math.max(padding, this.score.annotation.bounds.width + this.score.annotation.padding * 2);\n\t\n\t        this.staffLeft += padding;\n\t        if (this.score.dropCap !== null) this.paddingLeft = (padding - this.score.dropCap.bounds.width) / 2;\n\t      } else {\n\t        prev = notations[newElementStart - 1];\n\t        if (prev.constructor === _ExsurgeChantSigns.DoubleBar && prev.hasLyrics() && (prev.lyrics.length > 1 || !prev.lyrics[0].text.match(/^(i\\.?)+j\\.?/))) {\n\t          beginningLyrics = prev.lyrics.map(function (lyric) {\n\t            var newLyric = new _ExsurgeDrawing.Lyric(ctxt, lyric.originalText, lyric.lyricType, lyric.notation, lyric.notations, lyric.sourceIndex);\n\t            newLyric.elidesToNext = lyric.elidesToNext;\n\t            // Hide the original lyric by setting its bounds.y to an extremely high number.\n\t            // If the chant is re-laid out, this value will be recalculated so that it won't stay hidden.\n\t            lyric.bounds.y = Number.MAX_SAFE_INTEGER;\n\t            return newLyric;\n\t          });\n\t          var minX = beginningLyrics.map(function (l) {\n\t            return l.bounds.x;\n\t          }).reduce(function (a, b) {\n\t            return a < b ? a : b;\n\t          });\n\t          beginningLyrics.forEach(function (l) {\n\t            l.bounds.x -= minX;\n\t          });\n\t        }\n\t      }\n\t\n\t      // set up the clef...\n\t      // if the first notation on the line is a starting clef, then we treat it a little differently...\n\t      // the clef becomes this line's starting clef and we skip over the clef in the notations array\n\t      if (notations.length && notations[newElementStart].isClef) {\n\t        ctxt.activeClef = notations[newElementStart];\n\t        newElementStart++;\n\t        this.notationsStartIndex++;\n\t      }\n\t\n\t      // make a copy for this line to use at the beginning\n\t      this.startingClef = ctxt.activeClef.clone();\n\t      this.startingClef.performLayout(ctxt);\n\t      this.startingClef.bounds.x = this.staffLeft;\n\t\n\t      var curr = this.startingClef;\n\t\n\t      if (beginningLyrics) {\n\t        _ExsurgeDrawing.LyricArray.setNotation(beginningLyrics, curr);\n\t      }\n\t\n\t      // estimate how much space we have available to us\n\t      var rightNotationBoundary = this.staffRight - _ExsurgeGlyphs.Glyphs.CustosLong.bounds.width * ctxt.glyphScaling; // possible custos on the line\n\t      var lastTranslationTextWithEndNeume = null;\n\t\n\t      // iterate through the notations, fittng what we can on this line\n\t      var i,\n\t          j,\n\t          lastNotationIndex = notations.length - 1;\n\t\n\t      if (curr.hasLyrics()) _ExsurgeDrawing.LyricArray.mergeIn(this.lastLyrics, curr.lyrics);\n\t\n\t      // if we already have a start brace on the context, we must be continuing it from the previous system.\n\t      if (ctxt.lastStartBrace && !ctxt.lastStartBrace.note) {\n\t        ctxt.lastStartBrace.note = this.startingClef;\n\t      }\n\t      var lastLyricsBeforeTextOnly;\n\t      var textOnlyStartIndex;\n\t\n\t      for (i = newElementStart; i <= lastNotationIndex; i++) {\n\t        prev = curr;\n\t        if (curr.constructor !== _ExsurgeChant.TextOnly) prevNeume = curr;\n\t\n\t        curr = notations[i];\n\t\n\t        var actualRightBoundary;\n\t        if (i === lastNotationIndex || curr.constructor === _ExsurgeChantSigns.Custos || prev.constructor === _ExsurgeChantSigns.Custos && curr.isDivider || curr.constructor === _ExsurgeChant.ChantLineBreak && prevNeume.constructor === _ExsurgeChantSigns.Custos) {\n\t          // on the last notation of the score, we don't need a custos or trailing space, so we use staffRight as the\n\t          // right boundary.\n\t          // Also, if the current notation is a divider and the previous was a custos, we don't need extra space\n\t          // because if the following notation won't fit, we can switch the order and use the custos as the end-of-the-line custos\n\t          // Ditto in the case of the current element being a chant line break and the previous neume a custos, because that custos will become our end-of-line custos\n\t          actualRightBoundary = this.staffRight;\n\t        } else if (i === lastNotationIndex - 1) {\n\t          // on the penultimate notation, make sure there is at least enough room for whichever takes up less space,\n\t          // between the final notation and a custos:\n\t          actualRightBoundary = Math.max(rightNotationBoundary, this.staffRight - notations[lastNotationIndex].bounds.width);\n\t        } else {\n\t          // Otherwise, we use rightNotationBoundary, which leaves room for a custos...\n\t          actualRightBoundary = rightNotationBoundary;\n\t        }\n\t\n\t        // First check if we're already beyond the rightNotationBoundary (due to condensing that hasn't yet happened) and have a good element to end with\n\t        // but if we have 2 or fewer elements, or if the current element is a line break or a custos, we'll go ahead and try for them anyway.\n\t        var forceBreak = !curr.isDivider && curr.constructor !== _ExsurgeChant.ChantLineBreak && curr.constructor !== _ExsurgeChantSigns.Custos && !(curr.constructor === _ExsurgeChant.TextOnly && curr.hasLyrics() && /^(?:[*†]|i+j\\.?)$/.test(curr.lyrics[0].text)) && lastNotationIndex - i > 1 && !prevNeume.keepWithNext && prevNeume.bounds.right() >= rightNotationBoundary;\n\t\n\t        // also force a break if we've run into extra TextOnly elements, but the current notation is not a TextOnly and has lyrics\n\t        forceBreak = forceBreak || this.extraTextOnlyIndex !== null && curr.constructor !== _ExsurgeChant.TextOnly && curr.constructor !== _ExsurgeChant.ChantLineBreak && curr.constructor !== _ExsurgeChantSigns.Custos && curr.hasLyrics();\n\t\n\t        if (curr instanceof _ExsurgeChant.TextOnly && prev === prevNeume) {\n\t          lastLyricsBeforeTextOnly = this.lastLyrics.slice();\n\t          textOnlyStartIndex = i;\n\t        }\n\t        if (curr instanceof _ExsurgeChant.TextOnly && notations[textOnlyStartIndex] && !notations[textOnlyStartIndex].hasLyrics()) {\n\t          // we want textOnlyStartIndex to be the first TextOnly that actually has lyrics,\n\t          // so if the current \"textOnlyStart\" element does not have lyrics, and we have another textOnly\n\t          // that does have lyrics, we will use it instead\n\t          textOnlyStartIndex = i;\n\t        }\n\t\n\t        if (curr.hasLyrics() && curr.lyrics[0].needsLayout) {\n\t          curr.lyrics[0].recalculateMetrics(ctxt);\n\t        }\n\t\n\t        // try to fit the curr element on this line.\n\t        // if it doesn't fit, we finish up here.\n\t        var fitsOnLine = !forceBreak && this.positionNotationElement(ctxt, this.lastLyrics, prevNeume, curr, actualRightBoundary, this.extraTextOnlyIndex ? [] : condensableSpaces // no spaces are condensable once we are on extra text only lyrics\n\t        );\n\t        var candidateForExtraTextOnlyLine = ctxt.useExtraTextOnly && curr.constructor === _ExsurgeChant.TextOnly && _ExsurgeDrawing.LyricArray.hasOnlyOneLyric(curr.lyrics) && (fitsOnLine === false || this.extraTextOnlyIndex !== null);\n\t        var extraTextOnlyLyricIndex;\n\t        if (candidateForExtraTextOnlyLine && this.extraTextOnlyIndex === null) {\n\t          // check to make sure there is enough text to put on the text only line:\n\t          extraTextOnlyLyricIndex = _ExsurgeDrawing.LyricArray.indexOfLyric(curr.lyrics);\n\t          if (textOnlyStartIndex === i) {\n\t            var currentLyric = notations[i].lyrics[extraTextOnlyLyricIndex].text;\n\t            if (currentLyric.length <= 1) {\n\t              var nextNotation = notations[i + 1];\n\t              candidateForExtraTextOnlyLine = nextNotation && nextNotation.constructor === _ExsurgeChant.TextOnly && nextNotation.lyrics[extraTextOnlyLyricIndex] && nextNotation.lyrics[extraTextOnlyLyricIndex].text.length > 0;\n\t            }\n\t          }\n\t        }\n\t        if (candidateForExtraTextOnlyLine) {\n\t          // a special case for TextOnly elements that don't fit on the line: since they don't have neumes associated with them, we can place this\n\t          // and any additional TextOnly elements just below the current lyric lines, but we can only do this if the TextOnly elements have only one\n\t          // line of lyrics associated with them.\n\t          var firstOnLine;\n\t          extraTextOnlyLyricIndex = this.extraTextOnlyLyricIndex;\n\t          if (this.extraTextOnlyIndex === null && notations[textOnlyStartIndex].lyrics.length) {\n\t            if (textOnlyStartIndex === this.notationsStartIndex || !ctxt.startExtraTextOnlyFromFirst) {\n\t              textOnlyStartIndex = i;\n\t              var lastNotationWithLyrics = notations.slice(this.notationsStartIndex, i).reverse().find(function (notation) {\n\t                return notation.hasLyrics();\n\t              });\n\t              lastLyricsBeforeTextOnly = lastNotationWithLyrics && lastNotationWithLyrics.lyrics.slice() || [];\n\t            }\n\t            // go back to the first in this string of consecutive TextOnly elements.\n\t            this.extraTextOnlyIndex = textOnlyStartIndex;\n\t            extraTextOnlyLyricIndex = this.extraTextOnlyLyricIndex = _ExsurgeDrawing.LyricArray.indexOfLyric(curr.lyrics);\n\t            this.lastLyricsBeforeTextOnly = lastLyricsBeforeTextOnly;\n\t            this.lastLyrics = [];\n\t            i = textOnlyStartIndex - 1;\n\t            this.numNotationsOnLine = textOnlyStartIndex - this.notationsStartIndex;\n\t            continue;\n\t          }\n\t          delete curr.lyrics[extraTextOnlyLyricIndex].lineWidth;\n\t          if (!fitsOnLine || i === this.extraTextOnlyIndex) {\n\t            curr.bounds.x = curr.lyrics[extraTextOnlyLyricIndex].origin.x;\n\t            var lastLyricRight = ctxt.startExtraTextOnlyFromFirst ? _ExsurgeDrawing.LyricArray.getRight(this.lastLyrics) + (ctxt.minLyricWordSpacing || 0) : 0;\n\t            curr.lyrics[extraTextOnlyLyricIndex].setMaxWidth(ctxt, this.staffRight, this.staffRight - lastLyricRight);\n\t            firstOnLine = curr;\n\t          }\n\t          if (firstOnLine) firstOnLine.lyrics[extraTextOnlyLyricIndex].lineWidth = curr.lyrics[extraTextOnlyLyricIndex].getRight();\n\t        } else if (fitsOnLine === false) {\n\t          var isTextOnlyBeforeDivider = function isTextOnlyBeforeDivider(i) {\n\t            var curr = notations[i];\n\t            if (curr.constructor !== _ExsurgeChant.TextOnly) return false;\n\t            var firstDivider = notations.slice(i + 1).findIndex(function (notation) {\n\t              return notation.isDivider;\n\t            });\n\t            if (firstDivider < 0) return false;\n\t            return notations.slice(i + 1, i + 1 + firstDivider).every(function (notation) {\n\t              return notation.constructor === _ExsurgeChant.TextOnly;\n\t            });\n\t          };\n\t          // first check for elements that cannot begin a system: dividers and custodes\n\t          while (this.numNotationsOnLine > 1 && (curr.isDivider || curr.constructor === _ExsurgeChantSigns.Custos || isTextOnlyBeforeDivider(i))) {\n\t            curr = notations[--i];\n\t            this.numNotationsOnLine--;\n\t            if (this.lastLyricsBeforeTextOnly && isTextOnlyBeforeDivider(i)) {\n\t              delete this.lastLyricsBeforeTextOnly;\n\t            }\n\t          }\n\t\n\t          if (lastTranslationTextWithEndNeume) {}\n\t          // console.info(notations[i - 1], lastTranslationTextWithEndNeume);\n\t          // TODO?: need to go back to before the last translation text start:\n\t\n\t\n\t          // check if the prev elements want to be kept with this one\n\t          for (j = i - 1; j > this.notationsStartIndex; j--) {\n\t            var cne = notations[j];\n\t            curr = notations[j + 1];\n\t\n\t            // curr is the first notation on the next line\n\t            // cne is the last notation on this line\n\t\n\t            if (cne.firstWithNoWidth) {\n\t              this.numNotationsOnLine--;\n\t              continue;\n\t            }\n\t\n\t            // don't let a line break occur in the middle of a translation\n\t            if (lastTranslationTextWithEndNeume) {\n\t              this.numNotationsOnLine--;\n\t              if (cne === lastTranslationTextWithEndNeume) {\n\t                lastTranslationTextWithEndNeume = null;\n\t              }\n\t              continue;\n\t            }\n\t\n\t            // force any notations starting with a quilisma or inclinatum (diamond) to be kept with the previous notation:\n\t            if (curr && curr.notes && (curr.notes[0].shape === _ExsurgeChant.NoteShape.Quilisma || curr.notes[0].shape === _ExsurgeChant.NoteShape.Inclinatum)) {\n\t              this.numNotationsOnLine--;\n\t              continue;\n\t            }\n\t\n\t            // if the line break is allowed (cne.allowLineBreakBeforeNext), keep this number of notations around so we can check during justification\n\t            // whether there would be too much space introduced between\n\t            if (cne.keepWithNext === true) {\n\t              if (cne.allowLineBreakBeforeNext && !this.maxNumNotationsOnLine) this.maxNumNotationsOnLine = this.numNotationsOnLine;\n\t              this.numNotationsOnLine--;\n\t            } else break;\n\t          }\n\t          if (this.extraTextOnlyIndex && this.notationsStartIndex + this.numNotationsOnLine <= this.extraTextOnlyIndex) {\n\t            // we've cut back to before the extra text only index, so we have to remove it:\n\t            this.extraTextOnlyIndex = null;\n\t          }\n\t\n\t          // if for some reason not a single notation can fit on the line, we'd better put it on anyway, to avoid an infinite loop:\n\t          if (this.numNotationsOnLine === 0) this.numNotationsOnLine = 1;\n\t\n\t          // determine the neumes we can space apart, if we do end up justifying\n\t          curr = this.findNeumesToJustify(prevLyrics);\n\t\n\t          this.lastLyrics = prevLyrics;\n\t          if (this.maxNumNotationsOnLine) {\n\t            // Check whether we should squeeze some extra notations on the line to avoid too much space after justification:\n\t            // Check how much space we would have without the extra notations\n\t            var extraSpace = this.getWhitespaceOnRight(ctxt);\n\t            if (extraSpace / this.toJustify.length > ctxt.staffInterval * ctxt.maxExtraSpaceInStaffIntervals) {\n\t              _ExsurgeDrawing.LyricArray.mergeInArray(prevLyrics, notations.slice(this.notationsStartIndex + this.numNotationsOnLine, this.notationsStartIndex + this.maxNumNotationsOnLine));\n\t              this.numNotationsOnLine = this.maxNumNotationsOnLine;\n\t              delete this.maxNumNotationsOnLine;\n\t            }\n\t          }\n\t\n\t          // if the next line begins with a fresh word, than there can be extra space between the last notation on this line and the custos:\n\t          var next = this.score.notations[this.extraTextOnlyIndex === null ? this.notationsStartIndex + this.numNotationsOnLine : this.extraTextOnlyIndex];\n\t          if (next && next.hasLyrics() && (next.lyrics[0].lyricType === _ExsurgeDrawing.LyricType.BeginningSyllable || next.lyrics[0].lyricType === _ExsurgeDrawing.LyricType.SingleSyllable)) {\n\t            this.toJustify.push(this.custos);\n\t          }\n\t\n\t          if (j >= 1 && notations[j].isDivider && notations[j - 1].constructor === _ExsurgeChantSigns.Custos) {\n\t            // reverse the order: put the divider first, and end the line with the custos.\n\t            prevLyrics = [];\n\t            for (i = j - 2; i >= this.notationsStartIndex; i--) {\n\t              if (notations[i].hasLyrics()) {\n\t                _ExsurgeDrawing.LyricArray.mergeIn(prevLyrics, notations[i].lyrics);\n\t                break;\n\t              }\n\t            }\n\t            // remove the custos and divider from the condensable spaces list, before adding the divider back, when repositioning it.\n\t            condensableSpaces.sum -= condensableSpaces.pop().condensable;\n\t            condensableSpaces.sum -= condensableSpaces.pop().condensable;\n\t            this.positionNotationElement(ctxt, prevLyrics, notations[j - 2], notations[j], this.staffRight, condensableSpaces);\n\t            this.custos = notations[j - 1];\n\t            this.custos.bounds.x = this.staffRight - this.custos.bounds.width - this.custos.leadingSpace;\n\t          }\n\t\n\t          // we are at the end of the line!\n\t          break;\n\t        }\n\t\n\t        if (curr.hasLyrics()) _ExsurgeDrawing.LyricArray.mergeIn(this.lastLyrics, curr.lyrics);\n\t\n\t        if (lastTranslationTextWithEndNeume && curr === lastTranslationTextWithEndNeume.translationText[0].endNeume) {\n\t          lastTranslationTextWithEndNeume = null;\n\t        } else if (curr.translationText && curr.translationText.length && curr.translationText[0].endNeume) {\n\t          lastTranslationTextWithEndNeume = curr;\n\t        }\n\t\n\t        curr.line = this;\n\t        this.numNotationsOnLine++;\n\t\n\t        if (curr.isClef) ctxt.activeClef = curr;\n\t\n\t        // line breaks are a special case indicating to stop processing here\n\t        if (curr.constructor === _ExsurgeChant.ChantLineBreak && width > 0) {\n\t          this.justify = curr.justify || this.extraTextOnlyIndex !== null || this.getWhitespaceOnRight(ctxt) < 0;\n\t          if (this.justify) this.findNeumesToJustify(prevLyrics);\n\t          break;\n\t        }\n\t\n\t        if (curr.constructor === _ExsurgeChantSigns.Custos) {\n\t          this.custos = curr;\n\t        } else if (curr.isNeume) {\n\t          this.custos = null;\n\t        }\n\t      }\n\t\n\t      var lastIndex = this.notationsStartIndex + this.numNotationsOnLine - 1;\n\t      var last = notations[lastIndex] || {};\n\t      while (lastIndex > 0 && (last.constructor === _ExsurgeChant.ChantLineBreak || last.constructor === _ExsurgeChantSigns.Custos || last.constructor === _ExsurgeChant.TextOnly)) {\n\t        last = notations[--lastIndex];\n\t      }\n\t      var isLastLine = this.notationsStartIndex + this.numNotationsOnLine === notations.length;\n\t      if (this.justify && this.extraTextOnlyIndex !== null || width > 0 && isLastLine) {\n\t        // this is the last chant line, or it has extra TextOnly elements at the end\n\t        if (!this.toJustify) this.findNeumesToJustify(prevLyrics);\n\t        this.justify = (!isLastLine || last.isDivider) && this.getWhitespaceOnRight(ctxt) / (this.toJustify.length || 1) <= ctxt.staffInterval * ctxt.maxExtraSpaceInStaffIntervals;\n\t      }\n\t\n\t      if (!this.custos) {\n\t        // create the automatic custos at the end of the line if there are neumes left in the notations\n\t        for (i = this.notationsStartIndex + this.numNotationsOnLine; i < notations.length; i++) {\n\t          var notation = notations[i];\n\t\n\t          if (notation.isNeume) {\n\t            this.custos = new _ExsurgeChantSigns.Custos(true);\n\t            ctxt.currNotationIndex = i - 1; // make sure the context knows where the custos is\n\t            this.custos.performLayout(ctxt);\n\t\n\t            if (this.justify) {\n\t              // Put the custos at the very end of the line\n\t              this.custos.bounds.x = this.staffRight - this.custos.bounds.width - this.custos.leadingSpace;\n\t            } else {\n\t              this.custos.bounds.x = prevNeume.bounds.right() + prevNeume.calculatedTrailingSpace;\n\t            }\n\t            // nothing more to see here...\n\t            break;\n\t          }\n\t        }\n\t      }\n\t\n\t      if (this.lastLyricsBeforeTextOnly) {\n\t        this.lastLyrics = this.lastLyricsBeforeTextOnly;\n\t        delete this.lastLyricsBeforeTextOnly;\n\t      }\n\t\n\t      // find the final lyric and mark it as connecting if needed.\n\t      if (width > 0) {\n\t        var whitespace = this.getWhitespaceOnRight();\n\t        var rightEdge = this.staffRight;\n\t        if (whitespace < 0) {\n\t          rightEdge -= whitespace;\n\t        }\n\t      }\n\t      i = 0;\n\t      while (this.lastLyrics && this.lastLyrics[i]) {\n\t        var lyrics = this.lastLyrics[i];\n\t        if (lyrics.allowsConnector()) {\n\t          lyrics.setNeedsConnector(true, 0);\n\t          if (width > 0 && ctxt.minLyricWordSpacing < ctxt.hyphenWidth) {\n\t            whitespace = rightEdge - lyrics.getRight();\n\t            // shrink the hyphen if we are already out of whitespace or if we would be if we used a regular hyphen:\n\t            if (whitespace < 0) {\n\t              var minHyphenWidth = Math.max(ctxt.hyphenWidth + whitespace, this.lastLyrics.length > 1 ? ctxt.intraNeumeSpacing : ctxt.minLyricWordSpacing);\n\t              // we might not need to shift the syllable, but we do want to shrink the hyphen...\n\t              lyrics.setConnectorWidth(minHyphenWidth);\n\t            }\n\t          }\n\t        }\n\t        ++i;\n\t      }\n\t\n\t      // if the provided width is less than zero, then set the width of the line\n\t      // based on the last notation\n\t      if (width <= 0) {\n\t        this.staffRight = notations[this.notationsStartIndex + this.numNotationsOnLine - 1].bounds.right();\n\t        this.justify = false;\n\t      }\n\t\n\t      // Justify the line if we need to\n\t      this.justifyElements(ctxt, this.justify, condensableSpaces);\n\t\n\t      this.centerDividers();\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }, {\n\t    key: \"centerDividers\",\n\t    value: function centerDividers() {\n\t      var lastIndex = this.extraTextOnlyIndex === null ? this.notationsStartIndex + this.numNotationsOnLine : this.extraTextOnlyIndex,\n\t          curr;\n\t      for (var i = this.notationsStartIndex; i < lastIndex; i++) {\n\t        curr = this.score.notations[i];\n\t\n\t        if (curr && curr.isDivider) {\n\t          var j = 1;\n\t          var prev = this.score.notations[i - 1];\n\t          var next = i + 1 === lastIndex ? this.custos : this.score.notations[i + 1];\n\t          if (prev === next && next === this.custos) {\n\t            prev = this.score.notations[i - 2];\n\t            // force custos to right edge in this case, since it is a custos that exists\n\t            // regardless of line break, and would normally be before the double bar, but in this case it ends the line:\n\t            next.bounds.x = this.staffRight - next.bounds.width;\n\t          }\n\t          if (prev && next) {\n\t            //if (prev instanceof TextOnly || next instanceof TextOnly) continue;\n\t            var oldBoundsX = curr.bounds.x;\n\t            var barWidth = curr.bounds.width;\n\t            var leftPoint = prev instanceof _ExsurgeChant.TextOnly && prev.hasLyrics() ? prev.lyrics[0].getRight() : prev.bounds.right(),\n\t                rightPoint = next instanceof _ExsurgeChant.TextOnly && next.hasLyrics() ? next.lyrics[0].getLeft() : next.bounds.x;\n\t            if (prev instanceof _ExsurgeChant.TextOnly) {\n\t              var _prev = this.score.notations.slice(this.notationsStartIndex, i).reverse().find(function (notation) {\n\t                return !(notation instanceof _ExsurgeChant.TextOnly);\n\t              });\n\t              leftPoint = _prev ? _prev.bounds.right() : 0;\n\t            }\n\t            if (leftPoint) {\n\t              curr.bounds.x = (leftPoint + rightPoint - barWidth) / 2;\n\t            }\n\t            if (curr.hasLyrics()) {\n\t              var offset = oldBoundsX - curr.bounds.x;\n\t              for (j = curr.lyrics.length - 1; j >= 0; j--) {\n\t                curr.lyrics[j].bounds.x += offset;\n\t                curr.lyrics[j].needsLayout = true;\n\t              }\n\t            }\n\t          } else if (i === lastIndex - 1 && this.justify && (curr.constructor === _ExsurgeChantSigns.DoubleBar || curr.constructor === _ExsurgeChantSigns.FullBar)) {\n\t            curr.bounds.x = this.staffRight - curr.bounds.width;\n\t          }\n\t        }\n\t      }\n\t    }\n\t  }, {\n\t    key: \"findNeumesToJustify\",\n\t    value: function findNeumesToJustify(prevLyrics) {\n\t      this.toJustify = [];\n\t      var prev,\n\t          curr = null,\n\t          next = null,\n\t          nextOrCurr = null,\n\t          lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\t      for (var i = this.notationsStartIndex; i < lastIndex; i++) {\n\t        prev = nextOrCurr;\n\t        curr = this.score.notations[i];\n\t        next = curr.isAccidental && this.score.notations[++i];\n\t        nextOrCurr = next || curr;\n\t        var hasLyrics = nextOrCurr.hasLyrics();\n\t\n\t        if (!curr || !prev) continue;\n\t\n\t        if (this.extraTextOnlyIndex !== null && i >= this.extraTextOnlyIndex && curr.constructor === _ExsurgeChant.TextOnly) continue;\n\t\n\t        if (prev !== null) {\n\t          _ExsurgeDrawing.LyricArray.mergeIn(prevLyrics, prev.lyrics);\n\t          if (prev.keepWithNext === true) continue;\n\t        }\n\t\n\t        if (!curr.isDivider && prevLyrics.length && prevLyrics[0].allowsConnector() && hasLyrics) continue;\n\t\n\t        if (nextOrCurr.constructor === _ExsurgeChant.ChantLineBreak) continue;\n\t\n\t        if (nextOrCurr === this.custos && !hasLyrics) continue;\n\t\n\t        if (i === 0 && this.score.useDropCap && hasLyrics) continue;\n\t\n\t        // otherwise, we can add space before this element\n\t        this.toJustify.push(curr);\n\t      }\n\t      if (nextOrCurr !== null) _ExsurgeDrawing.LyricArray.mergeIn(prevLyrics, nextOrCurr.lyrics);\n\t      return nextOrCurr;\n\t    }\n\t  }, {\n\t    key: \"getWhitespaceOnRight\",\n\t    value: function getWhitespaceOnRight(ctxt) {\n\t      var notations = this.score.notations;\n\t      var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\t      var last = notations[lastIndex - 1];\n\t      if (this.extraTextOnlyIndex !== null && last.constructor === _ExsurgeChant.TextOnly) {\n\t        lastIndex = this.extraTextOnlyIndex;\n\t        last = notations[lastIndex - 1];\n\t      }\n\t      var lastRightNeume = last ? last.bounds.right() + last.calculatedTrailingSpace : 0;\n\t      var lastLyrics = this.lastLyricsBeforeTextOnly || this.lastLyrics;\n\t      var lastRightLyric = lastLyrics.length ? _ExsurgeDrawing.LyricArray.getRight(lastLyrics) : 0;\n\t\n\t      if (this.custos) {\n\t        lastRightNeume += this.custos.bounds.width + this.custos.leadingSpace;\n\t        if (this.custos.hasLyrics()) {\n\t          lastRightLyric = _ExsurgeDrawing.LyricArray.getRight(this.custos.lyrics);\n\t        }\n\t      } else if (ctxt && lastIndex < notations.length) {\n\t        lastRightNeume += _ExsurgeGlyphs.Glyphs.CustosLong.bounds.width * ctxt.glyphScaling;\n\t      }\n\t      return this.staffRight - Math.max(lastRightLyric, lastRightNeume);\n\t    }\n\t  }, {\n\t    key: \"justifyElements\",\n\t    value: function justifyElements(ctxt, doJustify, condensableSpaces) {\n\t      var i;\n\t      var toJustify = this.toJustify || [];\n\t      var notations = this.score.notations;\n\t      var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\t\n\t      // if it wasn't an ideal line break, and the last note is further from the custos than it would have been from its next punctum,\n\t      // move the custos over.\n\t      // We do this first so that if it opens up any new whitespace, that gets accounted for when we do the justification\n\t      var lastNotation = notations[this.notationsStartIndex + this.numNotationsOnLine - 1];\n\t      var extraSpaceBeforeCustos = this.staffRight < Infinity && this.custos && lastNotation.keepWithNext && this.custos.bounds.x - lastNotation.bounds.right() - lastNotation.calculatedTrailingSpace;\n\t      if (extraSpaceBeforeCustos > 0) {\n\t        // first, shrink the hyphen(s) if applicable, to move the neumes closer to the custos:\n\t        i = 0;\n\t        while (this.lastLyrics && this.lastLyrics[i]) {\n\t          var lyrics = this.lastLyrics[i];\n\t          if (lyrics.allowsConnector()) {\n\t            var connectorWidth = lyrics.getConnectorWidth();\n\t            if (ctxt.minLyricWordSpacing < connectorWidth) {\n\t              var minHyphenWidth = Math.max(connectorWidth - extraSpaceBeforeCustos, this.lastLyrics.length > 1 ? ctxt.intraNeumeSpacing : ctxt.minLyricWordSpacing);\n\t              // we might not need to shift the syllable, but we do want to shrink the hyphen...\n\t              lyrics.setConnectorWidth(minHyphenWidth);\n\t            }\n\t          }\n\t          ++i;\n\t        }\n\t        this.custos.bounds.x = lastNotation.bounds.right() + lastNotation.calculatedTrailingSpace;\n\t      }\n\t\n\t      // first step of justification is to determine how much space we have to use up\n\t      var extraSpace = this.getWhitespaceOnRight();\n\t\n\t      if (Math.abs(extraSpace) < 0.5 || extraSpace > 0 && (doJustify && toJustify.length === 0 || !doJustify)) return;\n\t\n\t      this.condensableSpaces = condensableSpaces;\n\t\n\t      var curr, prev;\n\t      var offset = 0;\n\t      var increment = extraSpace / toJustify.length;\n\t      var multiplier = 0;\n\t      var toJustifyIndex = 0;\n\t      if (extraSpace < 0) {\n\t        toJustify = condensableSpaces.filter(function (s) {\n\t          return s.condensable > 0;\n\t        });\n\t        multiplier = extraSpace / condensableSpaces.sum;\n\t        increment = 0;\n\t      }\n\t      var nextToJustify = toJustify[toJustifyIndex++];\n\t      var incrementOffsetAtNextChance = false;\n\t      for (i = this.notationsStartIndex; i < lastIndex; i++) {\n\t        prev = curr;\n\t        curr = notations[i];\n\t\n\t        if (this.extraTextOnlyIndex !== null && i >= this.extraTextOnlyIndex && curr.constructor === _ExsurgeChant.TextOnly) {\n\t          continue;\n\t        }\n\t\n\t        if (!multiplier && curr === this.custos) {\n\t          if (curr.hasLyrics()) {\n\t            curr.bounds.x = Math.min(curr.bounds.x + (this.staffRight - _ExsurgeDrawing.LyricArray.getRight(curr.lyrics)), this.staffRight - curr.bounds.width);\n\t            offset += increment;\n\t          } else {\n\t            curr.bounds.x = Math.min(curr.bounds.x + offset, this.staffRight - curr.bounds.width);\n\t          }\n\t          continue;\n\t        }\n\t\n\t        if (multiplier) {\n\t          if (nextToJustify && nextToJustify.notation === curr) {\n\t            offset += multiplier * nextToJustify.condensable;\n\t            nextToJustify = toJustify[toJustifyIndex++];\n\t          }\n\t        } else if (nextToJustify === curr) {\n\t          if (prev.hasNoWidth) {\n\t            incrementOffsetAtNextChance = true;\n\t          } else {\n\t            offset += increment;\n\t          }\n\t          nextToJustify = toJustify[toJustifyIndex++];\n\t        } else if (incrementOffsetAtNextChance && !prev.hasNoWidth) {\n\t          incrementOffsetAtNextChance = false;\n\t          offset += increment;\n\t        }\n\t\n\t        curr.bounds.x += offset;\n\t      }\n\t\n\t      if (extraSpaceBeforeCustos > 0) {\n\t        this.custos.bounds.x = lastNotation.bounds.right() + lastNotation.calculatedTrailingSpace;\n\t      }\n\t    }\n\t  }, {\n\t    key: \"handleEndBrace\",\n\t    value: function handleEndBrace(ctxt, note, i) {\n\t      var startBrace = ctxt.lastStartBrace;\n\t      if (!startBrace) return;\n\t      // calculate the y value of the brace by iterating over all notations\n\t      // under/over the brace.\n\t      var y;\n\t      var k = startBrace.notationIndex;\n\t      var notations = this.score.notations;\n\t      var dy = ctxt.intraNeumeSpacing / 2; // some safe space between brace and notes.\n\t      var startNote = startBrace.note;\n\t\n\t      if (startBrace.isAbove) {\n\t        y = Math.min.apply(Math, [ctxt.calculateHeightFromStaffPosition(4)].concat(_toConsumableArray([startNote, note].concat(notations.slice(k, i + 1)).map(function (n) {\n\t          return n.bounds.y - dy;\n\t        }))));\n\t      } else {\n\t        y = Math.max.apply(Math, [ctxt.calculateHeightFromStaffPosition(-4)].concat(_toConsumableArray([startNote, note].concat(notations.slice(k, i + 1)).map(function (n) {\n\t          return n.bounds.bottom() + dy;\n\t        }))));\n\t      }\n\t\n\t      var addAcuteAccent = false;\n\t\n\t      if (startBrace.shape === _ExsurgeChantMarkings.BraceShape.RoundBrace) {\n\t        this.braces.push(new _ExsurgeDrawing.RoundBraceVisualizer(ctxt, startBrace.getAttachmentX(startNote), note.braceEnd.getAttachmentX(note), y, startBrace.isAbove));\n\t      } else {\n\t        if (startBrace.shape === _ExsurgeChantMarkings.BraceShape.AccentedCurlyBrace) addAcuteAccent = true;\n\t\n\t        this.braces.push(new _ExsurgeDrawing.CurlyBraceVisualizer(ctxt, startBrace.getAttachmentX(startNote), note.braceEnd.getAttachmentX(note), y, startBrace.isAbove, addAcuteAccent));\n\t      }\n\t\n\t      delete ctxt.lastStartBrace;\n\t    }\n\t  }, {\n\t    key: \"finishLayout\",\n\t    value: function finishLayout(ctxt) {\n\t      var _this2 = this;\n\t\n\t      this.ledgerLines = []; // clear any existing ledger lines\n\t\n\t      var notations = this.score.notations;\n\t      var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\t\n\t      // an element needs to have a staffPosition property, as well as the standard\n\t      // bounds property. so it could be a note, or it could be a custos\n\t      // offsetX can be used to add to the position info for the element,\n\t      // useful in the case of notes.\n\t      var processElementForLedgerLine = function processElementForLedgerLine(element) {\n\t        var endElem = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : element;\n\t        var staffPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : element.staffPosition;\n\t        var offsetX = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : element.neume ? element.neume.bounds.x : 0;\n\t\n\t        // do we need a ledger line for this note?\n\t\n\t        if (staffPosition >= 5 || staffPosition <= -5) {\n\t          var x1 = offsetX + element.bounds.x - ctxt.intraNeumeSpacing;\n\t          var x2 = offsetX + endElem.bounds.x + endElem.bounds.width + ctxt.intraNeumeSpacing;\n\t\n\t          // round the staffPosition to the nearest line\n\t          if (staffPosition > 0) staffPosition = staffPosition - (staffPosition - 1) % 2;else staffPosition = staffPosition - (staffPosition + 1) % 2;\n\t\n\t          // if we have a ledger line close by, then average out the distance between the two\n\t          var minLedgerSeparation = ctxt.staffInterval * ctxt.minLedgerSeparation;\n\t\n\t          if (_this2.ledgerLines.length > 0 && _this2.ledgerLines[_this2.ledgerLines.length - 1].x2 + minLedgerSeparation >= x1) {\n\t            // average out the distance\n\t            var half = (x1 - _this2.ledgerLines[_this2.ledgerLines.length - 1].x2) / 2;\n\t            _this2.ledgerLines[_this2.ledgerLines.length - 1].x2 += half;\n\t            x1 -= half;\n\t          }\n\t\n\t          // never let a ledger line extend past the staff width\n\t          if (x2 > _this2.staffRight) x2 = _this2.staffRight;\n\t\n\t          // finally, add the ledger line\n\t          _this2.ledgerLines.push({\n\t            x1: x1,\n\t            x2: x2,\n\t            staffPosition: staffPosition\n\t          });\n\t        }\n\t      };\n\t\n\t      var episemata = []; // keep track of episemata in case we can connect some\n\t      var startBrace = null;\n\t      var minY = Number.MAX_VALUE,\n\t          maxY = Number.MIN_VALUE; // for braces\n\t\n\t      var positionNonLyricText = function positionNonLyricText(text, neume, rightX) {\n\t        text.setMaxWidth(ctxt, _this2.staffRight);\n\t        //text.bounds.x = neume.hasLyrics()? Math.min(...neume.lyrics.map(l => l.bounds.x)) : 0;\n\t        text.bounds.x = 0;\n\t        if (rightX) text.bounds.x = (text.bounds.x + rightX - text.bounds.width) / 2;\n\t        var beyondStaffRight = neume.bounds.x + text.bounds.right() - _this2.staffRight;\n\t        if (beyondStaffRight > 0) {\n\t          text.bounds.x -= beyondStaffRight;\n\t        }\n\t        if (neume.bounds.x + text.bounds.x < 0) {\n\t          text.bounds.x = -neume.bounds.x;\n\t        }\n\t      };\n\t\n\t      // make a final pass over all of the notes to add any necessary\n\t      // ledger lines and to smooth out episemata\n\t      for (var i = this.notationsStartIndex; i < lastIndex; i++) {\n\t        var neume = notations[i];\n\t\n\t        minY = Math.min(minY, neume.bounds.y);\n\t        maxY = Math.max(maxY, neume.bounds.bottom());\n\t\n\t        if (neume.constructor === _ExsurgeChantSigns.Custos) {\n\t          processElementForLedgerLine(neume);\n\t          continue;\n\t        }\n\t\n\t        // if the AboveLinesText would extend beyond the right edge of the staff, right align it instead\n\t        if (neume.alText) {\n\t          for (var j = 0; j < neume.alText.length; j++) {\n\t            positionNonLyricText(neume.alText[j], neume);\n\t          }\n\t        }\n\t\n\t        // set up horizontal position of translations\n\t        if (neume.translationText) {\n\t          for (j = 0; j < neume.translationText.length; j++) {\n\t            var text = neume.translationText[j];\n\t            if (text.endNeume) {\n\t              var rightX = text.endNeume.hasLyrics() ? text.endNeume.bounds.x + Math.max.apply(Math, _toConsumableArray(text.endNeume.lyrics.map(function (l) {\n\t                return l.bounds.right();\n\t              }))) : text.endNeume.bounds.right();\n\t              rightX -= neume.bounds.x;\n\t              positionNonLyricText(text, neume, rightX);\n\t            } else {\n\t              positionNonLyricText(text, neume);\n\t            }\n\t          }\n\t        }\n\t\n\t        // if it's not a neume then just skip here\n\t        if (!neume.isNeume) continue;\n\t\n\t        for (j = 0; j < neume.ledgerLines.length; j++) {\n\t          var ll = neume.ledgerLines[j];\n\t          processElementForLedgerLine(ll.element, ll.endElem, ll.staffPosition);\n\t        }\n\t\n\t        for (j = 0; j < neume.notes.length; j++) {\n\t          var k,\n\t              note = neume.notes[j];\n\t\n\t          // blend episemata as we're able\n\t          if (note.episemata.length === 0) episemata = [];\n\t          for (k = 0; k < note.episemata.length; k++) {\n\t            var episema = note.episemata[k];\n\t\n\t            var spaceBetweenEpisemata = 0;\n\t\n\t            // calculate the distance between the last episemata and this one...\n\t            // lots of code for a simple: currEpisemata.left - prevEpisemata.right\n\t            if (episemata.length > 0) spaceBetweenEpisemata = neume.bounds.x + episema.bounds.x - (episemata[episemata.length - 1].note.neume.bounds.x + episemata[episemata.length - 1].bounds.right());\n\t\n\t            // we try to blend the episema if we're able.\n\t            if (episemata.length === 0 || episemata[episemata.length - 1].positionHint !== episema.positionHint || episemata[episemata.length - 1].terminating === true || episemata[episemata.length - 1].alignment === _ExsurgeChantMarkings.HorizontalEpisemaAlignment.Left || episemata[episemata.length - 1].alignment === _ExsurgeChantMarkings.HorizontalEpisemaAlignment.Center || episema.alignment === _ExsurgeChantMarkings.HorizontalEpisemaAlignment.Right || episema.alignment === _ExsurgeChantMarkings.HorizontalEpisemaAlignment.Center || spaceBetweenEpisemata > ctxt.intraNeumeSpacing * 2 && note.glyphVisualizer.glyphCode !== _ExsurgeDrawing.GlyphCode.None) {\n\t              // start a new set of episemata to potentially blend\n\t              episemata = [episema];\n\t            } else {\n\t              // blend all previous with this one\n\t              var newY;\n\t\n\t              if (episema.positionHint === _ExsurgeDrawing.MarkingPositionHint.Below) newY = Math.max(episema.bounds.y, episemata[episemata.length - 1].bounds.y);else newY = Math.min(episema.bounds.y, episemata[episemata.length - 1].bounds.y);\n\t\n\t              if (episema.bounds.y !== newY) episema.bounds.y = newY;else {\n\t                for (var l = 0; l < episemata.length; l++) {\n\t                  episemata[l].bounds.y = newY;\n\t                }\n\t              }\n\t\n\t              // extend the last episema to meet the new one\n\t              var newWidth = neume.bounds.x + episema.bounds.x - (episemata[episemata.length - 1].note.neume.bounds.x + episemata[episemata.length - 1].bounds.x);\n\t              if (newWidth < 0) {\n\t                newWidth *= -1;\n\t                episemata[episemata.length - 1].bounds.x -= newWidth;\n\t              }\n\t              episemata[episemata.length - 1].bounds.width = newWidth;\n\t\n\t              episemata.push(episema);\n\t            }\n\t          }\n\t\n\t          if (note.braceEnd) this.handleEndBrace(ctxt, note, i);\n\t\n\t          if (note.braceStart) {\n\t            ctxt.lastStartBrace = startBrace = note.braceStart;\n\t            startBrace.notationIndex = i;\n\t          }\n\t        }\n\t      }\n\t\n\t      // if we still have an active brace, that means it spands two chant lines!\n\t      if (startBrace !== null) {\n\t        if (this.custos) {\n\t          // if the next end brace is on the first note following the line break, simply use it with the custos\n\t          // Do the same if there is only an accidental between\n\t          // otherwise, make a new end brace to work for this one, and a new start brace for the next line.\n\t          var nextNotation = notations[lastIndex];\n\t          var nextNote = nextNotation.notes && nextNotation.notes[0];\n\t          var nextNotationButOne = notations[lastIndex + 1];\n\t          var nextNoteButOne = nextNotationButOne && nextNotationButOne.notes && nextNotationButOne.notes[0];\n\t          var braceEnd = nextNote && nextNote.braceEnd || nextNotation.isAccidental && nextNoteButOne && nextNoteButOne.braceEnd;\n\t          if (braceEnd) {\n\t            this.custos.braceEnd = braceEnd;\n\t            this.handleEndBrace(ctxt, this.custos, i);\n\t          } else {\n\t            this.braceStart = startBrace;\n\t            this.custos.braceEnd = new _ExsurgeChantMarkings.BracePoint(this.custos, startBrace.isAbove, startBrace.shape, _ExsurgeChantMarkings.BraceAttachment.Right);\n\t            this.handleEndBrace(ctxt, this.custos, i - 1);\n\t            ctxt.lastStartBrace = new _ExsurgeChantMarkings.BracePoint(null, startBrace.isAbove, startBrace.shape, _ExsurgeChantMarkings.BraceAttachment.Left);\n\t            ctxt.lastStartBrace.notationIndex = i;\n\t          }\n\t        }\n\t      }\n\t\n\t      // don't forget to also include the final custos, which may need a ledger line too\n\t      if (this.custos) processElementForLedgerLine(this.custos);\n\t    }\n\t\n\t    // this is where the real core of positioning neumes takes place\n\t    // returns true if positioning was able to fit the neume before rightNotationBoundary.\n\t    // returns false if cannot fit before given right margin.\n\t    // fixme: if this returns false, shouldn't we set the connectors on prev to be activated?!\n\t\n\t  }, {\n\t    key: \"positionNotationElement\",\n\t    value: function positionNotationElement(ctxt, prevLyrics, prev, curr, rightNotationBoundary) {\n\t      var condensableSpaces = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n\t\n\t      if (!condensableSpaces.hasOwnProperty(\"sum\")) condensableSpaces.sum = 0;\n\t      var i,\n\t          space = { notation: curr },\n\t          fixedX = false;\n\t\n\t      // To begin we just place the current notation right after the previous,\n\t      // irrespective of lyrics.\n\t      // But if the previous neume was part of a polyphonic \"no width\" group and the current is not, or is of a separate group,\n\t      // we force it to have the same x as the previous group.\n\t      if ((!curr.hasNoWidth || curr.firstWithNoWidth === curr) && prev.firstWithNoWidth) {\n\t        curr.bounds.x = prev.firstWithNoWidth.bounds.x;\n\t        fixedX = true;\n\t      } else {\n\t        curr.bounds.x = prev.bounds.right();\n\t      }\n\t\n\t      if (curr.constructor === _ExsurgeChant.TextOnly && this.extraTextOnlyIndex === null || !curr.hasLyrics() && prev.calculatedTrailingSpace < 0) {\n\t        // We transfer over the trailing space from the previous neume if the current neume is text only,\n\t        // so that the text only neume has a better chance at not needing a connector.\n\t        curr.calculatedTrailingSpace = prev.calculatedTrailingSpace;\n\t        if (curr.hasLyrics()) curr.calculatedTrailingSpace -= curr.lyrics[0].bounds.width;\n\t        if (curr.constructor === _ExsurgeChant.TextOnly && curr.lyrics.length === 1) {\n\t          curr.lyrics[0].setMaxWidth(ctxt, this.staffRight, this.staffRight - _ExsurgeDrawing.LyricArray.getRight(prevLyrics) - ctxt.minLyricWordSpacing);\n\t        }\n\t      } else if (!fixedX) {\n\t        curr.bounds.x += prev.calculatedTrailingSpace;\n\t      }\n\t\n\t      if (curr.hasLyrics() && !prev.isDivider && !prev.isAccidental && this.numNotationsOnLine > 0 && (curr.lyrics[0].lyricType === _ExsurgeDrawing.LyricType.SingleSyllable || curr.lyrics[0].lyricType === _ExsurgeDrawing.LyricType.BeginningSyllable)) {\n\t        curr.bounds.x += ctxt.intraNeumeSpacing * ctxt.interVerbalMultiplier;\n\t      }\n\t      if (curr.hasNoWidth || fixedX) {\n\t        space.total = space.condensable = 0;\n\t      } else if (this.extraTextOnlyIndex !== null && curr.constructor === _ExsurgeChant.TextOnly) {\n\t        curr.bounds.x = 0;\n\t        space.total = space.condensable = 0;\n\t      } else {\n\t        space.total = curr.bounds.x - prev.bounds.right();\n\t        space.condensable = space.total * ctxt.condensingTolerance;\n\t      }\n\t\n\t      // if the previous notation has no lyrics, then we simply make sure the\n\t      // current notation with lyrics is in the bounds of the line\n\t      if (prevLyrics.length === 0) {\n\t        var maxRight = curr.bounds.right() + curr.calculatedTrailingSpace;\n\t\n\t        // if the lyric left is negative, then offset the neume appropriately\n\t        for (i = 0; i < curr.lyrics.length; i++) {\n\t          var currLyric = curr.lyrics[i];\n\t          // we hope for the best!\n\t          // but always use a connector if the lyric has original text that was all used up for the drop cap.\n\t          var needsConnector = currLyric.allowsConnector() && currLyric.dropCap && currLyric.originalText && !currLyric.text;\n\t          currLyric.setNeedsConnector(needsConnector);\n\t          var minLeft = this.staffLeft - this.paddingLeft;\n\t\n\t          if (currLyric.getLeft() < minLeft) curr.bounds.x -= currLyric.getLeft() - minLeft;\n\t\n\t          space.condensable = Math.min(space.condensable, currLyric.getLeft() - minLeft);\n\t          maxRight = Math.max(maxRight, currLyric.getRight());\n\t        }\n\t\n\t        if (maxRight > rightNotationBoundary + condensableSpaces.sum + space.condensable) return false;\n\t        condensableSpaces.push(space);\n\t        condensableSpaces.sum += space.condensable;\n\t        return true;\n\t      } else {\n\t        if (curr.firstOfSyllable && prevLyrics.length && !curr.hasLyrics()) {\n\t          curr.bounds.x = Math.max(curr.bounds.x, prevLyrics[0].getRight());\n\t          space.total = curr.bounds.x - prev.bounds.right();\n\t          space.condensable = space.total * ctxt.condensingTolerance;\n\t        }\n\t      }\n\t\n\t      // if the curr notation has no lyrics, then simply check whether there is enough room\n\t      if (curr.hasLyrics() === false) {\n\t        if (curr.bounds.right() + curr.calculatedTrailingSpace > rightNotationBoundary + condensableSpaces.sum + space.condensable) return false;\n\t        condensableSpaces.push(space);\n\t        condensableSpaces.sum += space.condensable;\n\t        return true;\n\t      }\n\t\n\t      // if we have multiple lyrics on the current or the previous notation,\n\t      // we will have to run several passes over each set of lyrics:\n\t\n\t      // on the first pass, we will check the absolute left-most placement of the new syllables\n\t      // we will make additional passes until everything is stable\n\t      do {\n\t        var hasShifted = false;\n\t        var atLeastOneWithoutConnector = false;\n\t        for (i = 0; i < curr.lyrics.length; i++) {\n\t          if (!curr.lyrics[i].originalText) continue;\n\t          var prevLyricRight = 0;\n\t          var condensableSpacesSincePrevLyric = [];\n\t          var condensableSpaceSincePrevLyric = null;\n\t          if (i < prevLyrics.length && prevLyrics[i]) {\n\t            prevLyricRight = prevLyrics[i].getRight();\n\t            var notationI = condensableSpaces.map(function (s) {\n\t              return s.notation;\n\t            }).lastIndexOf(prevLyrics[i].notation);\n\t            if (notationI >= 0) {\n\t              condensableSpacesSincePrevLyric = condensableSpaces.slice(notationI + 1);\n\t              condensableSpacesSincePrevLyric.sum = condensableSpacesSincePrevLyric.map(function (s) {\n\t                return s.condensable;\n\t              }).reduce(function (a, b) {\n\t                return a + b;\n\t              }, 0);\n\t            } else {\n\t              condensableSpacesSincePrevLyric.sum = 0;\n\t            }\n\t          }\n\t\n\t          curr.lyrics[i].setNeedsConnector(false); // we hope for the best!\n\t          var currLyricLeft = curr.lyrics[i].getLeft();\n\t          if (!prevLyrics[i] || prevLyrics[i].allowsConnector() === false) {\n\t            // No connector needed, but include space between words if necessary!\n\t            var extraSpace = currLyricLeft - prevLyricRight - ctxt.minLyricWordSpacing;\n\t            if (extraSpace < 0) {\n\t              // push the current element over a bit.\n\t              var shift = prevLyricRight + ctxt.minLyricWordSpacing - currLyricLeft;\n\t              curr.bounds.x += shift;\n\t              condensableSpaceSincePrevLyric = 0;\n\t              hasShifted = shift > 0.5;\n\t            } else {\n\t              condensableSpaceSincePrevLyric = extraSpace;\n\t            }\n\t          } else {\n\t            // we may need a connector yet...\n\t            if (prevLyricRight + 0.1 > currLyricLeft - condensableSpacesSincePrevLyric.sum - space.condensable) {\n\t              // in this case, the lyric elements actually overlap.\n\t              // so nope, no connector needed. instead, we just place the lyrics together\n\t              // fixme: for better text layout, we could actually use the kerning values\n\t              // between the prev and curr lyric elements!\n\t              var _shift = prevLyricRight - currLyricLeft;\n\t              if (_shift < -0.1) {\n\t                (function () {\n\t                  // in this case, the spacing needs to be condensed in the neumes since the last lyric...\n\t                  var multiplier = _shift / (condensableSpacesSincePrevLyric.sum + space.condensable);\n\t                  var offset = 0;\n\t                  condensableSpacesSincePrevLyric.forEach(function (s) {\n\t                    offset += multiplier * s.condensable;\n\t                    s.notation.bounds.x += offset;\n\t                  });\n\t                })();\n\t              }\n\t              curr.bounds.x += _shift;\n\t              condensableSpaceSincePrevLyric = 0;\n\t              atLeastOneWithoutConnector = true;\n\t              hasShifted = _shift > 0.5;\n\t            } else {\n\t              // bummer, looks like we couldn't merge the syllables together. Better add a connector...\n\t              if (ctxt.minLyricWordSpacing < ctxt.hyphenWidth) {\n\t                var spaceBetweenSyls = currLyricLeft - prevLyricRight;\n\t                if (spaceBetweenSyls < ctxt.hyphenWidth) {\n\t                  var minHyphenWidth = prevLyrics.length > 1 ? ctxt.intraNeumeSpacing : ctxt.minLyricWordSpacing;\n\t                  // we might not need to shift the syllable, but we do want to shrink the hyphen...\n\t                  prevLyrics[i].setConnectorWidth(Math.max(minHyphenWidth, spaceBetweenSyls));\n\t                }\n\t              }\n\t              prevLyrics[i].setNeedsConnector(true);\n\t              prevLyricRight = prevLyrics[i].getRight();\n\t\n\t              if (prevLyricRight + 0.1 > currLyricLeft) {\n\t                var _shift2 = prevLyricRight - currLyricLeft;\n\t                curr.bounds.x += _shift2;\n\t                condensableSpaceSincePrevLyric = 0;\n\t                hasShifted = _shift2 > 0.5;\n\t              } else {\n\t                condensableSpaceSincePrevLyric = currLyricLeft - prevLyricRight;\n\t              }\n\t            }\n\t          }\n\t\n\t          if (condensableSpaceSincePrevLyric !== null) {\n\t            if (condensableSpaceSincePrevLyric < condensableSpacesSincePrevLyric.sum + space.condensable) {\n\t              (function () {\n\t                // reduce condensable space so that lyrics retain at least the width of a space character between words:\n\t                var multiplier = condensableSpaceSincePrevLyric / (condensableSpacesSincePrevLyric.sum + space.condensable);\n\t                space.condensable *= multiplier;\n\t                if (condensableSpacesSincePrevLyric.sum) {\n\t                  condensableSpacesSincePrevLyric.forEach(function (space) {\n\t                    space.condensable *= multiplier;\n\t                  });\n\t                  condensableSpaces.sum = condensableSpaces.map(function (s) {\n\t                    return s.condensable;\n\t                  }).reduce(function (a, b) {\n\t                    return a + b;\n\t                  }, 0);\n\t                }\n\t              })();\n\t            }\n\t          }\n\t        }\n\t      } while (curr.lyrics.length > 1 && hasShifted && atLeastOneWithoutConnector);\n\t\n\t      for (i = Math.min(curr.lyrics.length, prevLyrics.length) - 1; i >= 0; i--) {\n\t        var pLyrics = prevLyrics[i];\n\t        if (pLyrics.needsConnector && pLyrics.connectorWidth) {\n\t          currLyricLeft = curr.lyrics[i].getLeft();\n\t          prevLyricRight = pLyrics.getRight() - pLyrics.connectorWidth;\n\t          spaceBetweenSyls = currLyricLeft - prevLyricRight;\n\t          if (spaceBetweenSyls >= ctxt.hyphenWidth) spaceBetweenSyls = 0;\n\t          pLyrics.setConnectorWidth(spaceBetweenSyls);\n\t        }\n\t      }\n\t\n\t      if (curr.bounds.right() + curr.calculatedTrailingSpace < rightNotationBoundary + condensableSpaces.sum + space.condensable && _ExsurgeDrawing.LyricArray.getRight(curr.lyrics, true) <= this.staffRight + condensableSpaces.sum + space.condensable) {\n\t        if (prev.isAccidental) {\n\t          // move the previous accidental up next to the current note:\n\t          var _shift3 = curr.bounds.x - prev.bounds.width - prev.calculatedTrailingSpace - prev.bounds.x;\n\t          prev.bounds.x += _shift3;\n\t          if (Math.abs(_shift3) > 0.1) {\n\t            var lastCondensable = condensableSpaces[condensableSpaces.length - 1];\n\t            condensableSpaces.sum -= lastCondensable.condensable;\n\t            lastCondensable.condensable = 0;\n\t          }\n\t        }\n\t        condensableSpaces.push(space);\n\t        condensableSpaces.sum += space.condensable;\n\t        return true;\n\t      }\n\t\n\t      // if we made it this far, then the element won't fit on this line.\n\t      return false;\n\t    }\n\t\n\t    /**\n\t     * Find the notation closest to x without going past it\n\t     * @param {number} x\n\t     */\n\t\n\t  }, {\n\t    key: \"bisectNotationAtX\",\n\t    value: function bisectNotationAtX(x) {\n\t      var useMidpoint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\t\n\t      var minIndex = -1,\n\t          maxIndex = Math.min(this.numNotationsOnLine, Infinity),\n\t          curIndex = minIndex + (maxIndex - minIndex >> 1),\n\t          notations = this.score.notations.slice(this.notationsStartIndex, this.notationsStartIndex + this.numNotationsOnLine);\n\t\n\t      while (minIndex < curIndex) {\n\t        var _notation = notations[curIndex];\n\t        var notationX = _notation.bounds.x;\n\t        if (notationX > x) {\n\t          maxIndex = curIndex;\n\t        } else {\n\t          minIndex = curIndex;\n\t        }\n\t        curIndex = minIndex + (maxIndex - minIndex >> 1);\n\t      }\n\t      var notation = notations[curIndex];\n\t      if (useMidpoint && notation && notation.bounds.width === 0 && curIndex + 1 < notations.length) {\n\t        var nextNotation = notations[curIndex + 1],\n\t            closenessToLeft = x - notation.bounds.x,\n\t            closenessToRight = nextNotation.bounds.x - x;\n\t        if (nextNotation.bounds.width === 0 && closenessToRight < closenessToLeft) ++curIndex;\n\t      }\n\t      return notations[curIndex];\n\t    }\n\t  }]);\n\t\n\t  return ChantLine;\n\t}(_ExsurgeDrawing.ChantLayoutElement);\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.BracePoint = exports.BraceAttachment = exports.BraceShape = exports.Mora = exports.Ictus = exports.HorizontalEpisema = exports.HorizontalEpisemaAlignment = exports.Accent = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _ExsurgeChant = __webpack_require__(5);\n\t\n\tvar _ExsurgeDrawing = __webpack_require__(4);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } //\n\t// Author(s):\n\t// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n\t//\n\t// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a copy\n\t// of this software and associated documentation files (the \"Software\"), to deal\n\t// in the Software without restriction, including without limitation the rights\n\t// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t// copies of the Software, and to permit persons to whom the Software is\n\t// furnished to do so, subject to the following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included in\n\t// all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\t// THE SOFTWARE.\n\t//\n\t\n\tvar Accent = exports.Accent = function (_GlyphVisualizer) {\n\t  _inherits(Accent, _GlyphVisualizer);\n\t\n\t  function Accent(ctxt, note) {\n\t    var glyphCode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _ExsurgeDrawing.GlyphCode.AcuteAccent;\n\t\n\t    _classCallCheck(this, Accent);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Accent.__proto__ || Object.getPrototypeOf(Accent)).call(this, ctxt, glyphCode));\n\t\n\t    _this.note = note;\n\t    _this.positionHint = _ExsurgeDrawing.MarkingPositionHint.Above;\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Accent, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      this.bounds.x = this.note.bounds.x + this.bounds.width / 2; // center on the note itself\n\t\n\t      // this puts the acute accent either over the staff lines, or over the note if the\n\t      // note is above the staff lines\n\t      this.setStaffPosition(ctxt, Math.max(this.note.staffPosition + 1, 4));\n\t    }\n\t  }]);\n\t\n\t  return Accent;\n\t}(_ExsurgeDrawing.GlyphVisualizer);\n\t\n\t// for positioning markings on notes\n\t\n\t\n\tvar HorizontalEpisemaAlignment = exports.HorizontalEpisemaAlignment = {\n\t  Default: 0,\n\t  Left: 1,\n\t  Center: 2,\n\t  Right: 3\n\t};\n\t\n\t/*\n\t * HorizontalEpisema\n\t *\n\t * A horizontal episema marking is it's own visualizer (that is, it implements createSvgFragment)\n\t */\n\t\n\tvar HorizontalEpisema = exports.HorizontalEpisema = function (_ChantLayoutElement) {\n\t  _inherits(HorizontalEpisema, _ChantLayoutElement);\n\t\n\t  function HorizontalEpisema(note) {\n\t    _classCallCheck(this, HorizontalEpisema);\n\t\n\t    var _this2 = _possibleConstructorReturn(this, (HorizontalEpisema.__proto__ || Object.getPrototypeOf(HorizontalEpisema)).call(this));\n\t\n\t    _this2.note = note;\n\t\n\t    _this2.positionHint = _ExsurgeDrawing.MarkingPositionHint.Default;\n\t    _this2.terminating = false; // indicates if this episema should terminate itself or not\n\t    _this2.alignment = HorizontalEpisemaAlignment.Default;\n\t    return _this2;\n\t  }\n\t\n\t  _createClass(HorizontalEpisema, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      // following logic helps to keep the episemata away from staff lines if they get too close\n\t\n\t      var y = 0,\n\t          step;\n\t      var minDistanceAway = ctxt.staffInterval * 0.25; // min distance from neume\n\t      var glyphCode = this.note.glyphVisualizer.glyphCode;\n\t      var ledgerLine = this.note.neume.ledgerLines[0] || {};\n\t      var punctumInclinatumShorten = false;\n\t\n\t      if (glyphCode === _ExsurgeDrawing.GlyphCode.PunctumInclinatum) {\n\t        var notes = this.note.neume.notes,\n\t            index = notes.indexOf(this.note),\n\t            prevNote = notes[index - 1];\n\t        if (prevNote && prevNote.glyphVisualizer.glyphCode === _ExsurgeDrawing.GlyphCode.PunctumInclinatum && prevNote.staffPosition - this.note.staffPosition === 1) {\n\t          punctumInclinatumShorten = true;\n\t        }\n\t      }\n\t\n\t      if (this.positionHint === _ExsurgeDrawing.MarkingPositionHint.Below) {\n\t        y = this.note.bounds.bottom() + minDistanceAway; // the highest the line could be at\n\t        if (glyphCode === _ExsurgeDrawing.GlyphCode.None)\n\t          // correction for episema under the second note of a porrectus\n\t          y += ctxt.staffInterval / 2;\n\t        step = Math.ceil(y / ctxt.staffInterval);\n\t        // if there's enough space, center the episema between the punctum and the next staff line\n\t        if (step % 2 === 0) {\n\t          step = (step + 3 / 4 + (y - minDistanceAway) / ctxt.staffInterval) / 2;\n\t        } else {\n\t          // otherwise, find nearest acceptable third between staff lines (or staff line)\n\t          step = (Math.ceil(1.5 * y / ctxt.staffInterval - 0.5) * 2 + 1) / 3;\n\t\n\t          // if it's an odd step, that means we're on a staff line,\n\t          // so we shift to between the staff line\n\t          if (Math.abs(step) % 2 === 1) {\n\t            if (Math.abs(step) < 4 || ledgerLine.staffPosition === -step) {\n\t              step += 2 / 3;\n\t            } else {\n\t              // no ledger line, but we don't want the episema to be at exactly the same height the ledger line would occupy:\n\t              step += 1 / 3;\n\t            }\n\t          }\n\t        }\n\t      } else {\n\t        y = this.note.bounds.y - minDistanceAway; // the lowest the line could be at\n\t        step = Math.floor(y / ctxt.staffInterval);\n\t        // if there's enough space, center the episema between the punctum and the next staff line\n\t        if (step % 2 === 0) {\n\t          step = (step - 3 / 4 + (y + minDistanceAway) / ctxt.staffInterval) / 2;\n\t        } else {\n\t          // otherwise, find nearest acceptable third between staff lines (or staff line)\n\t          step = (Math.floor(1.5 * y / ctxt.staffInterval - 0.5) * 2 + 1) / 3;\n\t\n\t          // find nearest acceptable third between staff lines (or staff line)\n\t          if (Math.abs(step) % 2 === 1) {\n\t            // if it was a staff line, we need to adjust\n\t            if (Math.abs(step) < 4 || ledgerLine.staffPosition === -step) {\n\t              step -= 2 / 3;\n\t            } else {\n\t              // no ledger line, but we don't want the episema to be at exactly the same height the ledger line would occupy:\n\t              step -= 1 / 3;\n\t            }\n\t          }\n\t        }\n\t      }\n\t\n\t      y = step * ctxt.staffInterval;\n\t\n\t      var width = this.note.bounds.width;\n\t      var x = this.note.bounds.x;\n\t\n\t      // The porrectus requires special handling of the note width,\n\t      // otherwise the width is just that of the note itself\n\t      if (glyphCode === _ExsurgeDrawing.GlyphCode.Porrectus1 || glyphCode === _ExsurgeDrawing.GlyphCode.Porrectus2 || glyphCode === _ExsurgeDrawing.GlyphCode.Porrectus3 || glyphCode === _ExsurgeDrawing.GlyphCode.Porrectus4) width = ctxt.staffInterval;else if (glyphCode === _ExsurgeDrawing.GlyphCode.None) {\n\t        width = ctxt.staffInterval;\n\t        x -= width;\n\t      } else if (punctumInclinatumShorten) {\n\t        width *= 2 / 3;\n\t        x += 0.5 * width;\n\t      } else if (glyphCode === _ExsurgeDrawing.GlyphCode.PunctumInclinatumLiquescent) {\n\t        width *= 2 / 3;\n\t        x += 0.25 * width;\n\t      }\n\t\n\t      // also, the position hint can affect the x/width of the episema\n\t      if (this.alignment === HorizontalEpisemaAlignment.Left) {\n\t        width *= 0.8;\n\t      } else if (this.alignment === HorizontalEpisemaAlignment.Center) {\n\t        x += width * 0.1;\n\t        width *= 0.8;\n\t      } else if (this.alignment === HorizontalEpisemaAlignment.Right) {\n\t        x += width * 0.2;\n\t        width *= 0.8;\n\t      }\n\t\n\t      this.bounds.x = x;\n\t      this.bounds.y = y - ctxt.episemaLineWeight / 2;\n\t      this.bounds.width = width;\n\t      this.bounds.height = ctxt.episemaLineWeight;\n\t\n\t      this.origin.x = 0;\n\t      this.origin.y = 0;\n\t    }\n\t  }, {\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      var canvasCtxt = ctxt.canvasCtxt;\n\t\n\t      canvasCtxt.fillStyle = ctxt.neumeLineColor;\n\t\n\t      canvasCtxt.fillRect(this.bounds.x, this.bounds.y, this.bounds.width, this.bounds.height);\n\t    }\n\t  }, {\n\t    key: \"getSvgProps\",\n\t    value: function getSvgProps(ctxt) {\n\t      return {\n\t        x: this.bounds.x,\n\t        y: this.bounds.y,\n\t        width: this.bounds.width,\n\t        height: this.bounds.height,\n\t        fill: ctxt.neumeLineColor,\n\t        class: \"horizontalEpisema\"\n\t      };\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      return _ExsurgeDrawing.QuickSvg.createNode(\"rect\", this.getSvgProps(ctxt));\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      return _ExsurgeDrawing.QuickSvg.createSvgTree(\"rect\", this.getSvgProps(ctxt));\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      return _ExsurgeDrawing.QuickSvg.createFragment(\"rect\", this.getSvgProps(ctxt));\n\t    }\n\t  }]);\n\t\n\t  return HorizontalEpisema;\n\t}(_ExsurgeDrawing.ChantLayoutElement);\n\t\n\t/*\n\t * Ictus\n\t */\n\t\n\t\n\tvar Ictus = exports.Ictus = function (_GlyphVisualizer2) {\n\t  _inherits(Ictus, _GlyphVisualizer2);\n\t\n\t  function Ictus(ctxt, note) {\n\t    _classCallCheck(this, Ictus);\n\t\n\t    var _this3 = _possibleConstructorReturn(this, (Ictus.__proto__ || Object.getPrototypeOf(Ictus)).call(this, ctxt, _ExsurgeDrawing.GlyphCode.VerticalEpisemaAbove));\n\t\n\t    _this3.note = note;\n\t    _this3.positionHint = _ExsurgeDrawing.MarkingPositionHint.Default;\n\t    return _this3;\n\t  }\n\t\n\t  _createClass(Ictus, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      var glyphCode = this.note.glyphVisualizer.glyphCode;\n\t      // we have to place the ictus further from the note in some cases to avoid a collision with an episema on the same note:\n\t      var positionHint = this.positionHint || _ExsurgeDrawing.MarkingPositionHint.Below;\n\t      var staffPosition = this.note.staffPosition + (positionHint === _ExsurgeDrawing.MarkingPositionHint.Above ? 1 : -1);\n\t      var collisionWithEpisema = this.note.episemata.length > 0 && (this.note.episemata[0].positionHint || _ExsurgeDrawing.MarkingPositionHint.Above) === positionHint;\n\t      var horizontalOffset;\n\t      var verticalOffset = 1;\n\t      var shortOffset = -0.2;\n\t      var extraOffset = 0;\n\t      var collisionWithStaffLine = staffPosition % 2 && (Math.abs(staffPosition) < 4 || (this.note.neume.ledgerLines[0] || {}).staffPosition === staffPosition);\n\t\n\t      // The porrectus requires special handling of the note width,\n\t      // otherwise the width is just that of the note itself\n\t      if (glyphCode === _ExsurgeDrawing.GlyphCode.Porrectus1 || glyphCode === _ExsurgeDrawing.GlyphCode.Porrectus2 || glyphCode === _ExsurgeDrawing.GlyphCode.Porrectus3 || glyphCode === _ExsurgeDrawing.GlyphCode.Porrectus4) horizontalOffset = ctxt.staffInterval / 2;else if (glyphCode === _ExsurgeDrawing.GlyphCode.None) {\n\t        horizontalOffset = -ctxt.staffInterval / 2;\n\t      } else {\n\t        horizontalOffset = this.note.bounds.width / 2;\n\t        if (glyphCode === _ExsurgeDrawing.GlyphCode.PunctumInclinatum && !collisionWithStaffLine && !collisionWithEpisema) {\n\t          extraOffset = 0.3;\n\t        }\n\t      }\n\t\n\t      if (this.positionHint === _ExsurgeDrawing.MarkingPositionHint.Above) {\n\t        glyphCode = _ExsurgeDrawing.GlyphCode.VerticalEpisemaAbove;\n\t        verticalOffset *= -1;\n\t      } else {\n\t        glyphCode = _ExsurgeDrawing.GlyphCode.VerticalEpisemaBelow;\n\t      }\n\t      if (collisionWithEpisema) {\n\t        extraOffset = 0.4;\n\t      }\n\t      verticalOffset *= ctxt.staffInterval * (extraOffset + (collisionWithStaffLine ? 0.3 : shortOffset));\n\t\n\t      this.setGlyph(ctxt, glyphCode);\n\t      this.setStaffPosition(ctxt, staffPosition);\n\t\n\t      this.bounds.x = this.note.bounds.x + horizontalOffset - this.origin.x;\n\t      this.bounds.y += verticalOffset;\n\t    }\n\t  }]);\n\t\n\t  return Ictus;\n\t}(_ExsurgeDrawing.GlyphVisualizer);\n\t\n\t/*\n\t * Mora\n\t */\n\t\n\t\n\tvar Mora = exports.Mora = function (_GlyphVisualizer3) {\n\t  _inherits(Mora, _GlyphVisualizer3);\n\t\n\t  function Mora(ctxt, note) {\n\t    _classCallCheck(this, Mora);\n\t\n\t    var _this4 = _possibleConstructorReturn(this, (Mora.__proto__ || Object.getPrototypeOf(Mora)).call(this, ctxt, _ExsurgeDrawing.GlyphCode.Mora));\n\t\n\t    _this4.note = note;\n\t    _this4.positionHint = _ExsurgeDrawing.MarkingPositionHint.Default;\n\t    _this4.horizontalOffset = ctxt.staffInterval / 2 + _this4.origin.x;\n\t    return _this4;\n\t  }\n\t\n\t  _createClass(Mora, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      this.setGlyph(ctxt, this.glyphCode);\n\t      this.horizontalOffset = ctxt.staffInterval / 2 + this.origin.x;\n\t      var staffPosition = this.note.staffPosition;\n\t\n\t      this.setStaffPosition(ctxt, staffPosition);\n\t\n\t      var verticalOffset = 0;\n\t      // First, we need to find the next note in the neume.\n\t      var noteIndex = this.note.neume.notes.indexOf(this.note);\n\t      var nextNote;\n\t      if (noteIndex >= 0) {\n\t        ++noteIndex;\n\t        if (this.note.neume.notes.length > noteIndex) {\n\t          nextNote = this.note.neume.notes[noteIndex];\n\t          if (nextNote.morae && nextNote.morae.length && this.note.neume.notes.length === noteIndex + 1) {\n\t            // this note is the second to last in its neume, and the last note also has a mora\n\t            this.horizontalOffset += nextNote.bounds.right() - this.note.bounds.right();\n\t          } else if (nextNote.bounds.right() > this.note.bounds.right()) {\n\t            // center the dot over the following note.\n\t            this.horizontalOffset = (nextNote.bounds.right() - this.note.bounds.right() - this.bounds.right()) / 2;\n\t          } else {\n\t            nextNote = null;\n\t          }\n\t        } else if (this.note.neume.notes.length === noteIndex) {\n\t          // this note is the last in its neume:\n\t          if (this.note.neume.trailingSpace === 0) {\n\t            // if this was the last note in its neume, we only care about the next note if there is no trailing space at the end of this neume.\n\t            var notationIndex = this.note.neume.score.notations.indexOf(this.note.neume);\n\t            if (notationIndex >= 0) {\n\t              var nextNotation = this.note.neume.score.notations[notationIndex + 1];\n\t              if (nextNotation && nextNotation.notes) {\n\t                nextNote = nextNotation.notes[0];\n\t              }\n\t            }\n\t          } else if (this.note.shape !== _ExsurgeChant.NoteShape.Inclinatum) {\n\t            this.note.neume.calculatedTrailingSpace += this.origin.x;\n\t          }\n\t        }\n\t      }\n\t\n\t      if (this.positionHint === _ExsurgeDrawing.MarkingPositionHint.Above) {\n\t        if (staffPosition % 2 === 0) verticalOffset -= ctxt.staffInterval * 1.75;else verticalOffset -= ctxt.staffInterval * 0.75;\n\t      } else if (this.positionHint === _ExsurgeDrawing.MarkingPositionHint.Below) {\n\t        if (staffPosition % 2 === 0) verticalOffset += ctxt.staffInterval * 1.75;else verticalOffset += ctxt.staffInterval * 0.75;\n\t      } else {\n\t        if (staffPosition % 2 === 0) {\n\t          // if the note is in a space and followed by a note on the line below, we often want to move the mora dot up slightly so that it is centered\n\t          // between the top of the note's space and the top of the following note.\n\t          if (nextNote && nextNote.staffPosition === staffPosition - 1) {\n\t            verticalOffset -= ctxt.staffInterval * 0.25;\n\t          }\n\t        } else {\n\t          verticalOffset -= ctxt.staffInterval * 0.75;\n\t        }\n\t      }\n\t      this.bounds.x = this.horizontalOffset + this.note.bounds.right();\n\t      this.bounds.y += verticalOffset;\n\t    }\n\t  }]);\n\t\n\t  return Mora;\n\t}(_ExsurgeDrawing.GlyphVisualizer);\n\t\n\t// indicates the shape of the brace\n\t\n\t\n\tvar BraceShape = exports.BraceShape = {\n\t  RoundBrace: 0,\n\t  CurlyBrace: 1,\n\t  AccentedCurlyBrace: 2\n\t};\n\t\n\t// indicates how the brace is alignerd to the note to which it's connected\n\tvar BraceAttachment = exports.BraceAttachment = {\n\t  Left: 0,\n\t  Right: 1\n\t};\n\t\n\tvar BracePoint = exports.BracePoint = function (_ChantLayoutElement2) {\n\t  _inherits(BracePoint, _ChantLayoutElement2);\n\t\n\t  function BracePoint(note, isAbove, shape, attachment) {\n\t    _classCallCheck(this, BracePoint);\n\t\n\t    var _this5 = _possibleConstructorReturn(this, (BracePoint.__proto__ || Object.getPrototypeOf(BracePoint)).call(this));\n\t\n\t    _this5.note = note;\n\t    _this5.isAbove = isAbove;\n\t    _this5.shape = shape;\n\t    _this5.attachment = attachment;\n\t    return _this5;\n\t  }\n\t\n\t  _createClass(BracePoint, [{\n\t    key: \"getAttachmentX\",\n\t    value: function getAttachmentX(note) {\n\t      if (!note) note = this.note;\n\t      if (this.attachment === BraceAttachment.Left) return (note.neume ? note.neume.bounds.x : 0) + note.bounds.x;else return (note.neume ? note.neume.bounds.x : 0) + note.bounds.right();\n\t    }\n\t  }]);\n\t\n\t  return BracePoint;\n\t}(_ExsurgeDrawing.ChantLayoutElement);\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Virgula = exports.Accidental = exports.AccidentalType = exports.DoubleBar = exports.DominicanBar = exports.InsertionCursor = exports.FullBar = exports.HalfBar = exports.QuarterBar = exports.Divider = exports.Custos = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\tvar _ExsurgeCore = __webpack_require__(1);\n\t\n\tvar _ExsurgeDrawing = __webpack_require__(4);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } //\n\t// Author(s):\n\t// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n\t//\n\t// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a copy\n\t// of this software and associated documentation files (the \"Software\"), to deal\n\t// in the Software without restriction, including without limitation the rights\n\t// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t// copies of the Software, and to permit persons to whom the Software is\n\t// furnished to do so, subject to the following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included in\n\t// all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\t// THE SOFTWARE.\n\t//\n\t\n\t/*\n\t *\n\t */\n\tvar Custos = exports.Custos = function (_ChantNotationElement) {\n\t  _inherits(Custos, _ChantNotationElement);\n\t\n\t  // if auto is true, then the custos will automatically try to determine it's height based on\n\t  // subsequent notations\n\t  function Custos() {\n\t    var auto = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\t\n\t    _classCallCheck(this, Custos);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Custos.__proto__ || Object.getPrototypeOf(Custos)).call(this));\n\t\n\t    _this.auto = auto;\n\t    _this.staffPosition = 0; // default sane value\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Custos, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Custos.prototype.__proto__ || Object.getPrototypeOf(Custos.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      if (this.auto) {\n\t        var neume = ctxt.findNextNeume();\n\t\n\t        if (neume) this.staffPosition = ctxt.activeClef.pitchToStaffPosition(neume.notes[0].pitch);\n\t\n\t        // in case there was a weird fa/do clef change, let's sanitize the staffPosition by making sure it is\n\t        // within reasonable bounds\n\t        while (this.staffPosition < -6) {\n\t          this.staffPosition += 7;\n\t        }while (this.staffPosition > 6) {\n\t          this.staffPosition -= 7;\n\t        }\n\t      }\n\t\n\t      var glyph = new _ExsurgeDrawing.GlyphVisualizer(ctxt, Custos.getGlyphCode(this.staffPosition));\n\t      glyph.setStaffPosition(ctxt, this.staffPosition);\n\t      this.addVisualizer(glyph);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t\n\t    // called when layout has changed and our dependencies are no longer good\n\t\n\t  }, {\n\t    key: \"resetDependencies\",\n\t    value: function resetDependencies() {\n\t      // we only need to resolve new dependencies if we're an automatic custos\n\t      if (this.auto) this.needsLayout = true;\n\t    }\n\t  }], [{\n\t    key: \"getGlyphCode\",\n\t    value: function getGlyphCode(staffPosition) {\n\t      if (staffPosition <= 2) {\n\t        // ascending custodes\n\t        if (Math.abs(staffPosition) % 2 === 1) return _ExsurgeDrawing.GlyphCode.CustosLong;else return _ExsurgeDrawing.GlyphCode.CustosShort;\n\t      } else {\n\t        // descending custodes\n\t        if (Math.abs(staffPosition) % 2 === 1) return _ExsurgeDrawing.GlyphCode.CustosDescLong;else return _ExsurgeDrawing.GlyphCode.CustosDescShort;\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return Custos;\n\t}(_ExsurgeDrawing.ChantNotationElement);\n\t\n\t/*\n\t * Divider\n\t */\n\t\n\t\n\tvar Divider = exports.Divider = function (_ChantNotationElement2) {\n\t  _inherits(Divider, _ChantNotationElement2);\n\t\n\t  function Divider() {\n\t    _classCallCheck(this, Divider);\n\t\n\t    var _this2 = _possibleConstructorReturn(this, (Divider.__proto__ || Object.getPrototypeOf(Divider)).call(this));\n\t\n\t    _this2.isDivider = true;\n\t    _this2.resetsAccidentals = true;\n\t    return _this2;\n\t  }\n\t\n\t  return Divider;\n\t}(_ExsurgeDrawing.ChantNotationElement);\n\t\n\t/*\n\t * QuarterBar\n\t */\n\t\n\t\n\tvar QuarterBar = exports.QuarterBar = function (_Divider) {\n\t  _inherits(QuarterBar, _Divider);\n\t\n\t  function QuarterBar() {\n\t    _classCallCheck(this, QuarterBar);\n\t\n\t    return _possibleConstructorReturn(this, (QuarterBar.__proto__ || Object.getPrototypeOf(QuarterBar)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(QuarterBar, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(QuarterBar.prototype.__proto__ || Object.getPrototypeOf(QuarterBar.prototype), \"performLayout\", this).call(this, ctxt);\n\t      this.addVisualizer(new _ExsurgeDrawing.DividerLineVisualizer(ctxt, 2, 4, this));\n\t\n\t      this.origin.x = this.bounds.width / 2;\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return QuarterBar;\n\t}(Divider);\n\t\n\t/*\n\t * HalfBar\n\t */\n\t\n\t\n\tvar HalfBar = exports.HalfBar = function (_Divider2) {\n\t  _inherits(HalfBar, _Divider2);\n\t\n\t  function HalfBar() {\n\t    _classCallCheck(this, HalfBar);\n\t\n\t    return _possibleConstructorReturn(this, (HalfBar.__proto__ || Object.getPrototypeOf(HalfBar)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(HalfBar, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(HalfBar.prototype.__proto__ || Object.getPrototypeOf(HalfBar.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      this.addVisualizer(new _ExsurgeDrawing.DividerLineVisualizer(ctxt, -2, 2, this));\n\t\n\t      this.origin.x = this.bounds.width / 2;\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return HalfBar;\n\t}(Divider);\n\t\n\t/*\n\t * FullBar\n\t */\n\t\n\t\n\tvar FullBar = exports.FullBar = function (_Divider3) {\n\t  _inherits(FullBar, _Divider3);\n\t\n\t  function FullBar() {\n\t    _classCallCheck(this, FullBar);\n\t\n\t    return _possibleConstructorReturn(this, (FullBar.__proto__ || Object.getPrototypeOf(FullBar)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(FullBar, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(FullBar.prototype.__proto__ || Object.getPrototypeOf(FullBar.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      this.addVisualizer(new _ExsurgeDrawing.DividerLineVisualizer(ctxt, -3, 3, this));\n\t\n\t      this.origin.x = this.bounds.width / 2;\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return FullBar;\n\t}(Divider);\n\t\n\t/*\n\t * Insertion Cursor\n\t */\n\t\n\t\n\tvar InsertionCursor = exports.InsertionCursor = function (_Divider4) {\n\t  _inherits(InsertionCursor, _Divider4);\n\t\n\t  function InsertionCursor() {\n\t    _classCallCheck(this, InsertionCursor);\n\t\n\t    return _possibleConstructorReturn(this, (InsertionCursor.__proto__ || Object.getPrototypeOf(InsertionCursor)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(InsertionCursor, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(InsertionCursor.prototype.__proto__ || Object.getPrototypeOf(InsertionCursor.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      this.addVisualizer(new _ExsurgeDrawing.DividerLineVisualizer(ctxt, -4, 4));\n\t\n\t      this.origin.x = this.bounds.width / 2;\n\t      this.bounds.width = 0;\n\t      this.bounds.height = 0;\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return InsertionCursor;\n\t}(Divider);\n\t\n\t/*\n\t * DominicanBar\n\t */\n\t\n\t\n\tvar DominicanBar = exports.DominicanBar = function (_Divider5) {\n\t  _inherits(DominicanBar, _Divider5);\n\t\n\t  function DominicanBar(staffPosition) {\n\t    _classCallCheck(this, DominicanBar);\n\t\n\t    var _this7 = _possibleConstructorReturn(this, (DominicanBar.__proto__ || Object.getPrototypeOf(DominicanBar)).call(this));\n\t\n\t    staffPosition--;\n\t    var parity = staffPosition % 2;\n\t\n\t    _this7.staffPosition = staffPosition - 2 * parity;\n\t    return _this7;\n\t  }\n\t\n\t  _createClass(DominicanBar, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(DominicanBar.prototype.__proto__ || Object.getPrototypeOf(DominicanBar.prototype), \"performLayout\", this).call(this, ctxt);\n\t      this.addVisualizer(new _ExsurgeDrawing.DividerLineVisualizer(ctxt, this.staffPosition - 3, this.staffPosition, this));\n\t\n\t      this.origin.x = this.bounds.width / 2;\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return DominicanBar;\n\t}(Divider);\n\t\n\t/*\n\t * DoubleBar\n\t */\n\t\n\t\n\tvar DoubleBar = exports.DoubleBar = function (_Divider6) {\n\t  _inherits(DoubleBar, _Divider6);\n\t\n\t  function DoubleBar() {\n\t    _classCallCheck(this, DoubleBar);\n\t\n\t    return _possibleConstructorReturn(this, (DoubleBar.__proto__ || Object.getPrototypeOf(DoubleBar)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(DoubleBar, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(DoubleBar.prototype.__proto__ || Object.getPrototypeOf(DoubleBar.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var line0 = new _ExsurgeDrawing.DividerLineVisualizer(ctxt, -3, 3, this);\n\t      line0.bounds.x = 0;\n\t      this.addVisualizer(line0);\n\t\n\t      var line1 = new _ExsurgeDrawing.DividerLineVisualizer(ctxt, -3, 3, this);\n\t      line1.bounds.x = ctxt.intraNeumeSpacing * 2 - line1.bounds.width;\n\t      this.addVisualizer(line1);\n\t\n\t      this.origin.x = this.bounds.width / 2;\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return DoubleBar;\n\t}(Divider);\n\t\n\tvar AccidentalType = exports.AccidentalType = {\n\t  Flat: -1,\n\t  Natural: 0,\n\t  Sharp: 1\n\t};\n\t\n\t/*\n\t * Accidental\n\t */\n\t\n\tvar Accidental = exports.Accidental = function (_ChantNotationElement3) {\n\t  _inherits(Accidental, _ChantNotationElement3);\n\t\n\t  function Accidental(staffPosition, accidentalType) {\n\t    _classCallCheck(this, Accidental);\n\t\n\t    var _this9 = _possibleConstructorReturn(this, (Accidental.__proto__ || Object.getPrototypeOf(Accidental)).call(this));\n\t\n\t    _this9.isAccidental = true;\n\t    _this9.keepWithNext = true; // accidentals should always stay connected...\n\t\n\t    _this9.staffPosition = staffPosition;\n\t    _this9.accidentalType = accidentalType;\n\t    return _this9;\n\t  }\n\t\n\t  _createClass(Accidental, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Accidental.prototype.__proto__ || Object.getPrototypeOf(Accidental.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      this.addVisualizer(this.createGlyphVisualizer(ctxt));\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t\n\t    // creation of the glyph visualizer is refactored out or performLayout\n\t    // so that clefs can use the same logic for their accidental glyph\n\t\n\t  }, {\n\t    key: \"createGlyphVisualizer\",\n\t    value: function createGlyphVisualizer(ctxt) {\n\t      var glyphCode = _ExsurgeDrawing.GlyphCode.Flat;\n\t\n\t      switch (this.accidentalType) {\n\t        case AccidentalType.Natural:\n\t          glyphCode = _ExsurgeDrawing.GlyphCode.Natural;\n\t          break;\n\t        case AccidentalType.Sharp:\n\t          glyphCode = _ExsurgeDrawing.GlyphCode.Sharp;\n\t          break;\n\t        default:\n\t          glyphCode = _ExsurgeDrawing.GlyphCode.Flat;\n\t          break;\n\t      }\n\t\n\t      var glyph = new _ExsurgeDrawing.GlyphVisualizer(ctxt, glyphCode);\n\t      glyph.setStaffPosition(ctxt, this.staffPosition);\n\t\n\t      return glyph;\n\t    }\n\t  }, {\n\t    key: \"adjustStep\",\n\t    value: function adjustStep(step) {\n\t      switch (this.accidentalType) {\n\t        case AccidentalType.Flat:\n\t          if (step === _ExsurgeCore.Step.Ti) return _ExsurgeCore.Step.Te;\n\t          if (step === _ExsurgeCore.Step.Mi) return _ExsurgeCore.Step.Me;\n\t          break;\n\t        case AccidentalType.Sharp:\n\t          if (step === _ExsurgeCore.Step.Do) return _ExsurgeCore.Step.Du;\n\t          if (step === _ExsurgeCore.Step.Fa) return _ExsurgeCore.Step.Fu;\n\t          break;\n\t        case AccidentalType.Natural:\n\t          if (step === _ExsurgeCore.Step.Te) return _ExsurgeCore.Step.Ti;\n\t          if (step === _ExsurgeCore.Step.Me) return _ExsurgeCore.Step.Mi;\n\t          if (step === _ExsurgeCore.Step.Du) return _ExsurgeCore.Step.Do;\n\t          if (step === _ExsurgeCore.Step.Fu) return _ExsurgeCore.Step.Fa;\n\t          break;\n\t      }\n\t\n\t      // no adjustment needed\n\t      return step;\n\t    }\n\t  }, {\n\t    key: \"applyToPitch\",\n\t    value: function applyToPitch(pitch) {\n\t      // no adjusment needed\n\t      if (this.pitch.octave !== pitch.octave) return;\n\t\n\t      pitch.step = this.adjustStep(pitch.step);\n\t    }\n\t  }]);\n\t\n\t  return Accidental;\n\t}(_ExsurgeDrawing.ChantNotationElement);\n\t\n\t/*\n\t * Virgula\n\t */\n\t\n\t\n\tvar Virgula = exports.Virgula = function (_Divider7) {\n\t  _inherits(Virgula, _Divider7);\n\t\n\t  function Virgula() {\n\t    _classCallCheck(this, Virgula);\n\t\n\t    // unlike other dividers a virgula does not reset accidentals\n\t    var _this10 = _possibleConstructorReturn(this, (Virgula.__proto__ || Object.getPrototypeOf(Virgula)).call(this));\n\t\n\t    _this10.resetsAccidentals = false;\n\t\n\t    // the staff position of the virgula is customizable, so that it\n\t    // can be placed on different lines (top or bottom) depending on the\n\t    // notation tradition of what is being notated (e.g., Benedictine has it\n\t    //  on top line, Norbertine at the bottom)\n\t    _this10.staffPosition = 3;\n\t    return _this10;\n\t  }\n\t\n\t  _createClass(Virgula, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Virgula.prototype.__proto__ || Object.getPrototypeOf(Virgula.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var glyph = new _ExsurgeDrawing.GlyphVisualizer(ctxt, _ExsurgeDrawing.GlyphCode.Virgula);\n\t      glyph.setStaffPosition(ctxt, this.staffPosition);\n\t\n\t      this.addVisualizer(glyph);\n\t\n\t      this.origin.x = this.bounds.width / 2;\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Virgula;\n\t}(Divider);\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Gabc = exports.GabcHeader = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); //\n\t// Author(s):\n\t// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n\t//\n\t// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a copy\n\t// of this software and associated documentation files (the \"Software\"), to deal\n\t// in the Software without restriction, including without limitation the rights\n\t// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t// copies of the Software, and to permit persons to whom the Software is\n\t// furnished to do so, subject to the following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included in\n\t// all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\t// THE SOFTWARE.\n\t//\n\t\n\tvar _ExsurgeCore = __webpack_require__(1);\n\t\n\tvar _ExsurgeDrawing = __webpack_require__(4);\n\t\n\tvar _ExsurgeChant = __webpack_require__(5);\n\t\n\tvar _ExsurgeChantMarkings = __webpack_require__(7);\n\t\n\tvar Markings = _interopRequireWildcard(_ExsurgeChantMarkings);\n\t\n\tvar _ExsurgeChantSigns = __webpack_require__(8);\n\t\n\tvar Signs = _interopRequireWildcard(_ExsurgeChantSigns);\n\t\n\tvar _ExsurgeChantNeumes = __webpack_require__(10);\n\t\n\tvar Neumes = _interopRequireWildcard(_ExsurgeChantNeumes);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t// reusable reg exps\n\tvar __syllablesRegex = /(?=\\S)((?:<v>[\\s\\S]*<\\/v>|[^(])*)(?:\\(?([^)]*)\\)?)?/g;\n\tvar __altTranslationRegex = /<alt>(.*?)<\\/alt>|\\[(alt:)?(.*?)\\]/g;\n\t\n\tvar __notationsRegex = /z0|z|Z|::|:|[,;][1-6]?|`|[cf][1-4]|cb[1-4]|\\/+| |\\!|-?[a-mA-M][oOwWvVrRsxy#~\\+><_\\.'012345]*(?:\\[[^\\]]*\\]?)*|\\{([^}]+)\\}?/g;\n\tvar __notationsRegex_group_insideBraces = 1;\n\t\n\tvar __bracketedCommandRegex = /^([a-z]+):(.*)/;\n\t\n\t// for the brace string inside of [ and ] in notation data\n\t// the capturing groups are:\n\t//  1. o or u, to indicate over or under\n\t//  2. b, cb, or cba, to indicate the brace type\n\t//  3. 0 or 1 to indicate the attachment point\n\t//  4. { or } to indicate opening/closing (this group will be null if the metric version is used)\n\t//  5. a float indicating the millimeter length of the brace (not supported yet)\n\tvar __braceSpecRegex = /([ou])(b|cb|cba):([01])(?:([{}])|;(\\d*(?:\\.\\d+)?)mm)/;\n\t\n\tvar TrailingSpaceForAccidental = function TrailingSpaceForAccidental(ctxt) {\n\t  return ctxt.intraNeumeSpacing * ctxt.accidentalSpaceMultiplier;\n\t};\n\tvar TrailingSpaceMultiple = function TrailingSpaceMultiple(multiplier) {\n\t  return function (ctxt) {\n\t    return ctxt.intraNeumeSpacing * multiplier;\n\t  };\n\t};\n\t\n\tvar regexHeaderEnd = /(?:^|\\n)%%\\s?\\n/;\n\tvar regexHeaderLine = /^([\\w-_.]+):\\s*((?:[^;\\r\\n]|;[ \\t])*)(?:;|$)/i;\n\tvar regexHeaderComment = /^%.*/;\n\t\n\tvar GabcHeader = exports.GabcHeader = function () {\n\t  _createClass(GabcHeader, null, [{\n\t    key: \"getLength\",\n\t    value: function getLength(gabc) {\n\t      var match = gabc.match(regexHeaderEnd);\n\t      return match ? match.index + match[0].length : 0;\n\t    }\n\t  }]);\n\t\n\t  function GabcHeader(text) {\n\t    _classCallCheck(this, GabcHeader);\n\t\n\t    if (typeof text !== \"string\") text = \"\";\n\t    this.comments = [];\n\t    this.cValues = {};\n\t    this.original = \"\";\n\t    var match = text.match(regexHeaderEnd);\n\t    if (match) {\n\t      var txtHeader = this.original = text.slice(0, match.index + match[0].length);\n\t      var lines = txtHeader.split(/\\r?\\n/g);\n\t      for (var i = 0; i < lines.length; ++i) {\n\t        var line = lines[i],\n\t            _match = regexHeaderLine.exec(line);\n\t        if (_match) {\n\t          var key = _match[1].replace(/-([a-z])/g, function (a, letter) {\n\t            return letter.toUpperCase();\n\t          });\n\t          if (this[_match[1]]) {\n\t            var arrayName = _match[1] + \"Array\";\n\t            if (!this[arrayName]) {\n\t              this[arrayName] = [this[_match[1]]];\n\t            }\n\t            this[arrayName].push(_match[2]);\n\t          } else {\n\t            this[_match[1]] = _match[2];\n\t          }\n\t          if (key !== _match[1]) this[key] = this[_match[1]];\n\t        } else if (_match = regexHeaderComment.exec(line)) {\n\t          if (line !== \"%%\") {\n\t            _match = regexHeaderLine.exec(line.slice(1));\n\t            if (_match) {\n\t              var _key = _match[1].replace(/-([a-z])/g, function (a, letter) {\n\t                return letter.toUpperCase();\n\t              });\n\t              this.cValues[_match[1]] = _match[2];\n\t              if (_key !== _match[1]) this.cValues[_key] = _match[2];\n\t            } else {\n\t              this.comments[i] = line;\n\t            }\n\t          }\n\t        }\n\t      }\n\t    }\n\t  }\n\t\n\t  _createClass(GabcHeader, [{\n\t    key: \"toString\",\n\t    value: function toString() {\n\t      var result = [];\n\t      for (var key in this) {\n\t        if (typeof this[key] !== \"string\" || /^(length|original|comments|cValues)$/.test(key)) {\n\t          continue;\n\t        }\n\t        var alternateKey = key.replace(/[A-Z]/g, function (letter) {\n\t          return \"-\" + letter.toLowerCase();\n\t        });\n\t        if (alternateKey !== key && alternateKey in this) continue;\n\t        var array = this[key + \"Array\"];\n\t        if (array) {\n\t          for (var i = 0; i < array.length; ++i) {\n\t            result.push(key + \": \" + array[i] + \";\");\n\t          }\n\t        } else {\n\t          result.push(key + \": \" + this[key] + \";\");\n\t        }\n\t      }\n\t      for (var _key2 in this.cValues) {\n\t        if (_key2.length === 0 || !this.cValues.hasOwnProperty(_key2)) continue;\n\t        result.push(\"%\" + _key2 + \": \" + this.cValues[_key2] + \";\");\n\t      }\n\t      for (var _i in this.comments) {\n\t        if (!this.comments.hasOwnProperty(_i)) continue;\n\t        try {\n\t          result.splice(_i, 0, this.comments[_i]);\n\t        } catch (e) {\n\t          console.warn(e);\n\t        }\n\t      }\n\t      return result.join(\"\\n\") + \"\\n%%\\n\";\n\t    }\n\t  }]);\n\t\n\t  return GabcHeader;\n\t}();\n\t\n\tvar elementCountForNotations = function elementCountForNotations(items) {\n\t  return items.reduce(function (sum, item) {\n\t    return sum + (item.notes ? item.notes.length : 1);\n\t  }, 0);\n\t};\n\t\n\tvar Gabc = exports.Gabc = function () {\n\t  function Gabc() {\n\t    _classCallCheck(this, Gabc);\n\t  }\n\t\n\t  _createClass(Gabc, null, [{\n\t    key: \"createMappingsFromSource\",\n\t\n\t    // takes gabc source code (without the header info) and returns an array\n\t    // of ChantMappings describing the chant. A chant score can then be created\n\t    // fron the chant mappings and later updated via updateMappings() if need\n\t    // be...\n\t    value: function createMappingsFromSource(ctxt, gabcSource) {\n\t      var headerLength = GabcHeader.getLength(gabcSource);\n\t      gabcSource = gabcSource.slice(headerLength);\n\t      var words = this.splitWords(gabcSource);\n\t\n\t      // set the default clef\n\t      ctxt.activeClef = _ExsurgeChant.Clef.default();\n\t\n\t      var mappings = this.createMappingsFromWords(ctxt, words, function (clef) {\n\t        return ctxt.activeClef = clef;\n\t      });\n\t\n\t      // always set the last notation to have a trailingSpace of 0. This makes layout for the last chant line simpler\n\t      if (mappings.length > 0 && mappings[mappings.length - 1].notations.length > 0) mappings[mappings.length - 1].notations[mappings[mappings.length - 1].notations.length - 1].trailingSpace = 0;\n\t\n\t      return mappings;\n\t    }\n\t\n\t    // A simple general purpose diff algorithm adapted here for comparing\n\t    // an array of existing mappings with an updated list of gabc words.\n\t    // note before is an array of mappings, and after is an array of strings\n\t    // (gabc words).\n\t    //\n\t    // This is definitely not the most effecient diff algorithm, but for our\n\t    // limited needs and source size it seems to work just fine...\n\t    //\n\t    // code is adapted from: https://github.com/paulgb/simplediff\n\t    //\n\t    // Returns:\n\t    //   A list of pairs, with the first part of the pair being one of three\n\t    //   strings ('-', '+', '=') and the second part being a list of values from\n\t    //   the original before and/or after lists. The first part of the pair\n\t    //   corresponds to whether the list of values is a deletion, insertion, or\n\t    //   unchanged, respectively.\n\t\n\t  }, {\n\t    key: \"diffDescriptorsAndNewWords\",\n\t    value: function diffDescriptorsAndNewWords(before, after) {\n\t      // Create a map from before values to their indices\n\t      var oldIndexMap = {},\n\t          i;\n\t      for (i = 0; i < before.length; i++) {\n\t        oldIndexMap[before[i].source] = oldIndexMap[before[i].source] || [];\n\t        oldIndexMap[before[i].source].push(i);\n\t      }\n\t\n\t      var overlap = [],\n\t          startOld,\n\t          startNew,\n\t          subLength,\n\t          inew;\n\t\n\t      startOld = startNew = subLength = 0;\n\t\n\t      for (inew = 0; inew < after.length; inew++) {\n\t        var _overlap = [];\n\t        oldIndexMap[after[inew]] = oldIndexMap[after[inew]] || [];\n\t        for (i = 0; i < oldIndexMap[after[inew]].length; i++) {\n\t          var iold = oldIndexMap[after[inew]][i];\n\t          // now we are considering all values of val such that\n\t          // `before[iold] == after[inew]`\n\t          _overlap[iold] = (iold && overlap[iold - 1] || 0) + 1;\n\t          if (_overlap[iold] > subLength) {\n\t            // this is the largest substring seen so far, so store its indices\n\t            subLength = _overlap[iold];\n\t            startOld = iold - subLength + 1;\n\t            startNew = inew - subLength + 1;\n\t          }\n\t        }\n\t        overlap = _overlap;\n\t      }\n\t\n\t      if (subLength === 0) {\n\t        // If no common substring is found, we return an insert and delete...\n\t        var result = [];\n\t\n\t        if (before.length) result.push([\"-\", before]);\n\t\n\t        if (after.length) result.push([\"+\", after]);\n\t\n\t        return result;\n\t      }\n\t\n\t      // ...otherwise, the common substring is unchanged and we recursively\n\t      // diff the text before and after that substring\n\t      return [].concat(this.diffDescriptorsAndNewWords(before.slice(0, startOld), after.slice(0, startNew)), [[\"=\", after.slice(startNew, startNew + subLength)]], this.diffDescriptorsAndNewWords(before.slice(startOld + subLength), after.slice(startNew + subLength)));\n\t    }\n\t\n\t    // this function essentially performs and applies a rudimentary diff between a\n\t    // previously parsed set of mappings and between a new gabc source text.\n\t    // the mappings array passed in is changed in place to be updated from the\n\t    // new source\n\t\n\t  }, {\n\t    key: \"updateMappingsFromSource\",\n\t    value: function updateMappingsFromSource(ctxt, mappings, newGabcSource) {\n\t      var insertionIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\t      var oldInsertionIndex = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n\t\n\t      var headerLength = GabcHeader.getLength(newGabcSource);\n\t      newGabcSource = newGabcSource.slice(headerLength);\n\t      // always remove the last old mapping since it's spacing/trailingSpace is handled specially\n\t      mappings.pop();\n\t\n\t      if (insertionIndex === null) {\n\t        insertionIndex = NaN;\n\t      }\n\t      if (oldInsertionIndex === null) {\n\t        oldInsertionIndex = NaN;\n\t      }\n\t\n\t      var newWords = this.splitWords(newGabcSource);\n\t\n\t      var results = this.diffDescriptorsAndNewWords(mappings, newWords);\n\t\n\t      var index = 0,\n\t          j,\n\t          k,\n\t          l,\n\t          sourceIndex = 0,\n\t          wordLength = 0,\n\t          mapping,\n\t          elementIndex = 0;\n\t\n\t      ctxt.activeClef = _ExsurgeChant.Clef.default();\n\t\n\t      // apply the results to the mappings, marking notations that need to be processed\n\t      var lastTranslationNeumes = [];\n\t      for (var i = 0; i < results.length; i++) {\n\t        var resultCode = results[i][0];\n\t        var resultValues = results[i][1];\n\t\n\t        if (index > 0) sourceIndex = mappings[index - 1].sourceIndex + mappings[index - 1].source.length + 1;\n\t        if (resultCode === \"=\") {\n\t          var sourceIndexDiff = sourceIndex - mappings[index].sourceIndex;\n\t          // skip over ones that haven't changed, but updating the clef and source\n\t          // index (and pitch in case clef or accidentals have changed) as we go\n\t          for (j = 0; j < resultValues.length; j++, index++) {\n\t            mapping = mappings[index];\n\t            if (elementIndex === 0 && mapping.notations.length && mapping.notations[0].isClef) {\n\t              // the first clef doesn't get kept as a notation:\n\t              elementIndex = -1;\n\t            }\n\t            if (insertionIndex >= elementIndex || oldInsertionIndex >= elementIndex) {\n\t              // check if the insertion index is within this mapping:\n\t              var elementCount = elementCountForNotations(mapping.notations);\n\t              if (insertionIndex >= elementIndex && insertionIndex < elementIndex + elementCount || oldInsertionIndex >= elementIndex && oldInsertionIndex < elementIndex + elementCount) {\n\t                // re-do this mapping:\n\t                // TODO: check sourceIndex\n\t                var _sourceIndex = mapping.sourceIndex + sourceIndexDiff;\n\t                mapping = this.createMappingFromWord(ctxt, resultValues[j], _sourceIndex, lastTranslationNeumes, insertionIndex - elementIndex);\n\t                mappings.splice(index, 1, mapping);\n\t\n\t                elementIndex += elementCount;\n\t                continue;\n\t              }\n\t              elementIndex += elementCount;\n\t            }\n\t            mapping.sourceIndex += sourceIndexDiff;\n\t            for (k = 0; k < mapping.notations.length; k++) {\n\t              var curNotation = mapping.notations[k];\n\t              var prevIsAccidental = mapping.notations[k - 1] && mapping.notations[k - 1].isAccidental;\n\t              // notify the notation that its dependencies are no longer valid\n\t              curNotation.resetDependencies();\n\t\n\t              if (curNotation.isClef) {\n\t                ctxt.activeClef = mappings[index].notations[k];\n\t              }\n\t\n\t              if (curNotation.isAccidental) {\n\t                ctxt.activeClef.activeAccidental = curNotation;\n\t              } else if (curNotation.resetsAccidentals || !prevIsAccidental && curNotation.hasLyrics() && curNotation.lyrics[0].lyricType <= _ExsurgeDrawing.LyricType.BeginningSyllable) {\n\t                ctxt.activeClef.resetAccidentals();\n\t              }\n\t\n\t              // update source index, pitch, and automatic braces\n\t              if (curNotation.notes) {\n\t                for (l = 0; l < curNotation.notes.length; ++l) {\n\t                  var note = curNotation.notes[l];\n\t                  note.sourceIndex += sourceIndexDiff;\n\t                  note.pitch = ctxt.activeClef.staffPositionToPitch(note.staffPosition);\n\t                  if (note.braceEnd && note.braceEnd.automatic) delete note.braceEnd;\n\t                  if (this.needToEndBrace && !note.braceStart && !note.braceEnd) {\n\t                    note.braceEnd = new Markings.BracePoint(note, this.needToEndBrace.isAbove, this.needToEndBrace.shape, this.needToEndBrace.attachment === Markings.BraceAttachment.Left ? Markings.BraceAttachment.Right : Markings.BraceAttachment.Left);\n\t                    note.braceEnd.automatic = true;\n\t                    delete this.needToEndBrace;\n\t                  } else if (note.braceStart && note.braceStart.automatic) {\n\t                    this.needToEndBrace = note.braceStart;\n\t                  }\n\t                }\n\t              }\n\t              if (curNotation.translationText) {\n\t                for (l = 0; l < curNotation.translationText.length; ++l) {\n\t                  var transText = curNotation.translationText[l];\n\t                  delete transText.endNeume;\n\t                  curNotation.translationText[l].sourceIndex += sourceIndexDiff;\n\t                  if (transText.textAnchor === \"end\" && lastTranslationNeumes[0]) {\n\t                    var lastTranslationText = lastTranslationNeumes[0].translationText[l];\n\t                    if (lastTranslationText) lastTranslationText.endNeume = curNotation;\n\t                  }\n\t                }\n\t                lastTranslationNeumes[0] = curNotation;\n\t              }\n\t              if (sourceIndexDiff) {\n\t                if (typeof curNotation.sourceIndex === \"number\") {\n\t                  curNotation.sourceIndex += sourceIndexDiff;\n\t                }\n\t                for (l = 0; l < curNotation.lyrics.length; ++l) {\n\t                  curNotation.lyrics[l].sourceIndex += sourceIndexDiff;\n\t                }\n\t                if (curNotation.alText) {\n\t                  for (l = 0; l < curNotation.alText.length; ++l) {\n\t                    curNotation.alText[l].sourceIndex += sourceIndexDiff;\n\t                  }\n\t                }\n\t              }\n\t            }\n\t          }\n\t        } else if (resultCode === \"-\") {\n\t          // delete elements that no longer exist, but first notify all\n\t          // elements of the change\n\t          mappings.splice(index, resultValues.length);\n\t        } else if (resultCode === \"+\") {\n\t          // insert new ones\n\t          for (j = 0; j < resultValues.length; j++) {\n\t            wordLength = resultValues[j].length + 1;\n\t            mapping = this.createMappingFromWord(ctxt, resultValues[j], sourceIndex, lastTranslationNeumes, insertionIndex - elementIndex);\n\t\n\t            if (elementIndex === 0 && mapping.notations.length && mapping.notations[0].isClef) {\n\t              // the first clef doesn't get kept as a notation:\n\t              elementIndex = -1;\n\t              var _elementCount = elementCountForNotations(mapping.notations);\n\t              if (insertionIndex < _elementCount) {\n\t                // re-do the first mapping, because it was broken up incorrectly, due to the presence of the initial clef\n\t                mapping = this.createMappingFromWord(ctxt, resultValues[j], sourceIndex, lastTranslationNeumes, insertionIndex - elementIndex);\n\t              }\n\t            }\n\t\n\t            for (k = 0; k < mapping.notations.length; k++) {\n\t              var _curNotation = mapping.notations[k];\n\t              elementIndex += _curNotation.notes ? _curNotation.notes.length : 1;\n\t              if (_curNotation.isClef) {\n\t                ctxt.activeClef = mapping.notations[k];\n\t              }\n\t            }\n\t\n\t            mappings.splice(index++, 0, mapping);\n\t            sourceIndex += wordLength;\n\t          }\n\t        }\n\t      }\n\t\n\t      // always set the last notation to have a trailingSpace of 0. This makes layout for the last chant line simpler\n\t      if (mappings.length > 0 && mappings[mappings.length - 1].notations.length > 0) mappings[mappings.length - 1].notations[mappings[mappings.length - 1].notations.length - 1].trailingSpace = 0;\n\t\n\t      return headerLength;\n\t    }\n\t\n\t    // takes an array of gabc words (like that returned by splitWords below)\n\t    // and returns an array of ChantMapping objects, one for each word.\n\t\n\t  }, {\n\t    key: \"createMappingsFromWords\",\n\t    value: function createMappingsFromWords(ctxt, words) {\n\t      var mappings = [];\n\t      var sourceIndex = 0,\n\t          wordLength = 0,\n\t          lastTranslationNeumes = [];\n\t\n\t      for (var i = 0; i < words.length; i++) {\n\t        sourceIndex += wordLength;\n\t        wordLength = words[i].length + 1;\n\t        var word = words[i].trim();\n\t\n\t        if (word === \"\") continue;\n\t\n\t        var mapping = this.createMappingFromWord(ctxt, word, sourceIndex, lastTranslationNeumes);\n\t\n\t        if (mapping) mappings.push(mapping);\n\t      }\n\t\n\t      return mappings;\n\t    }\n\t\n\t    // takes a gabc word (like those returned by splitWords below) and returns\n\t    // a ChantMapping object that contains the gabc word source text as well\n\t    // as the generated notations.\n\t\n\t  }, {\n\t    key: \"createMappingFromWord\",\n\t    value: function createMappingFromWord(ctxt, word, sourceIndex, lastTranslationNeumes, insertionIndex) {\n\t      var matches = [];\n\t      var notations = [];\n\t      var currSyllable = 0;\n\t\n\t      while (match = __syllablesRegex.exec(word)) {\n\t        matches.push(match);\n\t      }for (var j = 0; j < matches.length; j++) {\n\t        var match = matches[j];\n\t\n\t        var lyricText = match[1].replace(/~/g, \" \");\n\t        var alText = [];\n\t        var translationText = [];\n\t        var notationData = match[2];\n\t\n\t        // new words reset the accidentals, per the Solesmes style (see LU xviij)\n\t        // but we need to also make sure that there _is_ a word and that it has notes associated with it.\n\t        if (currSyllable === 0 && /[a-z]/i.test(lyricText) && /[a-m]/i.test(notationData)) ctxt.activeClef.resetAccidentals();\n\t\n\t        var items = this.parseNotations(ctxt, notationData, sourceIndex + match.index + match[1].length + 1, insertionIndex);\n\t\n\t        if (items.length === 0) continue;\n\t\n\t        if (insertionIndex >= 0) insertionIndex -= elementCountForNotations(items);\n\t\n\t        items[0].firstOfSyllable = !!lyricText;\n\t        items[0].firstOfParentheses = true;\n\t        notations.push.apply(notations, _toConsumableArray(items));\n\t\n\t        // add the lyrics and/or alText to the first notation that makes sense...\n\t        var notationWithLyrics = null;\n\t        for (var i = 0; i < items.length; i++) {\n\t          var cne = items[i];\n\t\n\t          if (cne.isAccidental && i + 1 < items.length) continue;\n\t\n\t          notationWithLyrics = cne;\n\t          break;\n\t        }\n\t\n\t        var m = __altTranslationRegex.exec();\n\t        var indexOffset = 0;\n\t        while (m = __altTranslationRegex.exec(lyricText)) {\n\t          var index = m.index;\n\t          lyricText = lyricText.slice(0, index) + lyricText.slice(index + m[0].length);\n\t          index += sourceIndex + indexOffset + 1;\n\t          if (typeof m[1] === \"string\") {\n\t            var elem = new _ExsurgeDrawing.AboveLinesText(ctxt, m[1], notationWithLyrics, index + 4);\n\t            elem.alIndex = alText.push(elem) - 1;\n\t          } else if (typeof m[2] === \"string\") {\n\t            var _elem = new _ExsurgeDrawing.AboveLinesText(ctxt, m[3], notationWithLyrics, index + m[2].length);\n\t            _elem.alIndex = alText.push(_elem) - 1;\n\t          } else {\n\t            var _elem2 = new _ExsurgeDrawing.TranslationText(ctxt, m[3], notationWithLyrics, index);\n\t            _elem2.translationIndex = translationText.push(_elem2) - 1;\n\t          }\n\t          indexOffset += m[0].length;\n\t          __altTranslationRegex.exec();\n\t        }\n\t        if (lyricText === \"\" && alText.length === 0) continue;\n\t\n\t        if (notationWithLyrics === null) return new _ExsurgeChant.ChantMapping(word, notations, sourceIndex);\n\t\n\t        if (alText.length) notationWithLyrics.alText = alText;\n\t\n\t        if (translationText.length) {\n\t          notationWithLyrics.translationText = translationText;\n\t          for (i = 0; i < translationText.length; ++i) {\n\t            var transText = translationText[i];\n\t            if (transText.textAnchor === \"end\" && lastTranslationNeumes[0]) {\n\t              var lastTranslationText = lastTranslationNeumes[0].translationText[i];\n\t              if (lastTranslationText) lastTranslationText.endNeume = notationWithLyrics;\n\t            }\n\t          }\n\t          lastTranslationNeumes[0] = notationWithLyrics;\n\t        }\n\t\n\t        if (lyricText === \"\") continue;\n\t\n\t        var proposedLyricType;\n\t\n\t        // if it's not a neume or a TextOnly notation, then make the lyrics a directive\n\t        if (!cne.isNeume && cne.constructor !== _ExsurgeChant.TextOnly) proposedLyricType = _ExsurgeDrawing.LyricType.Directive;\n\t        // otherwise trye to guess the lyricType for the first lyric anyway\n\t        else if (currSyllable === 0 && j === matches.length - 1) proposedLyricType = _ExsurgeDrawing.LyricType.SingleSyllable;else if (currSyllable === 0 && j < matches.length - 1) proposedLyricType = _ExsurgeDrawing.LyricType.BeginningSyllable;else if (j === matches.length - 1) proposedLyricType = _ExsurgeDrawing.LyricType.EndingSyllable;else proposedLyricType = _ExsurgeDrawing.LyricType.MiddleSyllable;\n\t\n\t        currSyllable++;\n\t\n\t        var lyrics = this.createSyllableLyrics(ctxt, lyricText, proposedLyricType, notationWithLyrics, items, sourceIndex + match.index);\n\t\n\t        if (lyrics === null || lyrics.length === 0) continue;\n\t\n\t        notationWithLyrics.lyrics = lyrics;\n\t      }\n\t\n\t      return new _ExsurgeChant.ChantMapping(word, notations, sourceIndex);\n\t    }\n\t\n\t    // returns an array of lyrics (an array because each syllable can have multiple lyrics)\n\t\n\t  }, {\n\t    key: \"createSyllableLyrics\",\n\t    value: function createSyllableLyrics(ctxt, text, proposedLyricType, notation, notations, sourceIndex) {\n\t      var lyrics = [];\n\t\n\t      // an extension to gabc: multiple lyrics per syllable can be separated by a |\n\t      var lyricTexts = text.split(\"|\");\n\t\n\t      for (var i = 0; i < lyricTexts.length; i++) {\n\t        var lyricText = lyricTexts[i];\n\t\n\t        if (i > 0) {\n\t          if (lyricText.match(/\\s$/)) {\n\t            lyricText = lyricText.replace(/s+$/, \"\");\n\t            proposedLyricType = _ExsurgeDrawing.LyricType.EndingSyllable;\n\t          } else {\n\t            proposedLyricType = _ExsurgeDrawing.LyricType.MiddleSyllable;\n\t          }\n\t        }\n\t\n\t        // gabc allows lyrics to indicate the centering part of the text by\n\t        // using braces to indicate how to center the lyric. So a lyric can\n\t        // look like \"f{i}re\" or \"{fenced}\" to center on the i or on the entire\n\t        // word, respectively. Here we determine if the lyric should be spaced\n\t        // manually with this method of using braces.\n\t        var centerStartIndex = lyricText.indexOf(\"{\");\n\t        var centerLength = 0;\n\t\n\t        if (centerStartIndex >= 0) {\n\t          var indexClosingBracket = lyricText.indexOf(\"}\");\n\t\n\t          if (indexClosingBracket >= 0 && indexClosingBracket > centerStartIndex) {\n\t            centerLength = indexClosingBracket - centerStartIndex - 1;\n\t\n\t            // strip out the brackets...is this better than string.replace?\n\t            lyricText = lyricText.substring(0, centerStartIndex) + lyricText.substring(centerStartIndex + 1, indexClosingBracket) + lyricText.substring(indexClosingBracket + 1, lyricText.length);\n\t          } else centerStartIndex = -1; // if there's no closing bracket, don't enable centering\n\t        }\n\t\n\t        var lyric = this.makeLyric(ctxt, lyricText, proposedLyricType, notation, notations, sourceIndex);\n\t\n\t        if (centerStartIndex) {\n\t          // update indices in case there had been any tags, etc.\n\t          var textIndex = 0,\n\t              centerEndIndex = -1;\n\t          var _iteratorNormalCompletion = true;\n\t          var _didIteratorError = false;\n\t          var _iteratorError = undefined;\n\t\n\t          try {\n\t            for (var _iterator = lyric.spans[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t              var span = _step.value;\n\t\n\t              if (centerStartIndex >= span.sourceIndex && centerStartIndex < span.sourceIndex + span.text.length) {\n\t                centerStartIndex += textIndex - span.sourceIndex;\n\t                centerEndIndex = centerStartIndex + centerLength;\n\t              } else if (centerEndIndex >= 0 && centerEndIndex >= span.sourceIndex && centerEndIndex < span.sourceIndex + span.text.length) {\n\t                centerEndIndex += textIndex - span.sourceIndex;\n\t                break;\n\t              }\n\t              textIndex += span.text.length;\n\t            }\n\t          } catch (err) {\n\t            _didIteratorError = true;\n\t            _iteratorError = err;\n\t          } finally {\n\t            try {\n\t              if (!_iteratorNormalCompletion && _iterator.return) {\n\t                _iterator.return();\n\t              }\n\t            } finally {\n\t              if (_didIteratorError) {\n\t                throw _iteratorError;\n\t              }\n\t            }\n\t          }\n\t        }\n\t\n\t        // if we have manual lyric centering, then set it now\n\t        if (centerStartIndex >= 0) {\n\t          lyric.centerStartIndex = centerStartIndex;\n\t          lyric.centerLength = centerLength;\n\t        }\n\t\n\t        lyric.lyricIndex = lyrics.push(lyric) - 1;\n\t        sourceIndex += lyricText.length + 1;\n\t      }\n\t      notation.lyrics = lyrics;\n\t      return lyrics;\n\t    }\n\t  }, {\n\t    key: \"makeLyric\",\n\t    value: function makeLyric(ctxt, text, lyricType, notation, notations, sourceIndex) {\n\t      var elides = false;\n\t      var forceConnector = false;\n\t      if (text.length > 1) {\n\t        if (text[text.length - 1] === \"-\") {\n\t          forceConnector = true;\n\t          if (lyricType === _ExsurgeDrawing.LyricType.EndingSyllable) lyricType = _ExsurgeDrawing.LyricType.MiddleSyllable;else if (lyricType === _ExsurgeDrawing.LyricType.SingleSyllable) lyricType = _ExsurgeDrawing.LyricType.BeginningSyllable;\n\t\n\t          text = text.slice(0, -1);\n\t        } else if (text[text.length - 1] === \" \") {\n\t          if (lyricType === _ExsurgeDrawing.LyricType.MiddleSyllable) lyricType = _ExsurgeDrawing.LyricType.EndingSyllable;else if (lyricType === _ExsurgeDrawing.LyricType.BeginningSyllable) lyricType = _ExsurgeDrawing.LyricType.SingleSyllable;\n\t\n\t          text = text.slice(0, -1);\n\t        } else if (/<\\/i>$/.test(text)) {\n\t          // must be an elision\n\t          elides = true;\n\t        }\n\t      }\n\t\n\t      if (text.match(/^(?:[*†]+|i+j|\\d+)\\.?$/)) lyricType = _ExsurgeDrawing.LyricType.Directive;\n\t\n\t      var lyric = new _ExsurgeDrawing.Lyric(ctxt, text, lyricType, notation, notations, sourceIndex);\n\t      lyric.elidesToNext = elides;\n\t      if (forceConnector) lyric.setForceConnector(true);\n\t\n\t      return lyric;\n\t    }\n\t\n\t    // takes a string of gabc notations and creates exsurge objects out of them.\n\t    // returns an array of notations.\n\t\n\t  }, {\n\t    key: \"parseNotations\",\n\t    value: function parseNotations(ctxt, data, sourceIndex, insertionIndex) {\n\t      var _this = this;\n\t\n\t      // if there is no data, then this must be a text only object\n\t      if (!data) return [new _ExsurgeChant.TextOnly(sourceIndex, 0)];\n\t\n\t      var baseSourceIndex = sourceIndex;\n\t      var sourceLength = 0;\n\t      var notations = [];\n\t      var notes = [];\n\t      var trailingSpace = _ExsurgeDrawing.DefaultTrailingSpace;\n\t\n\t      var addToLastSourceGabc = function addToLastSourceGabc(gabc) {\n\t        if (notes.length > 0) {\n\t          notes[notes.length - 1].sourceGabc += gabc;\n\t        }\n\t      };\n\t      var addNotation = function addNotation(notation) {\n\t        // first, if we have any notes left over, we create a neume out of them\n\t        if (notes.length > 0) {\n\t          // create neume(s)\n\t          var neumes = _this.createNeumesFromNotes(ctxt, notes, trailingSpace);\n\t          for (var i = 0; i < neumes.length; i++) {\n\t            notations.push(neumes[i]);\n\t          }notes = [];\n\t        }\n\t\n\t        // reset the trailing space\n\t        trailingSpace = _ExsurgeDrawing.DefaultTrailingSpace;\n\t\n\t        // then, if we're passed a notation, let's add it\n\t        // also, perform chant logic here\n\t        if (notation !== null) {\n\t          var prevNotation = notations[notations.length - 1];\n\t          notation.sourceIndex = sourceIndex;\n\t          notation.sourceGabc = match[0];\n\t          if (notation.isClef) {\n\t            ctxt.activeClef = notation;\n\t            if (prevNotation && prevNotation.trailingSpace.isDefault && prevNotation.isDivider) {\n\t              prevNotation.trailingSpace = TrailingSpaceForAccidental;\n\t            }\n\t          } else if (notation.isAccidental) {\n\t            ctxt.activeClef.activeAccidental = notation;\n\t          } else if (notation.trailingSpace.isDefault && notation instanceof Signs.Custos) {\n\t            notation.trailingSpace = TrailingSpaceForAccidental;\n\t          } else if (notation.resetsAccidentals) ctxt.activeClef.resetAccidentals();\n\t\n\t          notations.push(notation);\n\t        }\n\t      };\n\t\n\t      var regex = new RegExp(__notationsRegex.source, \"g\");\n\t      var match;\n\t\n\t      while (match = regex.exec(data)) {\n\t        sourceIndex = baseSourceIndex + match.index;\n\t        sourceLength = match[0].length;\n\t        var atom = match[0];\n\t\n\t        // handle the clefs and dividers here\n\t        switch (atom) {\n\t          case \",\":\n\t            addNotation(new Signs.QuarterBar());\n\t            break;\n\t          case \"`\":\n\t            addNotation(new Signs.Virgula());\n\t            break;\n\t          case \";\":\n\t            addNotation(new Signs.HalfBar());\n\t            break;\n\t          case \";1\":\n\t          case \";2\":\n\t          case \";3\":\n\t          case \";4\":\n\t          case \";5\":\n\t          case \";6\":\n\t          case \",1\":\n\t          case \",2\":\n\t          case \",3\":\n\t          case \",4\":\n\t          case \",5\":\n\t          case \",6\":\n\t            addNotation(new Signs.DominicanBar(parseInt(atom[1], 10)));\n\t            break;\n\t          case \":\":\n\t            addNotation(new Signs.FullBar());\n\t            break;\n\t          case \"::\":\n\t            addNotation(new Signs.DoubleBar());\n\t            break;\n\t          // other gregorio dividers are not supported yet\n\t\n\t          case \"c1\":\n\t            addNotation(ctxt.activeClef = new _ExsurgeChant.DoClef(-3, 2));\n\t            break;\n\t\n\t          case \"c2\":\n\t            addNotation(ctxt.activeClef = new _ExsurgeChant.DoClef(-1, 2));\n\t            break;\n\t\n\t          case \"c3\":\n\t            addNotation(ctxt.activeClef = new _ExsurgeChant.DoClef(1, 2));\n\t            break;\n\t\n\t          case \"c4\":\n\t            addNotation(ctxt.activeClef = new _ExsurgeChant.DoClef(3, 2));\n\t            break;\n\t\n\t          case \"f1\":\n\t            addNotation(ctxt.activeClef = new _ExsurgeChant.FaClef(-3, 2));\n\t            break;\n\t\n\t          case \"f2\":\n\t            addNotation(ctxt.activeClef = new _ExsurgeChant.FaClef(-1, 2));\n\t            break;\n\t\n\t          case \"f3\":\n\t            addNotation(ctxt.activeClef = new _ExsurgeChant.FaClef(1, 2));\n\t            break;\n\t\n\t          case \"f4\":\n\t            addNotation(ctxt.activeClef = new _ExsurgeChant.FaClef(3, 2));\n\t            break;\n\t\n\t          case \"cb1\":\n\t            addNotation(ctxt.activeClef = new _ExsurgeChant.DoClef(-3, 2, new Signs.Accidental(-4, Signs.AccidentalType.Flat)));\n\t            break;\n\t\n\t          case \"cb2\":\n\t            addNotation(ctxt.activeClef = new _ExsurgeChant.DoClef(-1, 2, new Signs.Accidental(-2, Signs.AccidentalType.Flat)));\n\t            break;\n\t\n\t          case \"cb3\":\n\t            addNotation(ctxt.activeClef = new _ExsurgeChant.DoClef(1, 2, new Signs.Accidental(0, Signs.AccidentalType.Flat)));\n\t            break;\n\t\n\t          case \"cb4\":\n\t            addNotation(ctxt.activeClef = new _ExsurgeChant.DoClef(3, 2, new Signs.Accidental(2, Signs.AccidentalType.Flat)));\n\t            break;\n\t\n\t          case \"z\":\n\t            addNotation(new _ExsurgeChant.ChantLineBreak(true));\n\t            break;\n\t          case \"Z\":\n\t            addNotation(new _ExsurgeChant.ChantLineBreak(false));\n\t            break;\n\t          case \"z0\":\n\t            addNotation(new Signs.Custos(true));\n\t            break;\n\t\n\t          // spacing indicators\n\t          case \"!\":\n\t            trailingSpace = 0;\n\t            addToLastSourceGabc(atom);\n\t            addNotation(null);\n\t            break;\n\t          case \" \":\n\t            // fixme: is this correct? logically what is the difference in gabc\n\t            // between putting a space between notes vs putting '//' between notes?\n\t            trailingSpace = TrailingSpaceMultiple(2);\n\t            addToLastSourceGabc(atom);\n\t            addNotation(null);\n\t            break;\n\t\n\t          default:\n\t            // might be a number of slashes, a custos, might be an accidental, or might be a note\n\t            if (atom[0] === \"/\") {\n\t              trailingSpace = TrailingSpaceMultiple(atom.length);\n\t              addToLastSourceGabc(atom);\n\t              addNotation(null);\n\t            } else if (atom.length > 1 && atom[1] === \"+\") {\n\t              // custos\n\t              var custos = new Signs.Custos();\n\t\n\t              custos.staffPosition = this.gabcHeightToExsurgeHeight(atom[0]);\n\t\n\t              addNotation(custos);\n\t            } else if (atom.length > 1 && /[xy#]/.test(atom[1])) {\n\t              var accidentalType;\n\t\n\t              switch (atom[1]) {\n\t                case \"y\":\n\t                  accidentalType = Signs.AccidentalType.Natural;\n\t                  break;\n\t                case \"#\":\n\t                  accidentalType = Signs.AccidentalType.Sharp;\n\t                  break;\n\t                default:\n\t                  accidentalType = Signs.AccidentalType.Flat;\n\t                  break;\n\t              }\n\t\n\t              var noteArray = [];\n\t              this.createNoteFromData(ctxt, ctxt.activeClef, atom, noteArray, sourceIndex);\n\t              var accidental = new Signs.Accidental(noteArray[0].staffPosition, accidentalType);\n\t              accidental.pitch = this.gabcHeightToExsurgePitch(ctxt.activeClef, atom[0]);\n\t              accidental.sourceIndex = sourceIndex;\n\t              accidental.sourceLength = sourceLength;\n\t              accidental.trailingSpace = TrailingSpaceForAccidental;\n\t\n\t              ctxt.activeClef.activeAccidental = accidental;\n\t\n\t              addNotation(accidental);\n\t            } else if (atom.length > 1 && atom[0] === \"{\") {\n\t              (function () {\n\t                trailingSpace = 0;\n\t                addNotation(null);\n\t                var bracketedNotations = _this.parseNotations(ctxt, match[__notationsRegex_group_insideBraces], sourceIndex + 1);\n\t                // Set the width of these notations to 0\n\t                bracketedNotations.forEach(function (neume) {\n\t                  neume.hasNoWidth = true;\n\t                  neume.firstWithNoWidth = bracketedNotations[0];\n\t                });\n\t                notations.push.apply(notations, _toConsumableArray(bracketedNotations));\n\t              })();\n\t            } else {\n\t              // looks like it's a note\n\t              if (insertionIndex === -1) {\n\t                trailingSpace = TrailingSpaceMultiple(1);\n\t                addNotation(null);\n\t              }\n\t              this.createNoteFromData(ctxt, ctxt.activeClef, atom, notes, sourceIndex);\n\t              --insertionIndex;\n\t            }\n\t            break;\n\t        }\n\t      }\n\t\n\t      // finish up any remaining notes we have left\n\t      addNotation(null);\n\t\n\t      return notations;\n\t    }\n\t  }, {\n\t    key: \"createNeumesFromNotes\",\n\t    value: function createNeumesFromNotes(ctxt, notes, finalTrailingSpace) {\n\t      var neumes = [];\n\t      var firstNoteIndex = 0;\n\t      var currNoteIndex = 0;\n\t\n\t      // here we use a simple finite state machine to create the neumes from the notes\n\t      // createNeume is helper function which returns the next state after a neume is created\n\t      // (unknownState). Each state object has a neume() function and a handle() function.\n\t      // neume() allows us to create the neume of the state in the event that we run out\n\t      // of notes. handle() gives the state an opportunity to examine the currNote and\n\t      // determine what to do...either transition to a different neume/state, or\n\t      // continue building the neume of that state. handle() returns the next state\n\t\n\t      var createNeume = function createNeume(neume, includeCurrNote) {\n\t        var includePrevNote = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\t\n\t        // add the notes to the neume\n\t        var lastNoteIndex;\n\t        if (includeCurrNote) lastNoteIndex = currNoteIndex;else if (includePrevNote) lastNoteIndex = currNoteIndex - 1;else lastNoteIndex = currNoteIndex - 2;\n\t\n\t        if (lastNoteIndex < 0) return;\n\t\n\t        while (firstNoteIndex <= lastNoteIndex) {\n\t          var note = notes[firstNoteIndex++];\n\t          neume.addNote(note);\n\t          if (note.alText) {\n\t            if (!neume.alText) neume.alText = [];\n\t            neume.alText.push(note.alText);\n\t            note.alText.noteIndex = firstNoteIndex - 1;\n\t          }\n\t        }\n\t\n\t        neumes.push(neume);\n\t\n\t        if (includeCurrNote === false) {\n\t          currNoteIndex--;\n\t\n\t          if (includePrevNote === false) currNoteIndex--;\n\t\n\t          neume.keepWithNext = true;\n\t          if (notes[currNoteIndex + 1].shape === _ExsurgeChant.NoteShape.Quilisma) neume.trailingSpace = 0;else {\n\t            neume.trailingSpace = TrailingSpaceMultiple(1);\n\t            neume.allowLineBreakBeforeNext = true;\n\t          }\n\t        }\n\t\n\t        return unknownState;\n\t      };\n\t\n\t      var unknownState = {\n\t        neume: function neume() {\n\t          return new Neumes.Punctum();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.shape === _ExsurgeChant.NoteShape.Virga) return virgaState;else if (currNote.shape === _ExsurgeChant.NoteShape.Stropha) return apostrophaState;else if (currNote.shape === _ExsurgeChant.NoteShape.Oriscus) return oriscusState;else if (currNote.shape === _ExsurgeChant.NoteShape.Inclinatum) return punctaInclinataState;else if (currNote.shapeModifiers & _ExsurgeChant.NoteShapeModifiers.Cavum) return createNeume(new Neumes.Punctum(), true);else return punctumState;\n\t        }\n\t      };\n\t\n\t      var punctumState = {\n\t        neume: function neume() {\n\t          return new Neumes.Punctum();\n\t        },\n\t        handle: function handle(currNote, prevNote, notesRemaining) {\n\t          if (currNote.shape || prevNote.liquescent === _ExsurgeChant.LiquescentType.Small) {\n\t            var neume = new Neumes.Punctum();\n\t            var state = createNeume(neume, false);\n\t            // if the current note is on a space within the staff AND the previous note is on the line below AND the previous note has a mora,\n\t            // then we went the trailing space at its default of intraNeumeSpacing to prevent the dot from running up into the current note.\n\t            // Otherwise, we want no trailing space.\n\t            if (currNote.staffPosition > prevNote.staffPosition && (currNote.staffPosition % 2 === 1 || prevNote.staffPosition !== currNote.staffPosition - 1 || !prevNote.morae || prevNote.morae.length === 0)) neume.trailingSpace = 0;\n\t            return state;\n\t          }\n\t\n\t          if (currNote.staffPosition > prevNote.staffPosition) {\n\t            if (currNote.ictus) currNote.ictus.positionHint = _ExsurgeDrawing.MarkingPositionHint.Above;\n\t            return podatusState;\n\t          } else if (currNote.staffPosition < prevNote.staffPosition) {\n\t            if (prevNote.ictus) prevNote.ictus.positionHint = _ExsurgeDrawing.MarkingPositionHint.Above;\n\t            if (currNote.shape === _ExsurgeChant.NoteShape.Inclinatum) return climacusState;else if (prevNote.staffPosition - currNote.staffPosition <= 4) {\n\t              return clivisState;\n\t            }\n\t          } else if (!prevNote.morae || !prevNote.morae.length) {\n\t            return distrophaState;\n\t          }\n\t          return createNeume(new Neumes.Punctum(), false);\n\t        }\n\t      };\n\t\n\t      var punctaInclinataState = {\n\t        neume: function neume() {\n\t          return new Neumes.PunctaInclinata();\n\t        },\n\t        handle: function handle() {\n\t          if (currNote.shape !== _ExsurgeChant.NoteShape.Inclinatum) return createNeume(new Neumes.PunctaInclinata(), false);else return punctaInclinataState;\n\t        }\n\t      };\n\t\n\t      var oriscusState = {\n\t        neume: function neume() {\n\t          return new Neumes.Oriscus();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.shape === _ExsurgeChant.NoteShape.Default) {\n\t            if (currNote.staffPosition > prevNote.staffPosition) {\n\t              prevNote.shapeModifiers |= _ExsurgeChant.NoteShapeModifiers.Ascending;\n\t              return createNeume(new Neumes.PesQuassus(), true);\n\t            } else if (currNote.staffPosition < prevNote.staffPosition) {\n\t              prevNote.shapeModifiers |= _ExsurgeChant.NoteShapeModifiers.Descending;\n\t              return createNeume(new Neumes.Clivis(), true);\n\t            }\n\t          }\n\t          // stand alone oriscus\n\t          var neume = new Neumes.Oriscus(),\n\t              state = createNeume(neume, false);\n\t          // if the current note is on a space within the staff AND the previous note is on the line below AND the previous note has a mora,\n\t          // then we went the trailing space at its default of intraNeumeSpacing to prevent the dot from running up into the current note.\n\t          // Otherwise, we want no trailing space.\n\t          if (currNote.staffPosition > prevNote.staffPosition && (currNote.staffPosition % 2 === 1 || prevNote.staffPosition !== currNote.staffPosition - 1 || !prevNote.morae || prevNote.morae.length === 0)) neume.trailingSpace = 0;\n\t          return state;\n\t        }\n\t      };\n\t\n\t      var podatusState = {\n\t        neume: function neume() {\n\t          return new Neumes.Podatus();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.staffPosition > prevNote.staffPosition) {\n\t            if (currNote.ictus) currNote.ictus.positionHint = _ExsurgeDrawing.MarkingPositionHint.Above;\n\t            if (prevNote.ictus) prevNote.ictus.positionHint = _ExsurgeDrawing.MarkingPositionHint.Below;\n\t\n\t            if (prevNote.shape === _ExsurgeChant.NoteShape.Oriscus) return salicusState;else return scandicusState;\n\t          } else if (currNote.staffPosition < prevNote.staffPosition) {\n\t            if (currNote.shape === _ExsurgeChant.NoteShape.Inclinatum) return pesSubpunctisState;else return torculusState;\n\t          } else return createNeume(new Neumes.Podatus(), false);\n\t        }\n\t      };\n\t\n\t      var clivisState = {\n\t        neume: function neume() {\n\t          return new Neumes.Clivis();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.shape === _ExsurgeChant.NoteShape.Default && currNote.staffPosition > prevNote.staffPosition) {\n\t            if (currNote.ictus) currNote.ictus.positionHint = _ExsurgeDrawing.MarkingPositionHint.Above;\n\t            return porrectusState;\n\t          } else return createNeume(new Neumes.Clivis(), false);\n\t        }\n\t      };\n\t\n\t      var climacusState = {\n\t        neume: function neume() {\n\t          return new Neumes.Climacus();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.shape !== _ExsurgeChant.NoteShape.Inclinatum) return createNeume(new Neumes.Climacus(), false);else return state;\n\t        }\n\t      };\n\t\n\t      var porrectusState = {\n\t        neume: function neume() {\n\t          return new Neumes.Porrectus();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.shape === _ExsurgeChant.NoteShape.Default && currNote.staffPosition < prevNote.staffPosition) return createNeume(new Neumes.PorrectusFlexus(), true);else return createNeume(new Neumes.Porrectus(), false);\n\t        }\n\t      };\n\t\n\t      var pesSubpunctisState = {\n\t        neume: function neume() {\n\t          return new Neumes.PesSubpunctis();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.shape !== _ExsurgeChant.NoteShape.Inclinatum) return createNeume(new Neumes.PesSubpunctis(), false);else return state;\n\t        }\n\t      };\n\t\n\t      var salicusState = {\n\t        neume: function neume() {\n\t          return new Neumes.Salicus();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.staffPosition < prevNote.staffPosition) return salicusFlexusState;else return createNeume(new Neumes.Salicus(), false);\n\t        }\n\t      };\n\t\n\t      var salicusFlexusState = {\n\t        neume: function neume() {\n\t          return new Neumes.SalicusFlexus();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          return createNeume(new Neumes.SalicusFlexus(), false);\n\t        }\n\t      };\n\t\n\t      var scandicusState = {\n\t        neume: function neume() {\n\t          return new Neumes.Scandicus();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (prevNote.shape === _ExsurgeChant.NoteShape.Virga && currNote.shape === _ExsurgeChant.NoteShape.Inclinatum && currNote.staffPosition < prevNote.staffPosition) {\n\t            // if we get here, then it seems we have a podatus, now being followed by a climacus\n\t            // rather than a scandicus. react accordingly\n\t            return createNeume(new Neumes.Podatus(), false, false);\n\t          } else if (currNote.shape === _ExsurgeChant.NoteShape.Default && currNote.staffPosition < prevNote.staffPosition) return scandicusFlexusState;else return createNeume(new Neumes.Scandicus(), false);\n\t        }\n\t      };\n\t\n\t      var scandicusFlexusState = {\n\t        neume: function neume() {\n\t          return new Neumes.ScandicusFlexus();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          return createNeume(new Neumes.ScandicusFlexus(), false);\n\t        }\n\t      };\n\t\n\t      var virgaState = {\n\t        neume: function neume() {\n\t          return new Neumes.Virga();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.shape === _ExsurgeChant.NoteShape.Inclinatum && currNote.staffPosition < prevNote.staffPosition) return climacusState;else if (currNote.shape === _ExsurgeChant.NoteShape.Virga && currNote.staffPosition === prevNote.staffPosition) return bivirgaState;else return createNeume(new Neumes.Virga(), false);\n\t        }\n\t      };\n\t\n\t      var bivirgaState = {\n\t        neume: function neume() {\n\t          return new Neumes.Bivirga();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.shape === _ExsurgeChant.NoteShape.Virga && currNote.staffPosition === prevNote.staffPosition) return createNeume(new Neumes.Trivirga(), true);else return createNeume(new Neumes.Bivirga(), false);\n\t        }\n\t      };\n\t\n\t      var apostrophaState = {\n\t        neume: function neume() {\n\t          return new Neumes.Apostropha();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.staffPosition === prevNote.staffPosition) return distrophaState;else return createNeume(new Neumes.Apostropha(), false);\n\t        }\n\t      };\n\t\n\t      var distrophaState = {\n\t        neume: function neume() {\n\t          return new Neumes.Distropha();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.staffPosition === prevNote.staffPosition) {\n\t            if (prevNote.morae && prevNote.morae.length) {\n\t              return createNeume(new Neumes.Distropha(), false);\n\t            } else {\n\t              return tristrophaState;\n\t            }\n\t          } else return createNeume(new Neumes.Apostropha(), false, false);\n\t        }\n\t      };\n\t\n\t      var tristrophaState = {\n\t        neume: function neume() {\n\t          return new Neumes.Tristropha();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          // we only create a tristropha when the note run ends after three\n\t          // and the neume() function of this state is called. Otherwise\n\t          // we always interpret the third note to belong to the next sequence\n\t          // of notes.\n\t          //\n\t          // fixme: gabc allows any number of punctum/stropha in succession...\n\t          // is this a valid neume type? Or is it just multiple *stropha neumes\n\t          // in succession? Should we simplify the apostropha/distropha/\n\t          // tristropha classes to a generic stropha neume that can have 1 or\n\t          // more successive notes?\n\t          return createNeume(new Neumes.Distropha(), false, false);\n\t        }\n\t      };\n\t\n\t      var torculusState = {\n\t        neume: function neume() {\n\t          return new Neumes.Torculus();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.shape === _ExsurgeChant.NoteShape.Default && currNote.staffPosition > prevNote.staffPosition) {\n\t            var prevNoteButOne = notes[currNoteIndex - 2];\n\t            if (prevNoteButOne && prevNoteButOne.staffPosition - prevNote.staffPosition <= 4) {\n\t              if (currNote.ictus) currNote.ictus.positionHint = _ExsurgeDrawing.MarkingPositionHint.Above;\n\t              return torculusResupinusState;\n\t            }\n\t          }\n\t          return createNeume(new Neumes.Torculus(), false);\n\t        }\n\t      };\n\t\n\t      var torculusResupinusState = {\n\t        neume: function neume() {\n\t          return new Neumes.TorculusResupinus();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.shape === _ExsurgeChant.NoteShape.Default && currNote.staffPosition < prevNote.staffPosition) return createNeume(new Neumes.TorculusResupinusFlexus(), true);else return createNeume(new Neumes.TorculusResupinus(), false);\n\t        }\n\t      };\n\t\n\t      var state = unknownState;\n\t\n\t      while (currNoteIndex < notes.length) {\n\t        var prevNote = currNoteIndex > 0 ? notes[currNoteIndex - 1] : null;\n\t        var currNote = notes[currNoteIndex];\n\t\n\t        state = state.handle(currNote, prevNote, notes.length - 1 - currNoteIndex);\n\t\n\t        // if we are on the last note, then try to create a neume if we need to.\n\t        if (currNoteIndex === notes.length - 1 && state !== unknownState) createNeume(state.neume(), true);\n\t\n\t        currNoteIndex++;\n\t      }\n\t\n\t      if (neumes.length > 0) {\n\t        if (!finalTrailingSpace.isDefault) {\n\t          neumes[neumes.length - 1].trailingSpace = finalTrailingSpace;\n\t          neumes[neumes.length - 1].keepWithNext = true;\n\t\n\t          if (finalTrailingSpace > 0) neumes[neumes.length - 1].allowLineBreakBeforeNext = neumes[neumes.length - 1].keepWithNext = true;\n\t        }\n\t      }\n\t\n\t      return neumes;\n\t    }\n\t\n\t    // appends any notes created to the notes array argument\n\t\n\t  }, {\n\t    key: \"createNoteFromData\",\n\t    value: function createNoteFromData(ctxt, clef, data, notes, sourceIndex) {\n\t      var note = new _ExsurgeChant.Note();\n\t      note.sourceIndex = sourceIndex;\n\t      note.sourceGabc = data;\n\t\n\t      if (data.length < 1) throw \"Invalid note data: \" + data;\n\t\n\t      if (data[0] === \"-\") {\n\t        // liquescent initio debilis\n\t        note.liquescent = _ExsurgeChant.LiquescentType.InitioDebilis;\n\t        data = data.substring(1);\n\t      }\n\t\n\t      if (data.length < 1) throw \"Invalid note data: \" + data;\n\t\n\t      // the next char is always the pitch\n\t      var pitch = this.gabcHeightToExsurgePitch(clef, data[0]);\n\t\n\t      if (data[0] === data[0].toUpperCase()) note.shape = _ExsurgeChant.NoteShape.Inclinatum;\n\t\n\t      note.staffPosition = this.gabcHeightToExsurgeHeight(data[0]);\n\t      note.pitch = pitch;\n\t\n\t      var mark;\n\t\n\t      var episemaNoteIndex = notes.length;\n\t      var episemaNote = note;\n\t\n\t      // process the modifiers\n\t      for (var i = 1; i < data.length; i++) {\n\t        var c = data[i];\n\t        var lookahead = \"\\0\";\n\t\n\t        var haveLookahead = i + 1 < data.length;\n\t        if (haveLookahead) lookahead = data[i + 1];\n\t\n\t        switch (c) {\n\t          // rhythmic markings\n\t          case \".\":\n\t            mark = null;\n\t\n\t            // gabc supports putting up to two morae on each note, by repeating the\n\t            // period. here, we check to see if we've already created a mora for the\n\t            // note, and if so, we simply force the second one to have an Above\n\t            // position hint. if a user decides to try to put position indicators\n\t            // on the double morae (such as 1 or 2), then really the behavior is\n\t            // not defined by gabc, so it's on the user to figure it out.\n\t            if (note.morae.length > 0 && notes.length) {\n\t              var previousNote = notes.slice(-1)[0];\n\t              var previousMora = note.morae.slice(-1)[0];\n\t              previousMora.note = previousNote;\n\t            }\n\t\n\t            mark = new Markings.Mora(ctxt, note);\n\t            if (haveLookahead && lookahead === \"1\") mark.positionHint = _ExsurgeDrawing.MarkingPositionHint.Above;else if (haveLookahead && lookahead === \"0\") mark.positionHint = _ExsurgeDrawing.MarkingPositionHint.Below;\n\t\n\t            note.morae.push(mark);\n\t            break;\n\t\n\t          case \"_\":\n\t            var episemaHadModifier = false;\n\t\n\t            mark = new Markings.HorizontalEpisema(episemaNote);\n\t            while (haveLookahead) {\n\t              if (lookahead === \"0\") mark.positionHint = _ExsurgeDrawing.MarkingPositionHint.Below;else if (lookahead === \"1\") mark.positionHint = _ExsurgeDrawing.MarkingPositionHint.Above;else if (lookahead === \"2\") mark.terminating = true;\n\t              // episema terminates\n\t              else if (lookahead === \"3\") mark.alignment = Markings.HorizontalEpisemaAlignment.Left;else if (lookahead === \"4\") mark.alignment = Markings.HorizontalEpisemaAlignment.Center;else if (lookahead === \"5\") mark.alignment = Markings.HorizontalEpisemaAlignment.Right;else break;\n\t\n\t              // the gabc definition for episemata is so convoluted...\n\t              // - double underscores create episemata over multiple notes.\n\t              // - unless the _ has a 0, 1, 3, 4, or 5 modifier, which means\n\t              //   another underscore puts a second episema on the same note\n\t              // - (when there's a 2 lookahead, then this is treated as an\n\t              //   unmodified underscore, so another underscore would be\n\t              //   added to previous notes\n\t              if (mark.alignment !== Markings.HorizontalEpisemaAlignment.Default && mark.positionHint !== _ExsurgeDrawing.MarkingPositionHint.Below) episemaHadModifier = true;\n\t\n\t              i++;\n\t              haveLookahead = i + 1 < data.length;\n\t\n\t              if (haveLookahead) lookahead = data[i + 1];\n\t            }\n\t\n\t            // since gabc allows consecutive underscores which is a shortcut to\n\t            // apply the episemata to previous notes, we keep track of that here\n\t            // in order to add the new episema to the correct note.\n\t\n\t            if (episemaNote) episemaNote.episemata.push(mark);\n\t\n\t            if (episemaNote === note && episemaHadModifier) episemaNote = note;else if (episemaNoteIndex >= 0 && notes.length > 0) episemaNote = notes[--episemaNoteIndex];\n\t\n\t            break;\n\t\n\t          case \"'\":\n\t            mark = new Markings.Ictus(ctxt, note);\n\t            if (haveLookahead && lookahead === \"1\") mark.positionHint = _ExsurgeDrawing.MarkingPositionHint.Above;else if (haveLookahead && lookahead === \"0\") mark.positionHint = _ExsurgeDrawing.MarkingPositionHint.Below;else if (note.shape === _ExsurgeChant.NoteShape.Virga)\n\t              // ictus on a virga goes above by default:\n\t              mark.positionHint = _ExsurgeDrawing.MarkingPositionHint.Above;\n\t\n\t            note.ictus = mark;\n\t            break;\n\t\n\t          //note shapes\n\t          case \"r\":\n\t            if (haveLookahead && /^[0-5]$/.test(lookahead)) {\n\t              switch (lookahead) {\n\t                case \"0\":\n\t                  note.shapeModifiers |= _ExsurgeChant.NoteShapeModifiers.Cavum;\n\t                  note.shapeModifiers |= _ExsurgeChant.NoteShapeModifiers.Linea;\n\t                  break;\n\t                case \"1\":\n\t                  note.accent = new Markings.Accent(ctxt, note, _ExsurgeDrawing.GlyphCode.AcuteAccent);\n\t                  break;\n\t                case \"2\":\n\t                  note.accent = new Markings.Accent(ctxt, note, _ExsurgeDrawing.GlyphCode.GraveAccent);\n\t                  break;\n\t                case \"3\":\n\t                  note.accent = new Markings.Accent(ctxt, note, _ExsurgeDrawing.GlyphCode.Circle);\n\t                  break;\n\t                case \"4\":\n\t                  note.accent = new Markings.Accent(ctxt, note, _ExsurgeDrawing.GlyphCode.Semicircle);\n\t                  break;\n\t                case \"5\":\n\t                  note.accent = new Markings.Accent(ctxt, note, _ExsurgeDrawing.GlyphCode.ReversedSemicircle);\n\t                  break;\n\t                default:\n\t              }\n\t              i++;\n\t            } else note.shapeModifiers |= _ExsurgeChant.NoteShapeModifiers.Cavum;\n\t            break;\n\t\n\t          case \"R\":\n\t            note.shapeModifiers |= _ExsurgeChant.NoteShapeModifiers.Linea;\n\t            break;\n\t\n\t          case \"s\":\n\t            if (note.shape === _ExsurgeChant.NoteShape.Stropha) {\n\t              // if we're already a stropha, that means this is gabc's\n\t              // quick stropha feature (e.g., gsss). create a new note\n\t              var newNote = new _ExsurgeChant.Note();\n\t              newNote.sourceIndex = sourceIndex + i;\n\t              newNote.sourceGabc = \"s\";\n\t              newNote.staffPosition = note.staffPosition;\n\t              newNote.pitch = note.pitch;\n\t              notes.push(note);\n\t              note = newNote;\n\t              episemaNoteIndex++; // since a new note was added, increase the index here\n\t            }\n\t\n\t            note.shape = _ExsurgeChant.NoteShape.Stropha;\n\t            break;\n\t\n\t          case \"v\":\n\t            if (note.shape === _ExsurgeChant.NoteShape.Virga) {\n\t              // if we're already a stropha, that means this is gabc's\n\t              // quick virga feature (e.g., gvvv). create a new note\n\t              var _newNote = new _ExsurgeChant.Note();\n\t              _newNote.sourceIndex = sourceIndex + i;\n\t              _newNote.sourceGabc = \"v\";\n\t              _newNote.staffPosition = note.staffPosition;\n\t              _newNote.pitch = note.pitch;\n\t              notes.push(note);\n\t              note = _newNote;\n\t              episemaNoteIndex++; // since a new note was added, increase the index here\n\t            }\n\t\n\t            note.shape = _ExsurgeChant.NoteShape.Virga;\n\t            break;\n\t\n\t          case \"V\":\n\t            note.shape = _ExsurgeChant.NoteShape.Virga;\n\t            note.shapeModifers |= _ExsurgeChant.NoteShapeModifiers.Reverse;\n\t            break;\n\t\n\t          case \"w\":\n\t            note.shape = _ExsurgeChant.NoteShape.Quilisma;\n\t            break;\n\t\n\t          case \"o\":\n\t            note.shape = _ExsurgeChant.NoteShape.Oriscus;\n\t            if (haveLookahead && lookahead === \"<\") {\n\t              note.shapeModifiers |= _ExsurgeChant.NoteShapeModifiers.Ascending;\n\t              i++;\n\t            } else if (haveLookahead && lookahead === \">\") {\n\t              note.shapeModifiers |= _ExsurgeChant.NoteShapeModifiers.Descending;\n\t              i++;\n\t            }\n\t            break;\n\t\n\t          case \"O\":\n\t            note.shape = _ExsurgeChant.NoteShape.Oriscus;\n\t            if (haveLookahead && lookahead === \"<\") {\n\t              note.shapeModifiers |= _ExsurgeChant.NoteShapeModifiers.Ascending | _ExsurgeChant.NoteShapeModifiers.Stemmed;\n\t              i++;\n\t            } else if (haveLookahead && lookahead === \">\") {\n\t              note.shapeModifiers |= _ExsurgeChant.NoteShapeModifiers.Descending | _ExsurgeChant.NoteShapeModifiers.Stemmed;\n\t              i++;\n\t            } else note.shapeModifiers |= _ExsurgeChant.NoteShapeModifiers.Stemmed;\n\t            break;\n\t\n\t          // liquescents\n\t          case \"~\":\n\t            if (note.shape === _ExsurgeChant.NoteShape.Inclinatum) note.liquescent |= _ExsurgeChant.LiquescentType.Small;else if (note.shape === _ExsurgeChant.NoteShape.Oriscus) note.liquescent |= _ExsurgeChant.LiquescentType.Large;else note.liquescent |= _ExsurgeChant.LiquescentType.Small;\n\t            break;\n\t          case \"<\":\n\t            note.liquescent |= _ExsurgeChant.LiquescentType.Ascending;\n\t            break;\n\t          case \">\":\n\t            note.liquescent |= _ExsurgeChant.LiquescentType.Descending;\n\t            break;\n\t\n\t          // accidentals\n\t          case \"x\":\n\t            if (note.pitch.step === _ExsurgeCore.Step.Mi) note.pitch.step = _ExsurgeCore.Step.Me;else if (note.pitch.step === _ExsurgeCore.Step.Ti) note.pitch.step = _ExsurgeCore.Step.Te;\n\t            break;\n\t          case \"y\":\n\t            if (note.pitch.step === _ExsurgeCore.Step.Te) note.pitch.step = _ExsurgeCore.Step.Ti;else if (note.pitch.step === _ExsurgeCore.Step.Me) note.pitch.step = _ExsurgeCore.Step.Mi;else if (note.pitch.step === _ExsurgeCore.Step.Du) note.pitch.step = _ExsurgeCore.Step.Do;else if (note.pitch.step === _ExsurgeCore.Step.Fu) note.pitch.step = _ExsurgeCore.Step.Fa;\n\t            break;\n\t          case \"#\":\n\t            if (note.pitch.step === _ExsurgeCore.Step.Do) note.pitch.step = _ExsurgeCore.Step.Du;else if (note.pitch.step === _ExsurgeCore.Step.Fa) note.pitch.step = _ExsurgeCore.Step.Fu;\n\t            break;\n\t\n\t          // gabc special item groups\n\t          case \"[\":\n\t            // read in the whole group and parse it\n\t            var startIndex = ++i;\n\t            while (i < data.length && data[i] !== \"]\") {\n\t              i++;\n\t            }this.processInstructionForNote(ctxt, note, data.substring(startIndex, i), startIndex);\n\t            break;\n\t        }\n\t      }\n\t\n\t      if (this.needToEndBrace && !note.braceStart && !note.braceEnd && !/[xy#]/.test(c)) {\n\t        note.braceEnd = new Markings.BracePoint(note, this.needToEndBrace.isAbove, this.needToEndBrace.shape, this.needToEndBrace.attachment === Markings.BraceAttachment.Left ? Markings.BraceAttachment.Right : Markings.BraceAttachment.Left);\n\t        note.braceEnd.automatic = true;\n\t        delete this.needToEndBrace;\n\t      }\n\t\n\t      notes.push(note);\n\t    }\n\t\n\t    // an instruction in this context is referring to a special gabc coding found after\n\t    // notes between ['s and ]'s. choral signs and braces fall into this\n\t    // category.\n\t    //\n\t    // currently only brace instructions are supported here!\n\t\n\t  }, {\n\t    key: \"processInstructionForNote\",\n\t    value: function processInstructionForNote(ctxt, note, instruction, sourceIndexOffset) {\n\t      var results = instruction.match(__bracketedCommandRegex);\n\t      if (results === null) return;\n\t      var cmd = results[1];\n\t      var data = results[2];\n\t      switch (cmd) {\n\t        case \"cs\":\n\t          note.choralSign = new _ExsurgeDrawing.ChoralSign(ctxt, data, note, note.sourceIndex + sourceIndexOffset, instruction.length);\n\t          return;\n\t        case \"alt\":\n\t          note.alText = new _ExsurgeDrawing.AboveLinesText(ctxt, data, note, note.sourceIndex + sourceIndexOffset, instruction.length);\n\t          return;\n\t      }\n\t\n\t      results = instruction.match(__braceSpecRegex);\n\t\n\t      if (results === null) return;\n\t\n\t      // see the comments at the definition of __braceSpecRegex for the\n\t      // capturing groups\n\t      var above = results[1] === \"o\";\n\t      var shape = Markings.BraceShape.CurlyBrace; // default\n\t\n\t      switch (results[2]) {\n\t        case \"b\":\n\t          shape = Markings.BraceShape.RoundBrace;\n\t          break;\n\t        case \"cb\":\n\t          shape = Markings.BraceShape.CurlyBrace;\n\t          break;\n\t        case \"cba\":\n\t          shape = Markings.BraceShape.AccentedCurlyBrace;\n\t          break;\n\t      }\n\t\n\t      var attachmentPoint = results[3] === \"1\" ? Markings.BraceAttachment.Left : Markings.BraceAttachment.Right;\n\t\n\t      if (results[4] === \"{\" || results[5]) note.braceStart = new Markings.BracePoint(note, above, shape, attachmentPoint);else note.braceEnd = new Markings.BracePoint(note, above, shape, attachmentPoint);\n\t\n\t      // just have the next note end a brace that uses length;\n\t      if (results[5]) {\n\t        note.braceStart.automatic = true;\n\t        this.needToEndBrace = note.braceStart;\n\t      }\n\t    }\n\t\n\t    // takes raw gabc text source and parses it into words. For example, passing\n\t    // in a string of \"me(f.) (,) ma(fff)num(d!ewf) tu(fgF'E)am,(f.)\" would return\n\t    // an array of four strings: [\"me(f.)\", \"(,)\", \"ma(fff)num(d!ewf)\", \"tu(fgF'E)am,(f.)\"]\n\t\n\t  }, {\n\t    key: \"splitWords\",\n\t    value: function splitWords(gabcNotations) {\n\t      // split the notations on whitespace boundaries, as long as the space\n\t      // immediately follows a set of parentheses. Prior to doing that, we replace\n\t      // all whitespace with spaces, which prevents tabs and newlines from ending\n\t      // up in the notation data.\n\t      gabcNotations = gabcNotations\n\t      // .trim()\n\t      // .replace(/\\s/g, \" \")\n\t      .replace(/\\)\\s(?=[^\\)]*(?:\\(|$))/g, \")\\n\");\n\t      return gabcNotations.split(/\\n/g);\n\t    }\n\t  }, {\n\t    key: \"parseSource\",\n\t    value: function parseSource(gabcSource) {\n\t      return this.parseWords(this.splitWords(gabcSource));\n\t    }\n\t\n\t    // gabcWords is an array of strings, e.g., the result of splitWords above\n\t\n\t  }, {\n\t    key: \"parseWords\",\n\t    value: function parseWords(gabcWords) {\n\t      var words = [];\n\t\n\t      for (var i = 0; i < gabcWords.length; i++) {\n\t        words.push(this.parseWord(gabcWords[i]));\n\t      }return words;\n\t    }\n\t\n\t    // returns an array of objects, each of which has the following properties\n\t    //  - notations (string)\n\t    //  - lyrics (array of strings)\n\t\n\t  }, {\n\t    key: \"parseWord\",\n\t    value: function parseWord(gabcWord) {\n\t      var syllables = [];\n\t      var matches = [];\n\t\n\t      syllables.wordLength = gabcWord.length;\n\t\n\t      while (match = __syllablesRegex.exec(gabcWord)) {\n\t        matches.push(match);\n\t      }for (var j = 0; j < matches.length; j++) {\n\t        var match = matches[j];\n\t\n\t        var lyrics = match[1].trim().split(\"|\");\n\t        var notations = match[2];\n\t\n\t        syllables.push({\n\t          notations: notations,\n\t          lyrics: lyrics\n\t        });\n\t      }\n\t\n\t      return syllables;\n\t    }\n\t\n\t    // returns pitch\n\t\n\t  }, {\n\t    key: \"gabcHeightToExsurgeHeight\",\n\t    value: function gabcHeightToExsurgeHeight(gabcHeight) {\n\t      return gabcHeight.toLowerCase().charCodeAt(0) - \"a\".charCodeAt(0) - 6;\n\t    }\n\t\n\t    // returns pitch\n\t\n\t  }, {\n\t    key: \"gabcHeightToExsurgePitch\",\n\t    value: function gabcHeightToExsurgePitch(clef, gabcHeight) {\n\t      var exsurgeHeight = this.gabcHeightToExsurgeHeight(gabcHeight);\n\t\n\t      var pitch = clef.staffPositionToPitch(exsurgeHeight);\n\t\n\t      return pitch;\n\t    }\n\t  }]);\n\n\t  return Gabc;\n\t}();\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Virga = exports.Tristropha = exports.TorculusResupinusFlexus = exports.TorculusResupinus = exports.Torculus = exports.ScandicusFlexus = exports.Scandicus = exports.SalicusFlexus = exports.Salicus = exports.Punctum = exports.PunctaInclinata = exports.PorrectusFlexus = exports.Porrectus = exports.Podatus = exports.PesSubpunctis = exports.PesQuassus = exports.Oriscus = exports.Distropha = exports.Clivis = exports.Climacus = exports.Trivirga = exports.Bivirga = exports.Apostropha = exports.Neume = undefined;\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); //\n\t// Author(s):\n\t// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n\t//\n\t// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a copy\n\t// of this software and associated documentation files (the \"Software\"), to deal\n\t// in the Software without restriction, including without limitation the rights\n\t// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t// copies of the Software, and to permit persons to whom the Software is\n\t// furnished to do so, subject to the following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included in\n\t// all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\t// THE SOFTWARE.\n\t//\n\t\n\tvar _ExsurgeChant = __webpack_require__(5);\n\t\n\tvar _ExsurgeDrawing = __webpack_require__(4);\n\t\n\tvar _ExsurgeGlyphs = __webpack_require__(3);\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar NeumeBuilder = function () {\n\t  function NeumeBuilder(ctxt, neume) {\n\t    var startingX = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\t\n\t    _classCallCheck(this, NeumeBuilder);\n\t\n\t    this.ctxt = ctxt;\n\t    this.neume = neume;\n\t    this.x = startingX;\n\t    this.lastNote = null;\n\t    this.lineIsHanging = false;\n\t    this.minX = 0;\n\t  }\n\t\n\t  // used to start a hanging line on the left of the next note\n\t\n\t\n\t  _createClass(NeumeBuilder, [{\n\t    key: \"lineFrom\",\n\t    value: function lineFrom(note) {\n\t      var previousNotation = this.ctxt.notations[this.ctxt.currNotationIndex - 1];\n\t      if (this.x === 0 && previousNotation && previousNotation.notes && previousNotation.trailingSpace === 0) {\n\t        this.lastNote = previousNotation.notes.slice(-1)[0];\n\t        this.minX = -this.ctxt.neumeLineWeight;\n\t      } else {\n\t        this.lastNote = note;\n\t        this.lineIsHanging = true;\n\t      }\n\t      return this;\n\t    }\n\t\n\t    // add a note, with a connecting line on the left if we have one\n\t\n\t  }, {\n\t    key: \"noteAt\",\n\t    value: function noteAt(note, glyph) {\n\t      var withLineTo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\t\n\t      if (!note) throw \"NeumeBuilder.noteAt: note must be a valid note\";\n\t\n\t      if (!glyph) throw \"NeumeBuilder.noteAt: glyph must be a valid glyph code\";\n\t\n\t      note.setGlyph(this.ctxt, glyph);\n\t      var noteAlignsRight = note.glyphVisualizer.align === \"right\";\n\t\n\t      var needsLine = withLineTo && this.lastNote !== null && (this.lineIsHanging || this.lastNote.glyphVisualizer && this.lastNote.glyphVisualizer.align === \"right\" || Math.abs(this.lastNote.staffPosition - note.staffPosition) > 1);\n\t\n\t      if (needsLine) {\n\t        var line = new _ExsurgeDrawing.NeumeLineVisualizer(this.ctxt, this.lastNote, note, this.lineIsHanging);\n\t        this.neume.addVisualizer(line);\n\t        line.bounds.x = Math.max(this.minX, this.x - line.bounds.width);\n\t\n\t        if (!noteAlignsRight) this.x = line.bounds.x;\n\t      }\n\t\n\t      var xOffset = 0;\n\t      if (note.shapeModifiers & _ExsurgeChant.NoteShapeModifiers.Linea) {\n\t        var linea = new _ExsurgeDrawing.LineaVisualizer(this.ctxt, note);\n\t        this.neume.addVisualizer(linea);\n\t        note.origin.x += linea.origin.x;\n\t        xOffset = linea.origin.x;\n\t      }\n\t\n\t      // if this is the first note of a right aligned glyph (probably an initio debilis),\n\t      // then there's nothing to worry about. but if it's not then first, then this\n\t      // subtraction will right align it visually\n\t      if (noteAlignsRight && this.lastNote) note.bounds.x = this.x - note.bounds.width;else {\n\t        note.bounds.x = this.x + xOffset;\n\t        this.x += note.bounds.width + xOffset;\n\t      }\n\t\n\t      this.neume.addVisualizer(note);\n\t\n\t      this.lastNote = note;\n\t      this.lineIsHanging = false;\n\t\n\t      return this;\n\t    }\n\t\n\t    // a special form of noteAdd that creates a virga\n\t    // uses a punctum cuadratum and a line rather than the virga glyphs\n\t\n\t  }, {\n\t    key: \"virgaAt\",\n\t    value: function virgaAt(note) {\n\t      var withLineTo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\t\n\t      // add the punctum for the virga\n\t      this.noteAt(note, _ExsurgeDrawing.GlyphCode.PunctumQuadratum);\n\t\n\t      // add a line for the virga\n\t      var line = new _ExsurgeDrawing.VirgaLineVisualizer(this.ctxt, note);\n\t      this.x -= line.bounds.width;\n\t      if (note.shapeModifers & _ExsurgeChant.NoteShapeModifiers.Reverse) {\n\t        line.bounds.x = 0;\n\t      } else {\n\t        line.bounds.x = this.x;\n\t      }\n\t      this.neume.addVisualizer(line);\n\t\n\t      this.lastNote = note;\n\t      this.lineIsHanging = false;\n\t\n\t      return this;\n\t    }\n\t  }, {\n\t    key: \"advanceBy\",\n\t    value: function advanceBy(x) {\n\t      this.lastNote = null;\n\t      this.lineIsHanging = false;\n\t\n\t      this.x += x;\n\t\n\t      return this;\n\t    }\n\t\n\t    // for terminating hanging lines with no lower notes\n\t\n\t  }, {\n\t    key: \"withLineEndingAt\",\n\t    value: function withLineEndingAt(note) {\n\t      if (this.lastNote === null) return;\n\t\n\t      var line = new _ExsurgeDrawing.NeumeLineVisualizer(this.ctxt, this.lastNote, note, true);\n\t      this.neume.addVisualizer(line);\n\t      this.x -= line.bounds.width;\n\t      line.bounds.x = this.x;\n\t\n\t      this.neume.addVisualizer(line);\n\t\n\t      this.lastNote = note;\n\t\n\t      return this;\n\t    }\n\t  }, {\n\t    key: \"withPodatus\",\n\t    value: function withPodatus(lowerNote, upperNote) {\n\t      var upperGlyph;\n\t      var lowerGlyph;\n\t\n\t      if (lowerNote.liquescent === _ExsurgeChant.LiquescentType.InitioDebilis) {\n\t        // liquescent upper note or not?\n\t        if (upperNote.liquescent === _ExsurgeChant.LiquescentType.None) upperGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;else upperGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;\n\t\n\t        lowerGlyph = _ExsurgeDrawing.GlyphCode.TerminatingDesLiquescent;\n\t      } else if (upperNote.liquescent & _ExsurgeChant.LiquescentType.Small) {\n\t        lowerGlyph = _ExsurgeDrawing.GlyphCode.BeginningAscLiquescent;\n\t        upperGlyph = _ExsurgeDrawing.GlyphCode.TerminatingAscLiquescent;\n\t      } else if (upperNote.liquescent & _ExsurgeChant.LiquescentType.Ascending) {\n\t        lowerGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t        upperGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumAscLiquescent;\n\t      } else if (upperNote.liquescent & _ExsurgeChant.LiquescentType.Descending) {\n\t        lowerGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t        upperGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;\n\t      } else {\n\t        // standard shape\n\t        lowerGlyph = _ExsurgeDrawing.GlyphCode.PodatusLower;\n\t        upperGlyph = _ExsurgeDrawing.GlyphCode.PodatusUpper;\n\t      }\n\t\n\t      // allow a quilisma pes\n\t      if (lowerNote.shape === _ExsurgeChant.NoteShape.Quilisma) lowerGlyph = _ExsurgeDrawing.GlyphCode.Quilisma;\n\t\n\t      this.noteAt(lowerNote, lowerGlyph).noteAt(upperNote, upperGlyph);\n\t\n\t      // make sure we don't have lines connected to the podatus\n\t      this.lastNote = null;\n\t\n\t      return this;\n\t    }\n\t  }, {\n\t    key: \"withClivis\",\n\t    value: function withClivis(upper, lower) {\n\t      var lowerGlyph;\n\t\n\t      if (upper.shape === _ExsurgeChant.NoteShape.Oriscus) this.noteAt(upper, _ExsurgeDrawing.GlyphCode.OriscusDes, false);else this.lineFrom(lower).noteAt(upper, _ExsurgeDrawing.GlyphCode.PunctumQuadratum);\n\t\n\t      if (lower.liquescent & _ExsurgeChant.LiquescentType.Small) {\n\t        lowerGlyph = _ExsurgeDrawing.GlyphCode.TerminatingDesLiquescent;\n\t      } else if (lower.liquescent === _ExsurgeChant.LiquescentType.Ascending) lowerGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumAscLiquescent;else if (lower.liquescent === _ExsurgeChant.LiquescentType.Descending) lowerGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;else lowerGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t\n\t      this.noteAt(lower, lowerGlyph);\n\t\n\t      // make sure we don't have lines connected to the clivis\n\t      this.lastNote = null;\n\t\n\t      return this;\n\t    }\n\t\n\t    // lays out a sequence of notes that are inclinata (e.g., climacus, pes subpunctis)\n\t\n\t  }, {\n\t    key: \"withInclinata\",\n\t    value: function withInclinata(notes) {\n\t      var staffPosition = notes[0].staffPosition,\n\t          prevStaffPosition = notes[0].staffPosition;\n\t\n\t      // it is important to advance by the width of the inclinatum glyph itself\n\t      // rather than by individual note widths, so that any liquescents are spaced\n\t      // the same as non-liquscents\n\t      var advanceWidth = _ExsurgeGlyphs.Glyphs.PunctumInclinatum.bounds.width * this.ctxt.glyphScaling;\n\t\n\t      // now add all the punctum inclinatum\n\t      for (var i = 0; i < notes.length; i++, prevStaffPosition = staffPosition) {\n\t        var note = notes[i];\n\t\n\t        if (note.liquescent & _ExsurgeChant.LiquescentType.Small) note.setGlyph(this.ctxt, _ExsurgeDrawing.GlyphCode.PunctumInclinatumLiquescent);else if (note.liquescent & _ExsurgeChant.LiquescentType.Large)\n\t          // fixme: is the large inclinatum liquescent the same as the apostropha?\n\t          note.setGlyph(this.ctxt, _ExsurgeDrawing.GlyphCode.Stropha);\n\t          // fixme: some climaci in the new chant books end with a punctum quadratum\n\t          // (see, for example, the antiphon \"Sancta Maria\" for October 7).\n\t        else note.setGlyph(this.ctxt, _ExsurgeDrawing.GlyphCode.PunctumInclinatum);\n\t\n\t        staffPosition = note.staffPosition;\n\t\n\t        var multiple = Math.abs(prevStaffPosition - staffPosition);\n\t        switch (multiple) {\n\t          case 0:\n\t            multiple = 1.1;\n\t            break;\n\t          default:\n\t            multiple *= 2 / 3;\n\t            break;\n\t        }\n\t\n\t        if (i > 0) this.x += advanceWidth * multiple;\n\t\n\t        note.bounds.x = this.x;\n\t\n\t        this.neume.addVisualizer(note);\n\t      }\n\t\n\t      return this;\n\t    }\n\t  }, {\n\t    key: \"withPorrectusSwash\",\n\t    value: function withPorrectusSwash(start, end) {\n\t      var needsLine = this.lastNote !== null && (this.lineIsHanging || this.lastNote.glyphVisualizer && this.lastNote.glyphVisualizer.align === \"right\" || Math.abs(this.lastNote.staffPosition - start.staffPosition) > 1);\n\t\n\t      if (needsLine) {\n\t        var line = new _ExsurgeDrawing.NeumeLineVisualizer(this.ctxt, this.lastNote, start, this.lineIsHanging);\n\t        this.x = Math.max(this.minX, this.x - line.bounds.width);\n\t        line.bounds.x = this.x;\n\t        this.neume.addVisualizer(line);\n\t      }\n\t\n\t      var glyph;\n\t\n\t      switch (start.staffPosition - end.staffPosition) {\n\t        case 1:\n\t          glyph = _ExsurgeDrawing.GlyphCode.Porrectus1;\n\t          break;\n\t        case 2:\n\t          glyph = _ExsurgeDrawing.GlyphCode.Porrectus2;\n\t          break;\n\t        case 3:\n\t          glyph = _ExsurgeDrawing.GlyphCode.Porrectus3;\n\t          break;\n\t        case 4:\n\t          glyph = _ExsurgeDrawing.GlyphCode.Porrectus4;\n\t          break;\n\t        default:\n\t          // fixme: should we generate an error here?\n\t          glyph = _ExsurgeDrawing.GlyphCode.None;\n\t          break;\n\t      }\n\t\n\t      start.setGlyph(this.ctxt, glyph);\n\t      start.bounds.x = this.x;\n\t\n\t      // the second glyph does not draw anything, but it still has logical importance for the editing\n\t      // environment...it can respond to changes which will then change the swash glyph of the first.\n\t      end.setGlyph(this.ctxt, _ExsurgeDrawing.GlyphCode.None);\n\t\n\t      this.x = start.bounds.right();\n\t      end.bounds.x = this.x - end.bounds.width;\n\t\n\t      this.neume.addVisualizer(start);\n\t      this.neume.addVisualizer(end);\n\t\n\t      this.lastNote = end;\n\t      this.lineIsHanging = false;\n\t\n\t      return this;\n\t    }\n\t  }]);\n\t\n\t  return NeumeBuilder;\n\t}();\n\t\n\t/*\n\t * Neumes base class\n\t */\n\t\n\t\n\tvar Neume = exports.Neume = function (_ChantNotationElement) {\n\t  _inherits(Neume, _ChantNotationElement);\n\t\n\t  function Neume() {\n\t    var notes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\t\n\t    _classCallCheck(this, Neume);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Neume.__proto__ || Object.getPrototypeOf(Neume)).call(this));\n\t\n\t    _this.isNeume = true; // poor man's reflection\n\t    _this.notes = notes;\n\t\n\t    for (var i = 0; i < notes.length; i++) {\n\t      notes[i].neume = _this;\n\t    }return _this;\n\t  }\n\t\n\t  _createClass(Neume, [{\n\t    key: \"addNote\",\n\t    value: function addNote(note) {\n\t      note.neume = this;\n\t      this.notes.push(note);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Neume.prototype.__proto__ || Object.getPrototypeOf(Neume.prototype), \"performLayout\", this).call(this, ctxt);\n\t    }\n\t  }, {\n\t    key: \"finishLayout\",\n\t    value: function finishLayout(ctxt) {\n\t      this.ledgerLines = this.requiresLedgerLine();\n\t\n\t      // allow subclasses an opportunity to position their own markings...\n\t      this.positionMarkings();\n\t\n\t      // layout the markings of the notes\n\t      for (var i = 0; i < this.notes.length; i++) {\n\t        var note = this.notes[i];\n\t        var j;\n\t\n\t        for (j = 0; j < note.episemata.length; j++) {\n\t          note.episemata[j].performLayout(ctxt);\n\t          this.addVisualizer(note.episemata[j]);\n\t        }\n\t\n\t        for (j = 0; j < note.morae.length; j++) {\n\t          note.morae[j].performLayout(ctxt);\n\t          this.addVisualizer(note.morae[j]);\n\t        }\n\t\n\t        // if the note has an ictus, then add it here\n\t        if (note.ictus) {\n\t          note.ictus.performLayout(ctxt);\n\t          this.addVisualizer(note.ictus);\n\t        }\n\t\n\t        if (note.accent) {\n\t          note.accent.performLayout(ctxt);\n\t          this.addVisualizer(note.accent);\n\t        }\n\t\n\t        if (note.choralSign) {\n\t          note.choralSign.performLayout(ctxt);\n\t          this.addVisualizer(note.choralSign);\n\t        }\n\t\n\t        // braces are handled by the chant line, so we don't mess with them here\n\t        // this is because brace size depends on chant line logic (neume spacing,\n\t        // justification, etc.) so they are considered chant line level\n\t        // markings rather than note level markings\n\t      }\n\t\n\t      this.origin.x = this.notes[0].origin.x;\n\t      this.origin.y = this.notes[0].origin.y;\n\t\n\t      _get(Neume.prototype.__proto__ || Object.getPrototypeOf(Neume.prototype), \"finishLayout\", this).call(this, ctxt);\n\t    }\n\t  }, {\n\t    key: \"requiresLedgerLine\",\n\t    value: function requiresLedgerLine() {\n\t      var firstAbove = false,\n\t          needsAbove = false,\n\t          firstBelow = false,\n\t          needsBelow = false,\n\t\n\t      // isPorrectus = false,\n\t      result = [];\n\t\n\t      if (!this.notes) return result;\n\t\n\t      for (var i = 0; i < this.notes.length; ++i) {\n\t        var note = this.notes[i];\n\t        var staffPosition = note.staffPosition;\n\t        if (staffPosition >= 4) {\n\t          needsAbove = needsAbove || staffPosition >= 5;\n\t          if (firstAbove === false) firstAbove = Math.max(0, i - 1);\n\t          if (staffPosition >= 5) continue;\n\t        } else if (staffPosition <= -4) {\n\t          needsBelow = needsBelow || staffPosition <= -5;\n\t          if (firstBelow === false) firstBelow = Math.max(0, i - 1);\n\t          if (staffPosition <= -5) continue;\n\t        }\n\t        if (needsAbove || needsBelow) {\n\t          var endI = i; // Math.abs(staffPosition) >= 4? i : i - 1;\n\t          result.push({\n\t            element: this.notes[firstAbove || firstBelow || 0],\n\t            endElem: this.notes[endI],\n\t            staffPosition: needsAbove ? 5 : -5\n\t          });\n\t          firstAbove = firstBelow = needsAbove = needsBelow = false;\n\t        }\n\t        // isPorrectus = /^Porrectus\\d$/.test(note.glyphVisualizer.glyphCode);\n\t      }\n\t      if (needsAbove || needsBelow) {\n\t        result.push({\n\t          element: this.notes[firstAbove || firstBelow || 0],\n\t          endElem: this.notes[this.notes.length - 1],\n\t          staffPosition: needsAbove ? 5 : -5\n\t        });\n\t      }\n\t      return result;\n\t    }\n\t  }, {\n\t    key: \"resetDependencies\",\n\t    value: function resetDependencies() {}\n\t  }, {\n\t    key: \"build\",\n\t    value: function build(ctxt) {\n\t      return new NeumeBuilder(ctxt, this);\n\t    }\n\t  }, {\n\t    key: \"positionEpisemata\",\n\t    value: function positionEpisemata(note, position) {\n\t      var i;\n\t      for (i = 0; i < note.episemata.length; i++) {\n\t        if (note.episemata[i].positionHint === _ExsurgeDrawing.MarkingPositionHint.Default) note.episemata[i].positionHint = position;\n\t      }if (note.choralSign) note.choralSign.positionHint = position;\n\t      return note.episemata.length;\n\t    }\n\t  }, {\n\t    key: \"positionEpisemataAbove\",\n\t    value: function positionEpisemataAbove(note) {\n\t      return this.positionEpisemata(note, _ExsurgeDrawing.MarkingPositionHint.Above);\n\t    }\n\t  }, {\n\t    key: \"positionEpisemataBelow\",\n\t    value: function positionEpisemataBelow(note) {\n\t      return this.positionEpisemata(note, _ExsurgeDrawing.MarkingPositionHint.Below);\n\t    }\n\t  }, {\n\t    key: \"positionPodatusEpisemata\",\n\t    value: function positionPodatusEpisemata(bottomNote, topNote) {\n\t      // 1. episema on lower note by default be below, upper note above\n\t      this.positionEpisemataBelow(bottomNote);\n\t      this.positionEpisemataAbove(topNote);\n\t    }\n\t  }, {\n\t    key: \"positionInclinataMorae\",\n\t    value: function positionInclinataMorae(notes) {\n\t      notes = notes.slice(-2);\n\t      if (notes.length < 2 || notes[1].staffPosition > notes[0].staffPosition) return;\n\t      var bottomNote = notes[1],\n\t          topNote = notes[0],\n\t          mark;\n\t\n\t      // The mora on the second (lower) note should be below the punctum,\n\t      // if the punctum is on a line and the previous punctum is in the space above.\n\t      if (Math.abs(bottomNote.staffPosition % 2) === 1 && topNote.staffPosition - bottomNote.staffPosition === 1 && bottomNote.morae.length > 0) {\n\t        mark = bottomNote.morae.slice(-1)[0];\n\t        if (mark.positionHint === _ExsurgeDrawing.MarkingPositionHint.Default) mark.positionHint = _ExsurgeDrawing.MarkingPositionHint.Below;\n\t      }\n\t    }\n\t  }, {\n\t    key: \"positionPodatusMorae\",\n\t    value: function positionPodatusMorae(bottomNote, topNote) {\n\t      var mark;\n\t\n\t      // The mora on the first (lower) note should be below it,\n\t      // if it is on a line.\n\t      if (Math.abs(bottomNote.staffPosition % 2) === 1) {\n\t        if (bottomNote.morae.length === 1) {\n\t          mark = bottomNote.morae[0];\n\t        } else if (topNote.morae.length > 1) {\n\t          mark = topNote.morae[0];\n\t        }\n\t        if (mark && mark.positionHint === _ExsurgeDrawing.MarkingPositionHint.Default) mark.positionHint = _ExsurgeDrawing.MarkingPositionHint.Below;\n\t      }\n\t\n\t      // if there is a mora on the first note but not on the second, and the neume\n\t      // continues with a punctum higher than the second note, we need to adjust\n\t      // the space after the neume so that it follows immediately with no gap\n\t      if (bottomNote.morae.length > 0 && topNote.morae.length === 0) {\n\t        bottomNote.morae[0].ignoreBounds = true;\n\t      }\n\t    }\n\t    // for any subclasses that begin with a podatus, they can call this from their own positionMarkings()\n\t\n\t  }, {\n\t    key: \"positionPodatusMarkings\",\n\t    value: function positionPodatusMarkings(bottomNote, topNote) {\n\t      this.positionPodatusEpisemata(bottomNote, topNote);\n\t      this.positionPodatusMorae(bottomNote, topNote);\n\t    }\n\t\n\t    // just like a clivis, but the first note of the three also works like the second note of the clivis:\n\t    // episema below, unless the middle note also has an episema\n\t\n\t  }, {\n\t    key: \"positionTorculusMarkings\",\n\t    value: function positionTorculusMarkings(firstNote, secondNote, thirdNote) {\n\t      var hasTopEpisema = this.positionClivisMarkings(secondNote, thirdNote);\n\t      hasTopEpisema = this.positionEpisemata(firstNote, hasTopEpisema ? _ExsurgeDrawing.MarkingPositionHint.Above : _ExsurgeDrawing.MarkingPositionHint.Below) && hasTopEpisema;\n\t      return hasTopEpisema;\n\t    }\n\t  }, {\n\t    key: \"positionClivisMorae\",\n\t    value: function positionClivisMorae(firstNote, secondNote) {\n\t      // 1. second note of a clivis that ends on a line and goes down one step has its mora below:\n\t      var morae = firstNote.morae.concat(secondNote.morae);\n\t      if (secondNote.morae.length && firstNote.staffPosition - secondNote.staffPosition === 1 && Math.abs(secondNote.staffPosition % 2) === 1) {\n\t        morae.slice(-1)[0].positionHint = _ExsurgeDrawing.MarkingPositionHint.Below;\n\t      }\n\t    }\n\t  }, {\n\t    key: \"positionClivisEpisemata\",\n\t    value: function positionClivisEpisemata(firstNote, secondNote) {\n\t      var hasTopEpisema = this.positionEpisemataAbove(firstNote);\n\t      this.positionEpisemata(secondNote, hasTopEpisema ? _ExsurgeDrawing.MarkingPositionHint.Above : _ExsurgeDrawing.MarkingPositionHint.Below);\n\t      return hasTopEpisema;\n\t    }\n\t  }, {\n\t    key: \"positionClivisMarkings\",\n\t    value: function positionClivisMarkings(firstNote, secondNote) {\n\t      this.positionClivisMorae(firstNote, secondNote);\n\t      return this.positionClivisEpisemata(firstNote, secondNote);\n\t    }\n\t  }, {\n\t    key: \"positionPorrectusMarkings\",\n\t    value: function positionPorrectusMarkings(firstNote, secondNote, thirdNote) {\n\t      // episemata on first and second note work like a clivis,\n\t      // the second note should have its episema below, unless the first note also has an episema.\n\t      this.positionClivisEpisemata(firstNote, secondNote);\n\t      this.positionPodatusMarkings(secondNote, thirdNote);\n\t    }\n\t  }, {\n\t    key: \"positionPorrectusFlexusMarkings\",\n\t    value: function positionPorrectusFlexusMarkings(first, second, third, fourth) {\n\t      var hasTopEpisema = this.positionEpisemataAbove(first);\n\t      hasTopEpisema = this.positionClivisMarkings(third, fourth) || hasTopEpisema;\n\t      this.positionEpisemata(second, hasTopEpisema ? _ExsurgeDrawing.MarkingPositionHint.Above : _ExsurgeDrawing.MarkingPositionHint.Below);\n\t    }\n\t\n\t    // subclasses can override this in order to correctly place markings in a neume specific way\n\t\n\t  }, {\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {}\n\t  }]);\n\t\n\t  return Neume;\n\t}(_ExsurgeDrawing.ChantNotationElement);\n\t\n\t/*\n\t * Apostropha\n\t */\n\t\n\t\n\tvar Apostropha = exports.Apostropha = function (_Neume) {\n\t  _inherits(Apostropha, _Neume);\n\t\n\t  function Apostropha() {\n\t    _classCallCheck(this, Apostropha);\n\t\n\t    return _possibleConstructorReturn(this, (Apostropha.__proto__ || Object.getPrototypeOf(Apostropha)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Apostropha, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      var positionHint = _ExsurgeDrawing.MarkingPositionHint.Above;\n\t\n\t      // logic here is this: if first episema is default position, place it above.\n\t      // then place the second one (if there is one) opposite of the first.\n\t      for (var i = 0; i < this.notes[0].episemata.length; i++) {\n\t        if (this.notes[0].episemata[i].positionHint === _ExsurgeDrawing.MarkingPositionHint.Default) this.notes[0].episemata[i].positionHint = positionHint;else positionHint = this.notes[0].episemata[i].positionHint;\n\t\n\t        // now place the next one in the opposite position\n\t        positionHint = positionHint === _ExsurgeDrawing.MarkingPositionHint.Above ? _ExsurgeDrawing.MarkingPositionHint.Below : _ExsurgeDrawing.MarkingPositionHint.Above;\n\t      }\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Apostropha.prototype.__proto__ || Object.getPrototypeOf(Apostropha.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      this.build(ctxt).noteAt(this.notes[0], Apostropha.getNoteGlyphCode(this.notes[0]));\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }], [{\n\t    key: \"getNoteGlyphCode\",\n\t    value: function getNoteGlyphCode(note) {\n\t      if (note.shape === _ExsurgeChant.NoteShape.Stropha) return _ExsurgeDrawing.GlyphCode.Stropha;\n\t\n\t      if (note.liquescent & _ExsurgeChant.LiquescentType.Ascending) return _ExsurgeDrawing.GlyphCode.PunctumQuadratumAscLiquescent;else if (note.liquescent & _ExsurgeChant.LiquescentType.Descending) return _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;\n\t\n\t      if (note.shapeModifiers & _ExsurgeChant.NoteShapeModifiers.Cavum) return _ExsurgeDrawing.GlyphCode.PunctumCavum;\n\t\n\t      return _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t    }\n\t  }]);\n\t\n\t  return Apostropha;\n\t}(Neume);\n\t\n\t/*\n\t * Bivirga\n\t *\n\t * For simplicity in implementation, Bivirga's have two notes in the object\n\t * structure. These technically must be the same pitch though.\n\t */\n\t\n\t\n\tvar Bivirga = exports.Bivirga = function (_Neume2) {\n\t  _inherits(Bivirga, _Neume2);\n\t\n\t  function Bivirga() {\n\t    _classCallCheck(this, Bivirga);\n\t\n\t    return _possibleConstructorReturn(this, (Bivirga.__proto__ || Object.getPrototypeOf(Bivirga)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Bivirga, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionEpisemataAbove(this.notes[0]);\n\t      this.positionEpisemataAbove(this.notes[1]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Bivirga.prototype.__proto__ || Object.getPrototypeOf(Bivirga.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      this.build(ctxt).virgaAt(this.notes[0]).advanceBy(ctxt.intraNeumeSpacing).virgaAt(this.notes[1]);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Bivirga;\n\t}(Neume);\n\t\n\t/*\n\t * Trivirga\n\t *\n\t * For simplicity in implementation, Trivirga's have three notes in the object\n\t * structure. These technically must be the same pitch though.\n\t */\n\t\n\t\n\tvar Trivirga = exports.Trivirga = function (_Neume3) {\n\t  _inherits(Trivirga, _Neume3);\n\t\n\t  function Trivirga() {\n\t    _classCallCheck(this, Trivirga);\n\t\n\t    return _possibleConstructorReturn(this, (Trivirga.__proto__ || Object.getPrototypeOf(Trivirga)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Trivirga, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionEpisemataAbove(this.notes[0]);\n\t      this.positionEpisemataAbove(this.notes[1]);\n\t      this.positionEpisemataAbove(this.notes[2]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Trivirga.prototype.__proto__ || Object.getPrototypeOf(Trivirga.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      this.build(ctxt).virgaAt(this.notes[0]).advanceBy(ctxt.intraNeumeSpacing).virgaAt(this.notes[1]).advanceBy(ctxt.intraNeumeSpacing).virgaAt(this.notes[2]);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Trivirga;\n\t}(Neume);\n\t\n\t/*\n\t * Climacus\n\t */\n\t\n\t\n\tvar Climacus = exports.Climacus = function (_Neume4) {\n\t  _inherits(Climacus, _Neume4);\n\t\n\t  function Climacus() {\n\t    _classCallCheck(this, Climacus);\n\t\n\t    return _possibleConstructorReturn(this, (Climacus.__proto__ || Object.getPrototypeOf(Climacus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Climacus, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      for (var i = 0; i < this.notes.length; i++) {\n\t        this.positionEpisemataAbove(this.notes[i]);\n\t      }\n\t      this.positionInclinataMorae(this.notes);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Climacus.prototype.__proto__ || Object.getPrototypeOf(Climacus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      this.build(ctxt).virgaAt(this.notes[0]).advanceBy(ctxt.intraNeumeSpacing).withInclinata(this.notes.slice(1));\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Climacus;\n\t}(Neume);\n\t\n\t/*\n\t * Clivis\n\t */\n\t\n\t\n\tvar Clivis = exports.Clivis = function (_Neume5) {\n\t  _inherits(Clivis, _Neume5);\n\t\n\t  function Clivis() {\n\t    _classCallCheck(this, Clivis);\n\t\n\t    return _possibleConstructorReturn(this, (Clivis.__proto__ || Object.getPrototypeOf(Clivis)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Clivis, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionClivisMarkings(this.notes[0], this.notes[1]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Clivis.prototype.__proto__ || Object.getPrototypeOf(Clivis.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var upper = this.notes[0];\n\t      var lower = this.notes[1];\n\t\n\t      this.build(ctxt).withClivis(upper, lower);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Clivis;\n\t}(Neume);\n\t\n\t/*\n\t * Distropha\n\t *\n\t * For simplicity in implementation, Distropha's have two notes in the object\n\t * structure. These technically must be the same pitch though (like Bivirga).\n\t */\n\t\n\t\n\tvar Distropha = exports.Distropha = function (_Neume6) {\n\t  _inherits(Distropha, _Neume6);\n\t\n\t  function Distropha() {\n\t    _classCallCheck(this, Distropha);\n\t\n\t    return _possibleConstructorReturn(this, (Distropha.__proto__ || Object.getPrototypeOf(Distropha)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Distropha, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionEpisemataAbove(this.notes[0]);\n\t      this.positionEpisemataAbove(this.notes[1]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Distropha.prototype.__proto__ || Object.getPrototypeOf(Distropha.prototype), \"performLayout\", this).call(this, ctxt);\n\t      var glyphCodes = this.notes.map(function (note) {\n\t        return Apostropha.getNoteGlyphCode(note);\n\t      });\n\t      var glyphAdvance = ctxt.intraNeumeSpacing;\n\t      glyphCodes.slice(0, 2).forEach(function (glyphCode) {\n\t        if (glyphCode === _ExsurgeDrawing.GlyphCode.Stropha) glyphAdvance -= ctxt.intraNeumeSpacing / 4;\n\t      });\n\t\n\t      this.build(ctxt).noteAt(this.notes[0], glyphCodes[0]).advanceBy(glyphAdvance).noteAt(this.notes[1], glyphCodes[1]);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Distropha;\n\t}(Neume);\n\t\n\t/*\n\t * Oriscus\n\t */\n\t\n\t\n\tvar Oriscus = exports.Oriscus = function (_Neume7) {\n\t  _inherits(Oriscus, _Neume7);\n\t\n\t  function Oriscus() {\n\t    _classCallCheck(this, Oriscus);\n\t\n\t    return _possibleConstructorReturn(this, (Oriscus.__proto__ || Object.getPrototypeOf(Oriscus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Oriscus, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionEpisemataAbove(this.notes[0]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Oriscus.prototype.__proto__ || Object.getPrototypeOf(Oriscus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      // determine the glyph to use\n\t      var note = this.notes[0];\n\t      var glyph;\n\t\n\t      if (note.liquescent !== _ExsurgeChant.LiquescentType.None) {\n\t        glyph = _ExsurgeDrawing.GlyphCode.OriscusLiquescent;\n\t      } else {\n\t        if (note.shapeModifiers & _ExsurgeChant.NoteShapeModifiers.Ascending) glyph = _ExsurgeDrawing.GlyphCode.OriscusAsc;else if (note.shapeModifiers & _ExsurgeChant.NoteShapeModifiers.Descending) glyph = _ExsurgeDrawing.GlyphCode.OriscusDes;else {\n\t          // by default we take the descending form, unless we can figure out by a lookahead here\n\t          glyph = _ExsurgeDrawing.GlyphCode.OriscusDes;\n\t\n\t          // try to find a neume following this one\n\t          var neume = ctxt.findNextNeume();\n\t\n\t          if (neume) {\n\t            var nextNoteStaffPosition = ctxt.activeClef.pitchToStaffPosition(neume.notes[0].pitch);\n\t\n\t            if (nextNoteStaffPosition > note.staffPosition) glyph = _ExsurgeDrawing.GlyphCode.OriscusAsc;\n\t          }\n\t        }\n\t      }\n\t\n\t      this.build(ctxt).noteAt(note, glyph);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }, {\n\t    key: \"resetDependencies\",\n\t    value: function resetDependencies() {\n\t      // a single oriscus tries to automatically use the right direction\n\t      // based on the following neumes. if we don't have a manually designated\n\t      // direction, then we reset our layout so that we can try to guess it\n\t      // at next layout phase.\n\t      if (this.notes[0].shapeModifiers & _ExsurgeChant.NoteShapeModifiers.Ascending || this.notes[0].shapeModifiers & _ExsurgeChant.NoteShapeModifiers.Descending) return;\n\t\n\t      this.needsLayout = true;\n\t    }\n\t  }]);\n\t\n\t  return Oriscus;\n\t}(Neume);\n\t\n\t/*\n\t * PesQuassus\n\t */\n\t\n\t\n\tvar PesQuassus = exports.PesQuassus = function (_Neume8) {\n\t  _inherits(PesQuassus, _Neume8);\n\t\n\t  function PesQuassus() {\n\t    _classCallCheck(this, PesQuassus);\n\t\n\t    return _possibleConstructorReturn(this, (PesQuassus.__proto__ || Object.getPrototypeOf(PesQuassus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(PesQuassus, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(PesQuassus.prototype.__proto__ || Object.getPrototypeOf(PesQuassus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var lower = this.notes[0];\n\t      var upper = this.notes[1];\n\t\n\t      var lowerGlyph;\n\t\n\t      var lowerStaffPos = lower.staffPosition;\n\t      var upperStaffPos = upper.staffPosition;\n\t\n\t      if (lower.shape === _ExsurgeChant.NoteShape.Oriscus) lowerGlyph = _ExsurgeDrawing.GlyphCode.OriscusAsc;else lowerGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t\n\t      var builder = this.build(ctxt).noteAt(lower, lowerGlyph);\n\t\n\t      if (upperStaffPos - lowerStaffPos === 1)\n\t        // use a virga glyph in this case\n\t        builder.virgaAt(upper);else if (upper.liquescent === _ExsurgeChant.LiquescentType.LargeDescending) builder.noteAt(upper, _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent).withLineEndingAt(lower);else builder.noteAt(upper, _ExsurgeDrawing.GlyphCode.PunctumQuadratum).withLineEndingAt(lower);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return PesQuassus;\n\t}(Neume);\n\t\n\t/*\n\t * PesSubpunctis\n\t */\n\t\n\t\n\tvar PesSubpunctis = exports.PesSubpunctis = function (_Neume9) {\n\t  _inherits(PesSubpunctis, _Neume9);\n\t\n\t  function PesSubpunctis() {\n\t    _classCallCheck(this, PesSubpunctis);\n\t\n\t    return _possibleConstructorReturn(this, (PesSubpunctis.__proto__ || Object.getPrototypeOf(PesSubpunctis)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(PesSubpunctis, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionPodatusEpisemata(this.notes[0], this.notes[1]);\n\t      for (var i = 2; i < this.notes.length; ++i) {\n\t        this.positionEpisemataAbove(this.notes[i]);\n\t      }\n\t      this.positionInclinataMorae(this.notes.slice(1));\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(PesSubpunctis.prototype.__proto__ || Object.getPrototypeOf(PesSubpunctis.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      // podatus followed by inclinata\n\t      this.build(ctxt).withPodatus(this.notes[0], this.notes[1]).advanceBy(ctxt.intraNeumeSpacing * 0.68).withInclinata(this.notes.slice(2));\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return PesSubpunctis;\n\t}(Neume);\n\t\n\t/*\n\t * Podatus\n\t *\n\t * This podatus class handles a few neume types actually, depending on the note\n\t * data: Podatus (including various liquescent types on the upper note),\n\t * Podatus initio debilis, and Quilisma-Pes\n\t */\n\t\n\t\n\tvar Podatus = exports.Podatus = function (_Neume10) {\n\t  _inherits(Podatus, _Neume10);\n\t\n\t  function Podatus() {\n\t    _classCallCheck(this, Podatus);\n\t\n\t    return _possibleConstructorReturn(this, (Podatus.__proto__ || Object.getPrototypeOf(Podatus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Podatus, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionPodatusMarkings(this.notes[0], this.notes[1]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Podatus.prototype.__proto__ || Object.getPrototypeOf(Podatus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      this.build(ctxt).withPodatus(this.notes[0], this.notes[1]);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Podatus;\n\t}(Neume);\n\t\n\t/*\n\t * Porrectus\n\t */\n\t\n\t\n\tvar Porrectus = exports.Porrectus = function (_Neume11) {\n\t  _inherits(Porrectus, _Neume11);\n\t\n\t  function Porrectus() {\n\t    _classCallCheck(this, Porrectus);\n\t\n\t    return _possibleConstructorReturn(this, (Porrectus.__proto__ || Object.getPrototypeOf(Porrectus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Porrectus, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionPorrectusMarkings(this.notes[0], this.notes[1], this.notes[2]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Porrectus.prototype.__proto__ || Object.getPrototypeOf(Porrectus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var first = this.notes[0];\n\t      var second = this.notes[1];\n\t      var third = this.notes[2];\n\t\n\t      var thirdGlyph;\n\t\n\t      if (third.liquescent & _ExsurgeChant.LiquescentType.Small) thirdGlyph = _ExsurgeDrawing.GlyphCode.TerminatingAscLiquescent;else if (third.liquescent & _ExsurgeChant.LiquescentType.Descending) thirdGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;else thirdGlyph = _ExsurgeDrawing.GlyphCode.PodatusUpper;\n\t\n\t      this.build(ctxt).lineFrom(second).withPorrectusSwash(first, second).noteAt(third, thirdGlyph);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Porrectus;\n\t}(Neume);\n\t\n\t/*\n\t * PorrectusFlexus\n\t */\n\t\n\t\n\tvar PorrectusFlexus = exports.PorrectusFlexus = function (_Neume12) {\n\t  _inherits(PorrectusFlexus, _Neume12);\n\t\n\t  function PorrectusFlexus() {\n\t    _classCallCheck(this, PorrectusFlexus);\n\t\n\t    return _possibleConstructorReturn(this, (PorrectusFlexus.__proto__ || Object.getPrototypeOf(PorrectusFlexus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(PorrectusFlexus, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionPorrectusFlexusMarkings(this.notes[0], this.notes[1], this.notes[2], this.notes[3]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(PorrectusFlexus.prototype.__proto__ || Object.getPrototypeOf(PorrectusFlexus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var first = this.notes[0];\n\t      var second = this.notes[1];\n\t      var third = this.notes[2];\n\t      var fourth = this.notes[3];\n\t\n\t      var thirdGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum,\n\t          fourthGlyph;\n\t\n\t      if (fourth.liquescent & _ExsurgeChant.LiquescentType.Small) {\n\t        thirdGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;\n\t        fourthGlyph = _ExsurgeDrawing.GlyphCode.TerminatingDesLiquescent;\n\t      } else if (fourth.liquescent & _ExsurgeChant.LiquescentType.Ascending) fourthGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumAscLiquescent;else if (fourth.liquescent & _ExsurgeChant.LiquescentType.Descending) fourthGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;else fourthGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t\n\t      this.build(ctxt).lineFrom(second).withPorrectusSwash(first, second).noteAt(third, thirdGlyph).noteAt(fourth, fourthGlyph);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return PorrectusFlexus;\n\t}(Neume);\n\t\n\t// this is some type of pseudo nume right? there is no such thing as a neume\n\t// of puncta inclinata, but this will be part of other composite neumes.\n\t\n\t\n\tvar PunctaInclinata = exports.PunctaInclinata = function (_Neume13) {\n\t  _inherits(PunctaInclinata, _Neume13);\n\t\n\t  function PunctaInclinata() {\n\t    _classCallCheck(this, PunctaInclinata);\n\t\n\t    return _possibleConstructorReturn(this, (PunctaInclinata.__proto__ || Object.getPrototypeOf(PunctaInclinata)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(PunctaInclinata, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionInclinataMorae(this.notes);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(PunctaInclinata.prototype.__proto__ || Object.getPrototypeOf(PunctaInclinata.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      this.build(ctxt).withInclinata(this.notes);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return PunctaInclinata;\n\t}(Neume);\n\t\n\t/*\n\t * Punctum\n\t */\n\t\n\t\n\tvar Punctum = exports.Punctum = function (_Neume14) {\n\t  _inherits(Punctum, _Neume14);\n\t\n\t  function Punctum() {\n\t    _classCallCheck(this, Punctum);\n\t\n\t    return _possibleConstructorReturn(this, (Punctum.__proto__ || Object.getPrototypeOf(Punctum)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Punctum, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionEpisemataAbove(this.notes[0]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Punctum.prototype.__proto__ || Object.getPrototypeOf(Punctum.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var note = this.notes[0];\n\t      var glyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t\n\t      // determine the glyph to use\n\t      if (note.liquescent !== _ExsurgeChant.LiquescentType.None) {\n\t        if (note.shape === _ExsurgeChant.NoteShape.Inclinatum) glyph = _ExsurgeDrawing.GlyphCode.PunctumInclinatumLiquescent;else if (note.shape === _ExsurgeChant.NoteShape.Oriscus) glyph = _ExsurgeDrawing.GlyphCode.OriscusLiquescent;else if (note.liquescent & _ExsurgeChant.LiquescentType.Ascending) glyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumAscLiquescent;else if (note.liquescent & _ExsurgeChant.LiquescentType.Descending) glyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;else glyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumLiquescent;\n\t      } else {\n\t        if (note.shapeModifiers & _ExsurgeChant.NoteShapeModifiers.Cavum) glyph = _ExsurgeDrawing.GlyphCode.PunctumCavum;else if (note.shape === _ExsurgeChant.NoteShape.Inclinatum) glyph = _ExsurgeDrawing.GlyphCode.PunctumInclinatum;else if (note.shape === _ExsurgeChant.NoteShape.Quilisma) glyph = _ExsurgeDrawing.GlyphCode.Quilisma;else glyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t      }\n\t\n\t      this.build(ctxt).noteAt(note, glyph);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Punctum;\n\t}(Neume);\n\t\n\t/*\n\t * Salicus\n\t */\n\t\n\t\n\tvar Salicus = exports.Salicus = function (_Neume15) {\n\t  _inherits(Salicus, _Neume15);\n\t\n\t  function Salicus() {\n\t    _classCallCheck(this, Salicus);\n\t\n\t    return _possibleConstructorReturn(this, (Salicus.__proto__ || Object.getPrototypeOf(Salicus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Salicus, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      // by default place episema below\n\t      // fixme: is this correct?\n\t      for (var i = 0; i < this.notes.length; i++) {\n\t        this.positionEpisemataBelow(this.notes[i]);\n\t      }\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Salicus.prototype.__proto__ || Object.getPrototypeOf(Salicus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var first = this.notes[0];\n\t      var second = this.notes[1];\n\t      var third = this.notes[2];\n\t\n\t      var builder = this.build(ctxt).noteAt(first, _ExsurgeDrawing.GlyphCode.PunctumQuadratum);\n\t\n\t      // if the next note doesn't require a stem connector, then add a tad bit\n\t      // of spacing here\n\t      if (!(second.shapeModifiers & _ExsurgeChant.NoteShapeModifiers.Stemmed)) builder.advanceBy(ctxt.intraNeumeSpacing);\n\t\n\t      // second note is always an oriscus, which may or may not be stemmed\n\t      // to the first\n\t      builder.noteAt(second, _ExsurgeDrawing.GlyphCode.OriscusAsc);\n\t\n\t      // third note can be a punctum quadratum or various liquescent forms\n\t      if (third.liquescent & _ExsurgeChant.LiquescentType.Small) builder.noteAt(third, _ExsurgeDrawing.GlyphCode.TerminatingAscLiquescent);else if (third.liquescent === _ExsurgeChant.LiquescentType.Ascending) builder.noteAt(third, _ExsurgeDrawing.GlyphCode.PunctumQuadratumAscLiquescent);else if (third.liquescent === _ExsurgeChant.LiquescentType.Descending) builder.noteAt(third, _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent);else builder.virgaAt(third);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Salicus;\n\t}(Neume);\n\t\n\t/*\n\t * Salicus Flexus\n\t */\n\t\n\t\n\tvar SalicusFlexus = exports.SalicusFlexus = function (_Neume16) {\n\t  _inherits(SalicusFlexus, _Neume16);\n\t\n\t  function SalicusFlexus() {\n\t    _classCallCheck(this, SalicusFlexus);\n\t\n\t    return _possibleConstructorReturn(this, (SalicusFlexus.__proto__ || Object.getPrototypeOf(SalicusFlexus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(SalicusFlexus, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      var hasTopEpisema = this.positionTorculusMarkings(this.notes[1], this.notes[2], this.notes[3]);\n\t      this.positionEpisemata(this.notes[0], hasTopEpisema ? _ExsurgeDrawing.MarkingPositionHint.Above : _ExsurgeDrawing.MarkingPositionHint.Below);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(SalicusFlexus.prototype.__proto__ || Object.getPrototypeOf(SalicusFlexus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var first = this.notes[0];\n\t      var second = this.notes[1];\n\t      var third = this.notes[2];\n\t      var fourth = this.notes[3];\n\t\n\t      var builder = this.build(ctxt).noteAt(first, _ExsurgeDrawing.GlyphCode.PunctumQuadratum);\n\t\n\t      // if the next note doesn't require a stem connector, then add a tad bit\n\t      // of spacing here\n\t      if (!(second.shapeModifiers & _ExsurgeChant.NoteShapeModifiers.Stemmed)) builder.advanceBy(ctxt.intraNeumeSpacing);\n\t\n\t      // second note is always an oriscus, which may or may not be stemmed\n\t      // to the first\n\t      builder.noteAt(second, _ExsurgeDrawing.GlyphCode.OriscusAsc);\n\t\n\t      // third note can be a punctum quadratum or various liquescent forms,\n\t      // ...based on note four though!\n\t      if (fourth.liquescent & _ExsurgeChant.LiquescentType.Small) builder.noteAt(third, _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent);else builder.noteAt(third, _ExsurgeDrawing.GlyphCode.PunctumQuadratum);\n\t\n\t      // finally, do the fourth note\n\t      if (fourth.liquescent & _ExsurgeChant.LiquescentType.Small) builder.noteAt(fourth, _ExsurgeDrawing.GlyphCode.TerminatingDesLiquescent);else if (fourth.liquescent & _ExsurgeChant.LiquescentType.Ascending) builder.noteAt(fourth, _ExsurgeDrawing.GlyphCode.PunctumQuadratumAscLiquescent);else if (fourth.liquescent & _ExsurgeChant.LiquescentType.Descending) builder.noteAt(fourth, _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent);else builder.noteAt(fourth, _ExsurgeDrawing.GlyphCode.PunctumQuadratum);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return SalicusFlexus;\n\t}(Neume);\n\t\n\t/*\n\t * Scandicus\n\t */\n\t\n\t\n\tvar Scandicus = exports.Scandicus = function (_Neume17) {\n\t  _inherits(Scandicus, _Neume17);\n\t\n\t  function Scandicus() {\n\t    _classCallCheck(this, Scandicus);\n\t\n\t    return _possibleConstructorReturn(this, (Scandicus.__proto__ || Object.getPrototypeOf(Scandicus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Scandicus, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      if (this.notes[2].shape === _ExsurgeChant.NoteShape.Virga) {\n\t        this.positionPodatusMarkings(this.notes[0], this.notes[1]);\n\t        this.positionEpisemataAbove(this.notes[2]);\n\t      } else {\n\t        this.positionEpisemataBelow(this.notes[0]);\n\t        this.positionPodatusMarkings(this.notes[1], this.notes[2]);\n\t      }\n\t    }\n\t\n\t    // if the third note shape is a virga, then the scadicus is rendered\n\t    // as a podatus followed by a virga. Otherwise, it's rendered as a\n\t    // punctum followed by a podatus...\n\t\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Scandicus.prototype.__proto__ || Object.getPrototypeOf(Scandicus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var first = this.notes[0];\n\t      var second = this.notes[1];\n\t      var third = this.notes[2];\n\t\n\t      if (third.shape === _ExsurgeChant.NoteShape.Virga) {\n\t        this.build(ctxt).withPodatus(first, second).virgaAt(third);\n\t      } else {\n\t        this.build(ctxt).noteAt(first, first.shape === _ExsurgeChant.NoteShape.Quilisma ? _ExsurgeDrawing.GlyphCode.Quilisma : _ExsurgeDrawing.GlyphCode.PunctumQuadratum).withPodatus(second, third);\n\t      }\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Scandicus;\n\t}(Neume);\n\t\n\t/*\n\t * Scandicus Flexus\n\t */\n\t\n\t\n\tvar ScandicusFlexus = exports.ScandicusFlexus = function (_Neume18) {\n\t  _inherits(ScandicusFlexus, _Neume18);\n\t\n\t  function ScandicusFlexus() {\n\t    _classCallCheck(this, ScandicusFlexus);\n\t\n\t    return _possibleConstructorReturn(this, (ScandicusFlexus.__proto__ || Object.getPrototypeOf(ScandicusFlexus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(ScandicusFlexus, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      if (this.notes[2].shape === _ExsurgeChant.NoteShape.Virga) {\n\t        this.positionPodatusMarkings(this.notes[0], this.notes[1]);\n\t        this.positionClivisMarkings(this.notes[2], this.notes[3]);\n\t      } else {\n\t        this.positionEpisemataBelow(this.notes[0]);\n\t        this.positionPodatusMarkings(this.notes[1], this.notes[2]);\n\t        this.positionEpisemataAbove(this.notes[3]);\n\t      }\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(ScandicusFlexus.prototype.__proto__ || Object.getPrototypeOf(ScandicusFlexus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var first = this.notes[0];\n\t      var second = this.notes[1];\n\t      var third = this.notes[2];\n\t      var fourth = this.notes[3];\n\t\n\t      if (third.shape === _ExsurgeChant.NoteShape.Virga) {\n\t        this.build(ctxt).withPodatus(first, second).advanceBy(ctxt.intraNeumeSpacing).withClivis(third, fourth);\n\t      } else {\n\t        var fourthGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t\n\t        if (fourth.liquescent & _ExsurgeChant.LiquescentType.Ascending) fourthGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumAscLiquescent;else if (fourth.liquescent & _ExsurgeChant.LiquescentType.Descending) fourthGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;\n\t\n\t        this.build(ctxt).noteAt(first, _ExsurgeDrawing.GlyphCode.PunctumQuadratum).withPodatus(second, third).advanceBy(ctxt.intraNeumeSpacing).noteAt(fourth, fourthGlyph);\n\t      }\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return ScandicusFlexus;\n\t}(Neume);\n\t\n\t/*\n\t * Torculus\n\t */\n\t\n\t\n\tvar Torculus = exports.Torculus = function (_Neume19) {\n\t  _inherits(Torculus, _Neume19);\n\t\n\t  function Torculus() {\n\t    _classCallCheck(this, Torculus);\n\t\n\t    return _possibleConstructorReturn(this, (Torculus.__proto__ || Object.getPrototypeOf(Torculus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Torculus, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionTorculusMarkings(this.notes[0], this.notes[1], this.notes[2]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Torculus.prototype.__proto__ || Object.getPrototypeOf(Torculus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var note1 = this.notes[0];\n\t      var note2 = this.notes[1];\n\t      var note3 = this.notes[2];\n\t\n\t      var glyph1, glyph3;\n\t\n\t      if (note1.liquescent === _ExsurgeChant.LiquescentType.InitioDebilis) glyph1 = _ExsurgeDrawing.GlyphCode.TerminatingDesLiquescent;else if (note1.shape === _ExsurgeChant.NoteShape.Quilisma) glyph1 = _ExsurgeDrawing.GlyphCode.Quilisma;else glyph1 = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t\n\t      if (note3.liquescent & _ExsurgeChant.LiquescentType.Small) glyph3 = _ExsurgeDrawing.GlyphCode.TerminatingDesLiquescent;else if (note3.liquescent & _ExsurgeChant.LiquescentType.Ascending) glyph3 = _ExsurgeDrawing.GlyphCode.PunctumQuadratumAscLiquescent;else if (note3.liquescent & _ExsurgeChant.LiquescentType.Descending) glyph3 = _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;else glyph3 = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t\n\t      this.build(ctxt).noteAt(note1, glyph1).noteAt(note2, _ExsurgeDrawing.GlyphCode.PunctumQuadratum).noteAt(note3, glyph3);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Torculus;\n\t}(Neume);\n\t\n\t/*\n\t * TorculusResupinus\n\t */\n\t\n\t\n\tvar TorculusResupinus = exports.TorculusResupinus = function (_Neume20) {\n\t  _inherits(TorculusResupinus, _Neume20);\n\t\n\t  function TorculusResupinus() {\n\t    _classCallCheck(this, TorculusResupinus);\n\t\n\t    return _possibleConstructorReturn(this, (TorculusResupinus.__proto__ || Object.getPrototypeOf(TorculusResupinus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(TorculusResupinus, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionPorrectusMarkings(this.notes[1], this.notes[2], this.notes[3]);\n\t      this.positionClivisEpisemata(this.notes[1], this.notes[0]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(TorculusResupinus.prototype.__proto__ || Object.getPrototypeOf(TorculusResupinus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var first = this.notes[0];\n\t      var second = this.notes[1];\n\t      var third = this.notes[2];\n\t      var fourth = this.notes[3];\n\t\n\t      var firstGlyph, fourthGlyph;\n\t\n\t      if (first.liquescent === _ExsurgeChant.LiquescentType.InitioDebilis) {\n\t        firstGlyph = _ExsurgeDrawing.GlyphCode.TerminatingDesLiquescent;\n\t      } else if (first.shape === _ExsurgeChant.NoteShape.Quilisma) firstGlyph = _ExsurgeDrawing.GlyphCode.Quilisma;else firstGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t\n\t      if (fourth.liquescent & _ExsurgeChant.LiquescentType.Small) fourthGlyph = _ExsurgeDrawing.GlyphCode.TerminatingAscLiquescent;else if (third.liquescent & _ExsurgeChant.LiquescentType.Descending) fourthGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;else fourthGlyph = _ExsurgeDrawing.GlyphCode.PodatusUpper;\n\t\n\t      this.build(ctxt).noteAt(first, firstGlyph).withPorrectusSwash(second, third).noteAt(fourth, fourthGlyph);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return TorculusResupinus;\n\t}(Neume);\n\t\n\t/*\n\t * TorculusResupinusFlexus\n\t */\n\t\n\t\n\tvar TorculusResupinusFlexus = exports.TorculusResupinusFlexus = function (_Neume21) {\n\t  _inherits(TorculusResupinusFlexus, _Neume21);\n\t\n\t  function TorculusResupinusFlexus() {\n\t    _classCallCheck(this, TorculusResupinusFlexus);\n\t\n\t    return _possibleConstructorReturn(this, (TorculusResupinusFlexus.__proto__ || Object.getPrototypeOf(TorculusResupinusFlexus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(TorculusResupinusFlexus, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionPorrectusFlexusMarkings(this.notes[1], this.notes[2], this.notes[3], this.notes[4]);\n\t      this.positionClivisEpisemata(this.notes[1], this.notes[0]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(TorculusResupinusFlexus.prototype.__proto__ || Object.getPrototypeOf(TorculusResupinusFlexus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var first = this.notes[0];\n\t      var second = this.notes[1];\n\t      var third = this.notes[2];\n\t      var fourth = this.notes[3];\n\t      var fifth = this.notes[4];\n\t\n\t      var firstGlyph,\n\t          fourthGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum,\n\t          fifthGlyph;\n\t\n\t      if (first.liquescent === _ExsurgeChant.LiquescentType.InitioDebilis) {\n\t        firstGlyph = _ExsurgeDrawing.GlyphCode.TerminatingDesLiquescent;\n\t      } else if (first.shape === _ExsurgeChant.NoteShape.Quilisma) firstGlyph = _ExsurgeDrawing.GlyphCode.Quilisma;else firstGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t\n\t      if (fifth.liquescent & _ExsurgeChant.LiquescentType.Small) {\n\t        fourthGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;\n\t        fifthGlyph = _ExsurgeDrawing.GlyphCode.TerminatingDesLiquescent;\n\t      } else if (fifth.liquescent & _ExsurgeChant.LiquescentType.Ascending) fifthGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumAscLiquescent;else if (fifth.liquescent & _ExsurgeChant.LiquescentType.Descending) fifthGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;else fifthGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t\n\t      this.build(ctxt).noteAt(first, firstGlyph).withPorrectusSwash(second, third).noteAt(fourth, fourthGlyph).noteAt(fifth, fifthGlyph);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return TorculusResupinusFlexus;\n\t}(Neume);\n\t\n\t/*\n\t * Tristropha\n\t *\n\t * For simplicity in implementation, Tristropha's have three notes in the object\n\t * structure. These technically must be the same pitch though (like the\n\t * Distropha and Bivirga).\n\t */\n\t\n\t\n\tvar Tristropha = exports.Tristropha = function (_Neume22) {\n\t  _inherits(Tristropha, _Neume22);\n\t\n\t  function Tristropha() {\n\t    _classCallCheck(this, Tristropha);\n\t\n\t    return _possibleConstructorReturn(this, (Tristropha.__proto__ || Object.getPrototypeOf(Tristropha)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Tristropha, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionEpisemataAbove(this.notes[0]);\n\t      this.positionEpisemataAbove(this.notes[1]);\n\t      this.positionEpisemataAbove(this.notes[2]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Tristropha.prototype.__proto__ || Object.getPrototypeOf(Tristropha.prototype), \"performLayout\", this).call(this, ctxt);\n\t      var glyphCodes = this.notes.map(function (note) {\n\t        return Apostropha.getNoteGlyphCode(note);\n\t      });\n\t      var glyphAdvance = glyphCodes[0] === _ExsurgeDrawing.GlyphCode.Stropha ? ctxt.intraNeumeSpacing / 2 : ctxt.intraNeumeSpacing;\n\t\n\t      this.build(ctxt).noteAt(this.notes[0], glyphCodes[0]).advanceBy(glyphAdvance).noteAt(this.notes[1], glyphCodes[1]).advanceBy(glyphAdvance).noteAt(this.notes[2], glyphCodes[2]);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Tristropha;\n\t}(Neume);\n\t\n\t/*\n\t * Virga\n\t */\n\t\n\t\n\tvar Virga = exports.Virga = function (_Neume23) {\n\t  _inherits(Virga, _Neume23);\n\t\n\t  function Virga() {\n\t    _classCallCheck(this, Virga);\n\t\n\t    return _possibleConstructorReturn(this, (Virga.__proto__ || Object.getPrototypeOf(Virga)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Virga, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionEpisemataAbove(this.notes[0]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Virga.prototype.__proto__ || Object.getPrototypeOf(Virga.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      this.build(ctxt).virgaAt(this.notes[0]);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Virga;\n\t}(Neume);\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Titles = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _ExsurgeCore = __webpack_require__(1);\n\t\n\tvar _ExsurgeDrawing = __webpack_require__(4);\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } //\n\t// Author(s):\n\t// Benjamin Bloomfield <benjamin@sourceandsummit.com>\n\t//\n\t// Copyright (c) 2019\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a copy\n\t// of this software and associated documentation files (the \"Software\"), to deal\n\t// in the Software without restriction, including without limitation the rights\n\t// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t// copies of the Software, and to permit persons to whom the Software is\n\t// furnished to do so, subject to the following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included in\n\t// all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\t// THE SOFTWARE.\n\t//\n\t\n\tvar Titles = exports.Titles = function (_ChantLayoutElement) {\n\t  _inherits(Titles, _ChantLayoutElement);\n\t\n\t  function Titles(ctxt, score) {\n\t    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n\t        supertitle = _ref.supertitle,\n\t        title = _ref.title,\n\t        subtitle = _ref.subtitle,\n\t        textLeft = _ref.textLeft,\n\t        textRight = _ref.textRight;\n\t\n\t    _classCallCheck(this, Titles);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Titles.__proto__ || Object.getPrototypeOf(Titles)).call(this));\n\t\n\t    _this.score = score;\n\t    _this.setSupertitle(ctxt, supertitle);\n\t    _this.setTitle(ctxt, title);\n\t    _this.setSubtitle(ctxt, subtitle);\n\t    _this.setTextLeft(ctxt, textLeft);\n\t    _this.setTextRight(ctxt, textRight);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Titles, [{\n\t    key: \"setBoundsX\",\n\t    value: function setBoundsX(ctxt, elementName, width) {\n\t      var element = this[elementName];\n\t      switch (ctxt.textStyles[elementName].alignment) {\n\t        case \"left\":\n\t          element.textAnchor = \"start\";\n\t          element.bounds.x = 0;\n\t          break;\n\t        case \"right\":\n\t          element.textAnchor = \"end\";\n\t          element.bounds.x = width;\n\t          break;\n\t        case \"center\":\n\t        default:\n\t          element.textAnchor = \"middle\";\n\t          element.bounds.x = width / 2;\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Lays out the titles, and returns their total height\n\t     * @param  {ChantContext} ctxt\n\t     * @return {number}      the tottal height of titles laid out\n\t     */\n\t\n\t  }, {\n\t    key: \"layoutTitles\",\n\t    value: function layoutTitles(ctxt, width) {\n\t      this.bounds = new _ExsurgeCore.Rect(0, 0, 0, 0);\n\t      var y = 0;\n\t      if (this.supertitle) {\n\t        this.supertitle.recalculateMetrics(ctxt);\n\t        this.supertitle.setMaxWidth(ctxt, width);\n\t\n\t        this.setBoundsX(ctxt, \"supertitle\", width);\n\t        this.supertitle.bounds.y = y;\n\t        this.bounds.union(this.supertitle.bounds);\n\t        this.supertitle.bounds.y += this.supertitle.origin.y;\n\t        y += this.supertitle.bounds.height + this.supertitle.padding(ctxt);\n\t      }\n\t      if (this.title) {\n\t        if (y) y += this.title.padding(ctxt);\n\t        this.title.recalculateMetrics(ctxt);\n\t        this.title.setMaxWidth(ctxt, width);\n\t        this.setBoundsX(ctxt, \"title\", width);\n\t        this.title.bounds.y = y;\n\t        this.bounds.union(this.title.bounds);\n\t        this.title.bounds.y += this.title.origin.y;\n\t        y += this.title.bounds.height + this.title.padding(ctxt);\n\t      }\n\t      if (this.subtitle) {\n\t        if (y) y += this.subtitle.padding(ctxt);\n\t        this.subtitle.recalculateMetrics(ctxt);\n\t        this.subtitle.setMaxWidth(ctxt, width);\n\t        this.setBoundsX(ctxt, \"subtitle\", width);\n\t        this.subtitle.bounds.y = y;\n\t        this.bounds.union(this.subtitle.bounds);\n\t        this.subtitle.bounds.y += this.subtitle.origin.y;\n\t        y += this.subtitle.bounds.height + this.subtitle.padding(ctxt);\n\t      }\n\t      var finalY = y,\n\t          textLeft = this.score.overrideTextLeft || this.textLeft;\n\t      if (textLeft) {\n\t        textLeft.recalculateMetrics(ctxt);\n\t        textLeft.bounds.y = y;\n\t        this.bounds.union(textLeft.bounds);\n\t        textLeft.bounds.y += textLeft.origin.y;\n\t        finalY = y + textLeft.bounds.height + textLeft.padding(ctxt);\n\t      }\n\t      if (this.textRight) {\n\t        this.textRight.recalculateMetrics(ctxt);\n\t        this.textRight.bounds.x = width;\n\t        this.textRight.bounds.y = y;\n\t        this.bounds.union(this.textRight.bounds);\n\t        this.textRight.bounds.y += this.textRight.origin.y;\n\t        finalY = Math.max(finalY, y + this.textRight.bounds.height + this.textRight.padding(ctxt));\n\t      }\n\t      return finalY;\n\t    }\n\t  }, {\n\t    key: \"setSupertitle\",\n\t    value: function setSupertitle(ctxt, supertitle) {\n\t      this.supertitle = supertitle ? new _ExsurgeDrawing.Supertitle(ctxt, supertitle) : null;\n\t    }\n\t  }, {\n\t    key: \"setTitle\",\n\t    value: function setTitle(ctxt, title) {\n\t      this.title = title ? new _ExsurgeDrawing.Title(ctxt, title) : null;\n\t    }\n\t  }, {\n\t    key: \"setSubtitle\",\n\t    value: function setSubtitle(ctxt, subtitle) {\n\t      this.subtitle = subtitle ? new _ExsurgeDrawing.Subtitle(ctxt, subtitle) : null;\n\t    }\n\t  }, {\n\t    key: \"setTextLeft\",\n\t    value: function setTextLeft(ctxt, textLeft) {\n\t      this.textLeft = textLeft ? new _ExsurgeDrawing.TextLeftRight(ctxt, textLeft, \"textLeft\") : null;\n\t    }\n\t  }, {\n\t    key: \"setTextRight\",\n\t    value: function setTextRight(ctxt, textRight) {\n\t      this.textRight = textRight ? new _ExsurgeDrawing.TextLeftRight(ctxt, textRight, \"textRight\") : null;\n\t    }\n\t  }, {\n\t    key: \"hasSupertitle\",\n\t    value: function hasSupertitle(ctxt, supertitle) {\n\t      return !!this.supertitle;\n\t    }\n\t  }, {\n\t    key: \"hasTitle\",\n\t    value: function hasTitle(ctxt, title) {\n\t      return !!this.title;\n\t    }\n\t  }, {\n\t    key: \"hasSubtitle\",\n\t    value: function hasSubtitle(ctxt, subtitle) {\n\t      return !!this.subtitle;\n\t    }\n\t  }, {\n\t    key: \"hasTextLeft\",\n\t    value: function hasTextLeft(ctxt, textLeft) {\n\t      return !!this.textLeft;\n\t    }\n\t  }, {\n\t    key: \"hasTextRight\",\n\t    value: function hasTextRight(ctxt, textRight) {\n\t      return !!this.textRight;\n\t    }\n\t  }, {\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      var scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\t\n\t      var canvasCtxt = ctxt.canvasCtxt;\n\t      canvasCtxt.translate(this.bounds.x, this.bounds.y);\n\t\n\t      var _arr = [this.supertitle, this.title, this.subtitle, this.score.overrideTextLeft || this.textLeft, this.textRight];\n\t      for (var _i = 0; _i < _arr.length; _i++) {\n\t        var el = _arr[_i];\n\t        if (el) el.draw(ctxt, scale);\n\t      }\n\t\n\t      canvasCtxt.translate(-this.bounds.x, -this.bounds.y);\n\t    }\n\t  }, {\n\t    key: \"getInnerNodes\",\n\t    value: function getInnerNodes(ctxt) {\n\t      var functionName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"createSvgNode\";\n\t\n\t      var nodes = [];\n\t\n\t      var _arr2 = [this.supertitle, this.title, this.subtitle, this.score.overrideTextLeft || this.textLeft, this.textRight];\n\t      for (var _i2 = 0; _i2 < _arr2.length; _i2++) {\n\t        var el = _arr2[_i2];\n\t        if (el) nodes.push(el[functionName](ctxt));\n\t      }\n\t      return nodes;\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      var nodes = this.getInnerNodes(ctxt, \"createSvgNode\");\n\t\n\t      var node = _ExsurgeDrawing.QuickSvg.createNode(\"g\", { class: \"Titles\" }, nodes);\n\t\n\t      node.source = this;\n\t      this.svg = node;\n\t\n\t      return node;\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      var nodes = this.getInnerNodes(ctxt, \"createSvgTree\");\n\t\n\t      return _ExsurgeDrawing.QuickSvg.createSvgTree.apply(_ExsurgeDrawing.QuickSvg, [\"g\", { class: \"Titles\", source: this }].concat(_toConsumableArray(nodes)));\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      var fragment = \"\";\n\t\n\t      var _arr3 = [this.supertitle, this.title, this.subtitle, this.score.overrideTextLeft || this.textLeft, this.textRight];\n\t      for (var _i3 = 0; _i3 < _arr3.length; _i3++) {\n\t        var el = _arr3[_i3];\n\t        if (el) fragment += el.createSvgFragment(ctxt);\n\t      }\n\t\n\t      fragment = _ExsurgeDrawing.QuickSvg.createFragment(\"g\", { class: \"Titles\" }, fragment);\n\t      return fragment;\n\t    }\n\t  }]);\n\t\n\t  return Titles;\n\t}(_ExsurgeDrawing.ChantLayoutElement);\n\n/***/ })\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// exsurge.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 5ccd8d780914631b68f1","//\n// Author(s):\n// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n//\n// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n'use strict';\n\n// import { Annotation, ChantContext } from './Exsurge.Drawing.js'\n// import { Gabc } from './Exsurge.Gabc.js'\n//\n// // client side support\n//\n// if (typeof document !== 'undefined' && document.registerElement) {\n//   var ChantVisualElementPrototype = Object.create(HTMLElement.prototype);\n//\n//   ChantVisualElementPrototype.createdCallback = function() {\n//     var ctxt = new ChantContext();\n//\n//     ctxt.setFont(\"'Crimson Text', serif\", 19.2);\n//\n//     var useDropCap = true;\n//     var useDropCapAttr = this.getAttribute(\"use-drop-cap\");\n//     if (useDropCapAttr === 'false')\n//       useDropCap = false;\n//\n//     var score = Gabc.loadChantScore(ctxt, this.innerText, useDropCap);\n//\n//     var annotationAttr = this.getAttribute(\"annotation\");\n//     if (annotationAttr) {\n//       // add an annotation\n//       score.annotation = new Annotation(ctxt, annotationAttr);\n//     }\n//\n//     var _element = this;\n//\n//     var width = 0;\n//     var doLayout = function() {\n//       var newWidth = _element.parentElement.clientWidth;\n//       if(width === newWidth) return;\n//       width = newWidth;\n//       // perform layout on the chant\n//       score.performLayout(ctxt, function() {\n//         score.layoutChantLines(ctxt, width, function() {\n//           // render the score to svg code\n//           _element.appendElement(score.createSvgNode(ctxt));\n//         });\n//       });\n//     }\n//     doLayout();\n//     if (window.addEventListener)\n//       window.addEventListener('resize',doLayout,false);\n//     else if (window.attachEvent)\n//       window.attachEvent('onresize',doLayout);\n//   }\n//\n//   ChantVisualElementPrototype.attachedCallback = function() {\n//\n//   }\n//\n//   // register the custom element\n//   // if(window.customElements && window.customElements.define) {\n//   //   window.customElements.define('chant-visual', ChantVisualElementPrototype);\n//   // } else {\n//     document.registerElement('chant-visual', {\n//       prototype: ChantVisualElementPrototype\n//     });\n//   // }\n// }\n\nexport * from './Exsurge.Core.js'\nexport * from './Exsurge.Text.js'\nexport * from './Exsurge.Glyphs.js'\nexport * from './Exsurge.Drawing.js'\nexport * from './Exsurge.Chant.js'\nexport * from './Exsurge.Chant.ChantLine.js'\nexport * from './Exsurge.Chant.Markings.js'\nexport * from './Exsurge.Chant.Signs.js'\nexport * from './Exsurge.Chant.Neumes.js'\nexport * from './Exsurge.Gabc.js'\nexport * from './Exsurge.Titles.js'\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","//\n// Author(s):\n// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n//\n// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\nexport var Units = {\n  // enums\n  DeviceIndepenedent: 0, // device independent units: 96/inch\n  Centimeters: 1,\n  Millimeters: 2,\n  Inches: 3,\n\n  // constants for device independent units (diu)\n  DIU_PER_INCH: 96,\n  DIU_PER_CENTIMETER: 96 / 2.54,\n\n  ToDeviceIndependent: function (n, inputUnits) {\n    switch (inputUnits) {\n      case Centimeters:\n        return n * Units.DIU_PER_CENTIMETER;\n      case Millimeters:\n        return n * Units.DIU_PER_CENTIMETER / 10;\n      case Inches:\n        return n * Units.DIU_PER_INCH;\n      default:\n        return n;\n    }\n  },\n\n  FromDeviceIndependent: function (n, outputUnits) {\n    switch (outputUnits) {\n      case Centimeters:\n        return n / Units.DIU_PER_CENTIMETER;\n      case Millimeters:\n        return n / Units.DIU_PER_CENTIMETER * 10;\n      case Inches:\n        return n / Units.DIU_PER_INCH;\n      default:\n        return n;\n    }\n  },\n\n\n  StringToUnitsType: function(s) {\n    switch (s.ToLower()) {\n      case \"in\":\n      case \"inches\":\n        return Units.Inches;\n\n      case \"cm\":\n      case \"centimeters\":\n        return Units.Centimeters;\n\n      case \"mm\":\n      case \"millimeters\":\n        return Units.Millimeters;\n\n      case \"di\":\n      case \"device-independent\":\n        return Units.DeviceIndepenedent;\n\n      default:\n        return Units.DeviceIndepenedent;\n    }\n  },\n\n  UnitsTypeToString: function(units) {\n    switch (units) {\n      case Units.Inches: return \"in\";\n      case Units.Centimeters: return \"cm\";\n      case Units.Millimeters: return \"mm\";\n      case Units.DeviceIndepenedent: return \"device-independent\";\n      default: return \"device-independent\";\n    }\n  }\n}\n\nexport function DeviceIndependent(n) {\n  return n;\n}\n\nexport function Centimeters(n) {\n  return Units.ToDeviceIndependent(n, Units.Centimeters);\n}\n\nexport function Millimeters(n) {\n  return Units.ToDeviceIndependent(n, Units.Millimeters);\n}\n\nexport function Inches(n) {\n  return Units.ToDeviceIndependent(n, Units.Inches);\n}\n\nexport function ToCentimeters(n) {\n  return Units.FromDeviceIndependent(n, Units.Centimeters);\n}\n\nexport function ToMillimeters(n) {\n  return Units.FromDeviceIndependent(n, Units.Millimeters);\n}\n\nexport function ToInches(n) {\n  return Units.FromDeviceIndependent(n, Units.Inches);\n}\n\n\n/*\n * Point\n */\nexport class Point {\n  constructor(x, y) {\n    this.x = (typeof x !== 'undefined') ? x : 0;\n    this.y = (typeof y !== 'undefined') ? y : 0;\n  }\n\n  clone() {\n    return new Point(this.x, this.y);\n  }\n\n  equals(point) {\n    return this.x === point.x && this.y === point.y;\n  }\n}\n\n/*\n * Rect\n */\nexport class Rect {\n  constructor(x, y, width, height) {\n    this.x = (typeof x !== 'undefined') ? x : Infinity;\n    this.y = (typeof y !== 'undefined') ? y : Infinity;\n    this.width = (typeof width !== 'undefined') ? width : -Infinity;\n    this.height = (typeof height !== 'undefined') ? height : -Infinity;\n  }\n\n  clone() {\n    return new Rect(this.x, this.y, this.width, this.height);\n  }\n\n  isEmpty() {\n    return (this.x === Infinity &&\n            this.y === Infinity &&\n            this.width === -Infinity &&\n            this.height === -Infinity);\n  }\n\n  // convenience method\n  right() {\n    return this.x + this.width;\n  }\n\n  bottom() {\n    return this.y + this.height;\n  }\n\n  equals(rect) {\n    return this.x === rect.x && this.y === rect.y &&\n           this.width === rect.width && this.height === rect.height;\n  }\n\n  // other can be a Point or a Rect\n  contains(other) {\n    if (other instanceof Point) {\n      return other.x >= this.x &&\n              other.x <= this.x + this.width &&\n              other.y >= this.y &&\n              other.y <= this.y + this.height;\n    } else { // better be instance of Rect\n      return this.x <= other.x &&\n              this.x + this.width >= other.x + other.width &&\n              this.y <= other.y &&\n              this.y + this.height >= other.y + other.height;\n    }\n  }\n\n  union(rect) {\n\n    var right = Math.max(this.x + this.width, rect.x + rect.width);\n    var bottom = Math.max(this.y + this.height, rect.y + rect.height);\n\n    this.x = Math.min(this.x, rect.x);\n    this.y = Math.min(this.y, rect.y);\n\n    this.width = right - this.x;\n    this.height = bottom - this.y;\n  }\n}\n\n/**\n * Margins\n *\n * @class\n */\nexport class Margins {\n  constructor(left, top, right, bottom) {\n    this.left = (typeof left !== 'undefined') ? left : 0;\n    this.top = (typeof top !== 'undefined') ? top : 0;\n    this.right = (typeof right !== 'undefined') ? right : 0;\n    this.bottom = (typeof bottom !== 'undefined') ? bottom : 0;\n  }\n\n  clone() {\n    return new Margins(this.left, this.top, this.right, this.bottom);\n  }\n\n  equals(margins) {\n    return this.left === margins.left &&\n        this.top === margins.top &&\n        this.right === margins.right &&\n        this.bottom === margins.bottom;\n  }\n}\n\n/**\n * Size\n *\n * @class\n */\nexport class Size {\n  constructor(width, height) {\n    this.width = (typeof width !== 'undefined') ? width : 0;\n    this.height = (typeof height !== 'undefined') ? height : 0;\n  }\n\n  clone() {\n    return new Size(this.width, this.height);\n  }\n\n  equals(size) {\n    return this.width === size.width && this.height === size.height;\n  }\n}\n\n\n/*\n * Pitches, notes\n */\nexport var Step = {\n  Do: 0,\n  Du: 1,\n  Re: 2,\n  Me: 3,\n  Mi: 4,\n  Fa: 5,\n  Fu: 6,\n  So: 7,\n  La: 9,\n  Te: 10,\n  Ti: 11\n};\n\n  // this little array helps map step values to staff positions. The numeric values of steps\n  // correspond to whole step increments (2) or half step increments (1). This gives us the ability\n  // to compare pitches precisely, but makes it challenging to place steps on the staff. this little\n  // array maps the steps to an incremental position the steps take on the staff line. This works\n  // so simply because chant only uses do and fa clefs, and only has a flatted ti (te), making\n  // for relatively easy mapping to staff line locations.\n  //                         Do Du Re Me Mi Fa Fu So    La Te Ti\nvar __StepToStaffPosition = [0, 0, 1, 1, 2, 3, 3, 4, 4, 5, 6, 6];\nvar __StaffOffsetToStep = [Step.Do, Step.Re, Step.Mi, Step.Fa, Step.So, Step.La, Step.Ti]; // no accidentals in this one\n\n\nexport class Pitch {\n  constructor(step, octave) {\n    if(typeof octave === 'undefined') {\n      octave = Math.floor(step / 12)\n      step = step % 12;\n    }\n    this.step = step;\n    this.octave = octave;\n  }\n\n  toInt() {\n    return this.octave * 12 + this.step;\n  }\n\n  transpose(step) {\n    return new Pitch(this.toInt() + step);\n  }\n\n  isHigherThan(pitch) {\n    return this.toInt() > pitch.toInt();\n  }\n\n  isLowerThan(pitch) {\n    return this.toInt() < pitch.toInt();\n  }\n\n  equals(pitch) {\n    return this.toInt() === pitch.toInt();\n  }\n\n  static stepToStaffOffset(step) {\n    return __StepToStaffPosition[step];\n  }\n\n  static staffOffsetToStep(offset) {\n    while (offset < 0)\n      offset = __StaffOffsetToStep.length + offset;\n\n    return __StaffOffsetToStep[offset % __StaffOffsetToStep.length];\n  }\n}\n\nexport function generateRandomGuid() {\n  function s4() {\n    return Math.floor((1 + Math.random()) * 0x10000)\n      .toString(16)\n      .substring(1);\n  }\n  return s4() + s4();\n}\n\nexport function getCssForProperties(properties) {\n  return Object.entries(properties)\n    .map(([key, val]) =>\n      key && val && key !== \"class\" ? `${key}: ${val};` : \"\"\n    )\n    .join(\"\");\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Exsurge.Core.js","//\n\n/**\n * @class\n */\nexport class Language {\n  constructor(name) {\n    this.name = typeof name !== \"undefined\" ? name : \"<unknown>\";\n    this.centerNeume = false;\n  }\n\n  /**\n   * @param {String} text The string to parsed into words.\n   * @return {Word[]} the resulting parsed words from syllabification\n   */\n  syllabify(text) {\n    var parsedWords = [];\n\n    if (typeof text === \"undefined\" || text === \"\") return parsedWords;\n\n    // Divide the text into words separated by whitespace\n    var words = text.split(/[\\s]+/);\n\n    for (var i = 0, end = words.length; i < end; i++)\n      parsedWords.push(this.syllabifyWord(words[i]));\n\n    return parsedWords;\n  }\n}\n\nexport class English extends Language {\n  constructor() {\n    super(\"English\");\n    this.centerNeume = true;\n  }\n\n  /**\n   * @param {String} s the string to search\n   * @param {Number} startIndex The index at which to start searching for a vowel in the string\n   * @retuns a custom class with three properties: {found: (true/false) startIndex: (start index in s of vowel segment) length ()}\n   */\n  findVowelSegment(s, startIndex) {\n    var regexLetter = /[a-z\\u0300-\\u0311äëïöüÿáéíóúýàèìòùỳāēīōūȳăĕĭŏŭæœ‿]+/i;\n    var match = regexLetter.exec(s.slice(startIndex));\n    if (match)\n      return {\n        found: true,\n        startIndex: startIndex + match.index,\n        length: match[0].length\n      };\n\n    // no vowels sets found after startIndex!\n    return { found: false, startIndex: -1, length: -1 };\n  }\n}\n\n/**\n * @class\n */\nexport class Latin extends Language {\n  /**\n   * @constructs\n   */\n  constructor() {\n    super(\"Latin\");\n\n    // fixme: ui is only diphthong in the exceptional cases below (according to Wheelock's Latin)\n    this.diphthongs = [\"ae\", \"au\", \"oe\", \"aé\", \"áu\", \"oé\"];\n    // for centering over the vowel, we will need to know any combinations that might be diphthongs:\n    this.possibleDiphthongs = this.diphthongs.concat([\n      \"ei\",\n      \"eu\",\n      \"ui\",\n      \"éi\",\n      \"éu\",\n      \"úi\"\n    ]);\n    this.regexVowel = /(i|(?:[qg]|^)u)?([eé][iu]|[uú]i|[ao][eé]|[aá]u|[aeiouáéíóúäëïöüāēīōūăĕĭŏŭåe̊o̊ůæœǽyýÿ])/i;\n\n    // some words that are simply exceptions to standard syllabification rules!\n    var wordExceptions = new Object();\n\n    // ui combos pronounced as diphthongs\n    wordExceptions[\"huius\"] = [\"hui\", \"us\"];\n    wordExceptions[\"cuius\"] = [\"cui\", \"us\"];\n    wordExceptions[\"huic\"] = [\"huic\"];\n    wordExceptions[\"cui\"] = [\"cui\"];\n    wordExceptions[\"hui\"] = [\"hui\"];\n\n    // eu combos pronounced as diphthongs\n    wordExceptions[\"euge\"] = [\"eu\", \"ge\"];\n    wordExceptions[\"seu\"] = [\"seu\"];\n\n    this.vowels = [\n      \"a\",\n      \"e\",\n      \"i\",\n      \"o\",\n      \"u\",\n      \"á\",\n      \"é\",\n      \"í\",\n      \"ó\",\n      \"ú\",\n      \"ä\",\n      \"ë\",\n      \"ï\",\n      \"ö\",\n      \"ü\",\n      \"ā\",\n      \"ē\",\n      \"ī\",\n      \"ō\",\n      \"ū\",\n      \"ă\",\n      \"ĕ\",\n      \"ĭ\",\n      \"ŏ\",\n      \"ŭ\",\n      \"å\",\n      \"e̊\",\n      \"o̊\",\n      \"ů\",\n      \"æ\",\n      \"œ\",\n      \"ǽ\", // no accented œ in unicode?\n      \"y\",\n      \"ý\",\n      \"ÿ\"\n    ]; // y is treated as a vowel; not native to Latin but useful for words borrowed from Greek\n\n    this.vowelsThatMightBeConsonants = [\"i\", \"u\"];\n\n    this.muteConsonantsAndF = [\"b\", \"c\", \"d\", \"g\", \"p\", \"t\", \"f\"];\n\n    this.liquidConsonants = [\"l\", \"r\"];\n  }\n\n  // c must be lowercase!\n  isVowel(c) {\n    for (var i = 0, end = this.vowels.length; i < end; i++)\n      if (this.vowels[i] === c) return true;\n\n    return false;\n  }\n\n  isVowelThatMightBeConsonant(c) {\n    for (var i = 0, end = this.vowelsThatMightBeConsonants.length; i < end; i++)\n      if (this.vowelsThatMightBeConsonants[i] === c) return true;\n\n    return false;\n  }\n\n  // substring should be a vowel and the character following\n  isVowelActingAsConsonant(substring) {\n    return (\n      this.isVowelThatMightBeConsonant(substring[0]) &&\n      this.isVowel(substring[1])\n    );\n  }\n\n  /**\n   * f is not a mute consonant, but we lump it together for syllabification\n   * since it is syntactically treated the same way\n   *\n   * @param {String} c The character to test; must be lowercase\n   * @return {boolean} true if c is an f or a mute consonant\n   */\n  isMuteConsonantOrF(c) {\n    for (var i = 0, end = this.muteConsonantsAndF.length; i < end; i++)\n      if (this.muteConsonantsAndF[i] === c) return true;\n\n    return false;\n  }\n\n  /**\n   *\n   * @param {String} c The character to test; must be lowercase\n   * @return {boolean} true if c is a liquid consonant\n   */\n  isLiquidConsonant(c) {\n    for (var i = 0, end = this.liquidConsonants.length; i < end; i++)\n      if (this.liquidConsonants[i] === c) return true;\n\n    return false;\n  }\n\n  /**\n   *\n   * @param {String} s The string to test; must be lowercase\n   * @return {boolean} true if s is a diphthong\n   */\n  isDiphthong(s) {\n    for (var i = 0, end = this.diphthongs.length; i < end; i++)\n      if (this.diphthongs[i] === s) return true;\n\n    return false;\n  }\n\n  /**\n   *\n   * @param {String} s The string to test; must be lowercase\n   * @return {boolean} true if s is a diphthong\n   */\n  isPossibleDiphthong(s) {\n    for (var i = 0, end = this.possibleDiphthongs.length; i < end; i++)\n      if (this.possibleDiphthongs[i] === s) return true;\n\n    return false;\n  }\n\n  /**\n   * Rules for Latin syllabification (from Collins, \"A Primer on Ecclesiastical Latin\")\n   *\n   * Divisions occur when:\n   *   1. After open vowels (those not followed by a consonant) (e.g., \"pi-us\" and \"De-us\")\n   *   2. After vowels followed by a single consonant (e.g., \"vi-ta\" and \"ho-ra\")\n   *   3. After the first consonant when two or more consonants follow a vowel\n   *      (e.g., \"mis-sa\", \"minis-ter\", and \"san-ctus\").\n   *\n   * Exceptions:\n   *   1. In compound words the consonants stay together (e.g., \"de-scribo\").\n   *   2. A mute consonant (b, c, d, g, p, t) or f followed by a liquid consonant (l, r)\n   *      go with the succeeding vowel: \"la-crima\", \"pa-tris\"\n   *\n   * In addition to these rules, Wheelock's Latin provides this sound exception:\n   *   -  Also counted as single consonants are qu and the aspirates ch, ph,\n   *      th, which should never be separated in syllabification:\n   *      architectus, ar-chi-tec-tus; loquacem, lo-qua-cem.\n   *\n   */\n  syllabifyWord(word) {\n    var syllables = [];\n    var haveCompleteSyllable = false;\n    var previousWasVowel = false;\n    var workingString = word.toLowerCase();\n    var startSyllable = 0;\n\n    var c, lookahead, haveLookahead;\n\n    // a helper function to create syllables\n    var makeSyllable = function(length) {\n      if (haveCompleteSyllable) {\n        syllables.push(word.substr(startSyllable, length));\n        startSyllable += length;\n      }\n\n      haveCompleteSyllable = false;\n    };\n\n    for (var i = 0, wordLength = workingString.length; i < wordLength; i++) {\n      c = workingString[i];\n\n      // get our lookahead in case we need them...\n      lookahead = \"*\";\n      haveLookahead = i + 1 < wordLength;\n\n      if (haveLookahead) lookahead = workingString[i + 1];\n\n      var cIsVowel = this.isVowel(c);\n\n      // i is a special case for a vowel. when i is at the beginning\n      // of the word (Iesu) or i is between vowels (alleluia),\n      // then the i is treated as a consonant (y)\n      if (c === \"i\") {\n        if (i === 0 && haveLookahead && this.isVowel(lookahead))\n          cIsVowel = false;\n        else if (previousWasVowel && haveLookahead && this.isVowel(lookahead)) {\n          cIsVowel = false;\n        }\n      }\n\n      if (c === \"-\") {\n        // a hyphen forces a syllable break, which effectively resets\n        // the logic...\n\n        haveCompleteSyllable = true;\n        previousWasVowel = false;\n        makeSyllable(i - startSyllable);\n        startSyllable++;\n      } else if (cIsVowel) {\n        // once we get a vowel, we have a complete syllable\n        haveCompleteSyllable = true;\n\n        if (\n          previousWasVowel &&\n          !this.isDiphthong(workingString[i - 1] + \"\" + c)\n        ) {\n          makeSyllable(i - startSyllable);\n          haveCompleteSyllable = true;\n        }\n\n        previousWasVowel = true;\n      } else if (haveLookahead) {\n        if (\n          (c === \"q\" && lookahead === \"u\") ||\n          (lookahead === \"h\" && (c === \"c\" || c === \"p\" || c === \"t\"))\n        ) {\n          // handle wheelock's exceptions for qu, ch, ph and th\n          makeSyllable(i - startSyllable);\n          i++; // skip over the 'h' or 'u'\n        } else if (previousWasVowel && this.isVowel(lookahead)) {\n          // handle division rule 2\n          makeSyllable(i - startSyllable);\n        } else if (\n          this.isMuteConsonantOrF(c) &&\n          this.isLiquidConsonant(lookahead)\n        ) {\n          // handle exception 2\n          makeSyllable(i - startSyllable);\n        } else if (haveCompleteSyllable) {\n          // handle division rule 3\n          makeSyllable(i + 1 - startSyllable);\n        }\n\n        previousWasVowel = false;\n      }\n    }\n\n    // if we have a complete syllable, we can add it as a new one. Otherwise\n    // we tack the remaining characters onto the last syllable.\n    if (haveCompleteSyllable) syllables.push(word.substr(startSyllable));\n    else if (startSyllable > 0)\n      syllables[syllables.length - 1] += word.substr(startSyllable);\n\n    return syllables;\n  }\n\n  /**\n   * @param {String} s the string to search\n   * @param {Number} startIndex The index at which to start searching for a vowel in the string\n   * @retuns a custom class with three properties: {found: (true/false) startIndex: (start index in s of vowel segment) length ()}\n   */\n  findVowelSegment(s, startIndex) {\n    var match = this.regexVowel.exec(s.slice(startIndex));\n    if (match) {\n      if (match[1]) {\n        // the first group should be ignored, as it is to separate an i or u that is used as a consonant.\n        match.index += match[1].length;\n      }\n      return {\n        found: true,\n        startIndex: startIndex + match.index,\n        length: match[2].length\n      };\n    }\n\n    // no vowels sets found after startIndex!\n    return { found: false, startIndex: -1, length: -1 };\n  }\n}\n\n/**\n * @class\n */\nexport class Spanish extends Language {\n  constructor() {\n    super(\"Spanish\");\n\n    this.vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"á\", \"é\", \"í\", \"ó\", \"ú\", \"ü\"];\n\n    this.weakVowels = [\"i\", \"u\", \"ü\", \"y\"];\n\n    this.strongVowels = [\"a\", \"e\", \"o\", \"á\", \"é\", \"í\", \"ó\", \"ú\"];\n\n    this.diphthongs = [\n      \"ai\",\n      \"ei\",\n      \"oi\",\n      \"ui\",\n      \"ia\",\n      \"ie\",\n      \"io\",\n      \"iu\",\n      \"au\",\n      \"eu\",\n      \"ou\",\n      \"ua\",\n      \"ue\",\n      \"uo\",\n      \"ái\",\n      \"éi\",\n      \"ói\",\n      \"úi\",\n      \"iá\",\n      \"ié\",\n      \"ió\",\n      \"iú\",\n      \"áu\",\n      \"éu\",\n      \"óu\",\n      \"uá\",\n      \"ué\",\n      \"uó\",\n      \"üe\",\n      \"üi\"\n    ];\n\n    this.uDiphthongExceptions = [\"gue\", \"gui\", \"qua\", \"que\", \"qui\", \"quo\"];\n  }\n\n  // c must be lowercase!\n  isVowel(c) {\n    for (var i = 0, end = this.vowels.length; i < end; i++)\n      if (this.vowels[i] === c) return true;\n\n    return false;\n  }\n\n  /**\n   * @param {String} c The character to test; must be lowercase\n   * @return {boolean} true if c is an f or a mute consonant\n   */\n  isWeakVowel(c) {\n    for (var i = 0, end = this.weakVowels.length; i < end; i++)\n      if (this.weakVowels[i] === c) return true;\n\n    return false;\n  }\n\n  /**\n   * @param {String} c The character to test; must be lowercase\n   * @return {boolean} true if c is an f or a mute consonant\n   */\n  isStrongVowel(c) {\n    for (var i = 0, end = this.strongVowels.length; i < end; i++)\n      if (this.strongVowels[i] === c) return true;\n\n    return false;\n  }\n\n  /**\n   *\n   * @param {String} s The string to test; must be lowercase\n   * @return {boolean} true if s is a diphthong\n   */\n  isDiphthong(s) {\n    for (var i = 0, end = this.diphthongs.length; i < end; i++)\n      if (this.diphthongs[i] === s) return true;\n\n    return false;\n  }\n\n  createSyllable(text) {\n    /*\n    var accented = false;\n    var ellidesToNext = false;\n\n    if (text.length > 0) {\n\n        if (text[0] == '`') {\n            accented = true;\n            text = text.substr(1);\n        }\n\n        if (text[text.length - 1] == '_') {\n            ellidesToNext = true;\n            text = text.substr(0, text.length - 1);\n        }\n    }\n\n    var s = new Syllable(text);\n\n    s.isMusicalAccent = accented;\n    s.elidesToNext = ellidesToNext;*/\n\n    return text;\n  }\n\n  /**\n   */\n  syllabifyWord(word) {\n    var syllables = [];\n\n    var haveCompleteSyllable = false;\n    var previousIsVowel = false;\n    var previousIsStrongVowel = false; // only valid if previousIsVowel == true\n    var startSyllable = 0;\n\n    // fixme: first check for prefixes\n\n    for (var i = 0; i < word.length; i++) {\n      var c = word[i].toLowerCase();\n\n      if (this.isVowel(c)) {\n        // we have a complete syllable as soon as we have a vowel\n        haveCompleteSyllable = true;\n\n        var cIsStrongVowel = this.isStrongVowel(c);\n\n        if (previousIsVowel) {\n          // if we're at a strong vowel, then we finish out the last syllable\n          if (cIsStrongVowel) {\n            if (previousIsStrongVowel) {\n              syllables.push(\n                this.createSyllable(\n                  word.substr(startSyllable, i - startSyllable)\n                )\n              );\n              startSyllable = i;\n            }\n          }\n        }\n\n        previousIsVowel = true;\n        previousIsStrongVowel = cIsStrongVowel;\n      } else {\n        if (!haveCompleteSyllable) {\n          // do nothing since we don't have a complete syllable yet...\n        } else {\n          // handle explicit syllable breaks\n          if (word[i] === \"-\") {\n            // start new syllable\n            syllables.push(\n              this.createSyllable(word.substr(startSyllable, i - startSyllable))\n            );\n            startSyllable = ++i;\n          } else {\n            var numberOfConsonants = 1,\n              consonant2;\n\n            // count how many more consonants there are\n            for (var j = i + 1; j < word.length; j++) {\n              if (this.isVowel(word[j])) break;\n              numberOfConsonants++;\n            }\n\n            if (numberOfConsonants === 1) {\n              // start new syllable\n              syllables.push(\n                this.createSyllable(\n                  word.substr(startSyllable, i - startSyllable)\n                )\n              );\n              startSyllable = i;\n            } else if (numberOfConsonants === 2) {\n              consonant2 = word[i + 1].toLowerCase();\n              if (\n                consonant2 === \"l\" ||\n                consonant2 === \"r\" ||\n                (c === \"c\" && consonant2 === \"h\")\n              ) {\n                // split before the consonant pair\n                syllables.push(\n                  this.createSyllable(\n                    word.substr(startSyllable, i - startSyllable)\n                  )\n                );\n                startSyllable = i++;\n              } else {\n                //split the consonants\n                syllables.push(\n                  this.createSyllable(\n                    word.substr(startSyllable, ++i - startSyllable)\n                  )\n                );\n                startSyllable = i;\n              }\n            } else if (numberOfConsonants === 3) {\n              consonant2 = word[i + 1].toLowerCase();\n\n              // if second consonant is s, divide cc-c, otherwise divide c-cc\n              if (consonant2 === \"s\") {\n                i += 2;\n                syllables.push(\n                  this.createSyllable(\n                    word.substr(startSyllable, i - startSyllable)\n                  )\n                );\n              } else\n                syllables.push(\n                  this.createSyllable(\n                    word.substr(startSyllable, ++i - startSyllable)\n                  )\n                );\n\n              startSyllable = i;\n            } else if (numberOfConsonants === 4) {\n              // four always get split cc-cc\n              syllables.push(\n                this.createSyllable(\n                  word.substr(startSyllable, i - startSyllable + 2)\n                )\n              );\n              startSyllable = i + 2;\n              i += 3;\n            }\n          }\n\n          haveCompleteSyllable = false;\n        }\n\n        previousIsVowel = false;\n      }\n    }\n\n    // if we have a complete syllable, we can add it as a new one. Otherwise\n    // we tack the remaining characters onto the last syllable.\n    if (haveCompleteSyllable) syllables.push(word.substr(startSyllable));\n    else if (startSyllable > 0)\n      syllables[syllables.length - 1] += word.substr(startSyllable);\n    else if (syllables.length === 0) syllables.push(this.createSyllable(word));\n\n    return syllables;\n  }\n\n  /**\n   * @param {String} s the string to search\n   * @param {Number} startIndex The index at which to start searching for a vowel in the string\n   * @retuns a custom class with three properties: {found: (true/false) startIndex: (start index in s of vowel segment) length ()}\n   */\n  findVowelSegment(s, startIndex) {\n    var i, end, index;\n    var workingString = s.toLowerCase();\n\n    // do we have a diphthongs?\n    for (i = 0, end = this.diphthongs.length; i < end; i++) {\n      var d = this.diphthongs[i];\n      index = workingString.indexOf(d, startIndex);\n\n      if (index >= 0) {\n        // check the exceptions...\n        if (d[0] === \"u\" && index > 0) {\n          var tripthong = s.substr(index - 1, 3).toLowerCase();\n\n          for (\n            let j = 0, endj = this.uDiphthongExceptions.length;\n            i < endj;\n            j++\n          ) {\n            if (tripthong === this.uDiphthongExceptions[j]) {\n              // search from after the u...\n              return this.findVowelSegment(s, index + 1);\n            }\n          }\n        }\n\n        return { found: true, startIndex: index, length: d.length };\n      }\n    }\n\n    // no diphthongs. Let's look for single vowels then...\n    for (i = 0, end = this.vowels.length; i < end; i++) {\n      index = workingString.indexOf(this.vowels[i], startIndex);\n\n      if (index >= 0) return { found: true, startIndex: index, length: 1 };\n    }\n\n    // no vowels sets found after startIndex!\n    return { found: false, startIndex: -1, length: -1 };\n  }\n}\n\nexport const language = {\n  english: new English(),\n  latin: new Latin(),\n  spanish: new Spanish()\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/Exsurge.Text.js","//\n// Author(s):\n// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n//\n// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n// generated based on the svg data\nexport let Glyphs = {\n  None: {\n    paths: [\n      {\n        type: \"positive\",\n        data: \"\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    },\n    origin: {\n      x: 0,\n      y: 0\n    },\n    align: \"left\"\n  },\n  AcuteAccent: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M4 0C-.614.52-.614.52-.803-3.182l60.768-108.422c4.52-7.182 10.543-13.67 18.075-13.67 5.27 0 14.31 1.264 23.346 7.793 7.53 5.223 8.803 11.752 8.803 16.975 0 3.917-.52 11.1-8.05 17.628L4 0z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 0, // TODO: figure out a better way to align this horizontally.  width should be 110.992,\n      height: 125.794\n    },\n    origin: {\n      x: 0.803,\n      y: 125.274\n    },\n    align: \"left\"\n  },\n  GraveAccent: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M105.386.26C110 .78 110 .78 110.189-2.922l-60.768-108.422c-4.52-7.182-10.543-13.67-18.075-13.67-5.27 0-14.31 1.264-23.346 7.793-7.53 5.223-8.803 11.752-8.803 16.975 0 3.917.52 11.1 8.05 17.628L105.386.26z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 0, //110.992,\n      height: 125.794\n    },\n    origin: {\n      x: 0, // -110.992,\n      y: 125.274\n    },\n    align: \"left\"\n  },\n  Circle: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M0 -50A50 50 0 0 0 100 -50 50 50 0 0 0 0 -50M10 -50A40 40 0 0 1 90 -50 40 40 0 0 1 10 -50\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 100\n    },\n    origin: {\n      x: -50,\n      y: 100\n    }\n  },\n  Semicircle: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M0 -50A50 50 0 0 0 100 -50 5 5 0 0 0 90 -50 40 40 0 0 1 10 -50 5 5 0 0 0 0 -50\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 55\n    },\n    origin: {\n      x: -50,\n      y: 50\n    }\n  },\n  ReversedSemicircle: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M0 0A50 50 0 0 1 100 0 5 5 0 0 1 90 0 40 40 0 0 0 10 0 5 5 0 0 1 0 0\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 55\n    },\n    origin: {\n      x: -50,\n      y: 50\n    }\n  },\n  Stropha: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M1.22-73.438c4.165 13.02 12.238 27.084 24.217 42.188L49.657 0 34.812 27.344C18.666 55.47-.084 72.396-21.438 78.124c4.687-3.645 7.03-8.593 7.03-14.843 0-8.853-4.947-20.572-14.843-35.155L-48 0 1.22-73.438z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 97.657,\n      height: 151.562\n    },\n    origin: {\n      x: 48,\n      y: 73.438\n    },\n    align: \"left\"\n  },\n  BeginningAscLiquescent: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M-50 43.688V-61c4.167 7.292 12.76 10.938 25.78 10.938 9.376 0 20.053-1.563 32.032-4.688C31.773-60.48 45.833-71.677 50-88.344v117.97C43.75 42.645 32.812 51.5 17.187 56.186-.52 61.398-15.886 64-28.906 64-42.97 64-50 57.23-50 43.687z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 152.344\n    },\n    origin: {\n      x: 50,\n      y: 88.344\n    },\n    align: \"left\"\n  },\n  BeginningDesLiquescent: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M-50-56.03c0-13.022 7.03-19.532 21.094-19.532 13.02 0 28.385 2.604 46.093 7.812C32.813-63.583 43.75-54.73 50-41.187V76C45.833 59.854 31.77 48.656 7.812 42.406c-11.98-3.125-22.656-4.687-32.03-4.687-13.022 0-21.615 3.905-25.782 11.718v-105.47z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 151.562\n    },\n    origin: {\n      x: 50,\n      y: 75.562\n    },\n    align: \"left\"\n  },\n  CustosDescLong: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M39.063 273.472c5.73.52 7.29-6.25 4.687-20.312V-65.59c-13.542 2.083-24.22 5.468-32.03 10.156C3.905-50.226 0-43.714 0-35.904V71.91c5.73-5.21 10.677-8.594 14.844-10.157 5.73-1.562 12.24-2.343 19.53-2.343v196.875c0 11.458 1.563 17.187 4.688 17.187\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 46.353,\n      height: 339.582\n    },\n    origin: {\n      x: 0,\n      y: 65.59\n    },\n    align: \"left\"\n  },\n  CustosDescShort: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M34.375 191.923c0 8.333 1.563 12.24 4.688 11.72 3.125-.522 4.687-7.033 4.687-19.533v-250c-13.542 2.084-24.22 5.47-32.03 10.157C3.905-50.525 0-44.015 0-36.203V71.61c5.73-5.208 10.677-8.593 14.844-10.156 5.73-1.562 12.24-2.344 19.53-2.344v132.813z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 43.75,\n      height: 270.053\n    },\n    origin: {\n      x: 0,\n      y: 65.89\n    },\n    align: \"left\"\n  },\n  CustosLong: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M39.063-269.562c5.73-.52 7.29 6.25 4.687 20.312V69.5c-13.542-2.083-24.22-5.47-32.03-10.156C3.905 54.134 0 47.624 0 39.812V-68c5.73 5.208 10.677 8.594 14.844 10.156 5.73 1.563 12.24 2.344 19.53 2.344v-196.875c0-11.458 1.563-17.187 4.688-17.187z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 46.353,\n      height: 339.582\n    },\n    origin: {\n      x: 0,\n      y: 270.082\n    },\n    align: \"left\"\n  },\n  CustosShort: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M34.375-188.125c0-8.333 1.563-12.24 4.688-11.72 3.125.522 4.687 7.033 4.687 19.532v250c-13.542-2.083-24.22-5.468-32.03-10.156C3.905 54.324 0 47.813 0 40V-67.813c5.73 5.21 10.677 8.594 14.844 10.157 5.73 1.562 12.24 2.344 19.53 2.343v-132.812z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 43.75,\n      height: 270.052\n    },\n    origin: {\n      x: 0,\n      y: 200.365\n    },\n    align: \"left\"\n  },\n  DoClef: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M0 98.406V-97.688C0-118 5.99-134.275 17.97-146.516c11.978-12.24 27.603-18.36 46.874-18.36 10.937 0 19.53 3.126 25.78 9.376s9.376 14.583 9.376 25v107.813l-6.25-5.47c-4.167-3.645-10.287-7.42-18.36-11.327-8.072-3.907-16.796-5.86-26.17-5.86-11.46 0-21.486 4.427-30.08 13.282-8.593 8.854-12.89 19.53-12.89 32.03s4.297 23.308 12.89 32.423c8.594 9.115 18.62 13.672 30.08 13.672 9.374 0 18.098-1.822 26.17-5.468 8.073-3.646 14.193-7.292 18.36-10.938l6.25-6.25V132c0 9.896-3.125 18.1-9.375 24.61-6.25 6.51-14.844 9.765-25.78 9.765-19.272 0-34.897-6.25-46.876-18.75C5.99 135.125 0 118.72 0 98.405z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 331.251\n    },\n    origin: {\n      x: 0,\n      y: 164.876\n    },\n    align: \"left\"\n  },\n  FaClef: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M85.156-32v193.75c0 9.375-1.562 14.323-4.687 14.844-1.564 0-2.605-.52-3.126-1.563-.52-1.04-.782-2.603-.78-4.686V56.28c-8.335-8.332-19.793-12.5-34.376-12.5-17.71 0-31.77 3.907-42.188 11.72V-32c0-18.23 14.193-27.344 42.578-27.344 28.385 0 42.578 9.115 42.578 27.344zM98.438 93V-92.156c0-19.27 5.73-34.896 17.187-46.875 11.458-11.98 26.562-17.97 45.313-17.97 10.937 0 19.14 2.865 24.61 8.594 5.467 5.73 8.202 13.542 8.202 23.437v103.126l-5.47-4.687c-3.645-3.647-9.374-7.293-17.186-10.94-7.813-3.645-15.886-5.467-24.22-5.468-11.978 0-22.004 4.167-30.077 12.5-8.073 8.334-12.11 18.36-12.11 30.08 0 11.717 4.037 22.004 12.11 30.858s18.1 13.28 30.078 13.28c8.333 0 16.406-1.822 24.22-5.468 7.81-3.645 13.54-7.03 17.186-10.156l5.47-5.468V125.81c0 9.896-2.865 17.84-8.594 23.83-5.73 5.988-13.802 8.983-24.22 8.983-18.75 0-33.853-6.12-45.31-18.36-11.46-12.24-17.19-27.994-17.19-47.265z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 193.752,\n      height: 333.595\n    },\n    origin: {\n      x: 0.001,\n      y: 157.001\n    },\n    align: \"left\"\n  },\n  Flat: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M7.813-204.406c4.166 0 6.25 5.208 6.25 15.625L12.5-10.657C33.854 13.302 54.167 25.28 73.438 25.28c9.374 0 14.062-4.686 14.062-14.06 0-6.25-1.042-11.72-3.125-16.407-2.083-4.688-7.03-9.766-14.844-15.235-7.81-5.47-13.02-8.984-15.624-10.547L27.344-45.81V-80.97c17.187 0 33.073 4.82 47.656 14.454C89.583-56.88 96.875-47.376 96.875-38c0 67.708-.26 101.562-.78 101.563-38.543 0-69.532-12.24-92.97-36.72C0-52.322-1.042-123.936 0-188c0-10.937 2.604-16.406 7.813-16.406z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 97.917,\n      height: 267.969\n    },\n    origin: {\n      x: 1.042,\n      y: 204.406\n    },\n    align: \"left\"\n  },\n  Mora: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M47.478-24c6.957 0 12.793 2.288 17.49 6.883C69.662-12.52 72-6.904 72-.267c0 6.64-2.337 12.352-7.033 17.118C60.27 21.618 54.435 24 47.477 24c-6.26 0-11.748-2.383-16.444-7.15C26.337 12.086 24 6.374 24-.265c0-6.638 2.337-12.255 7.033-16.85C35.73-21.713 41.217-24 47.478-24z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 48,\n      height: 48\n    },\n    origin: {\n      x: -24,\n      y: 24\n    },\n    align: \"left\"\n  },\n  Natural: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M7.906-166.563c-2.864 0-5.614.52-8.218 1.563v13.28l.78 56.25.782 78.907v85.157c.52 3.646 2.604 5.73 6.25 6.25l23.438-3.906 23.437-3.907v29.69c0 42.186-.26 63.54-.78 64.06l6.25 2.345c1.04.52 2.082.78 3.124.78 2.603 0 4.947-1.3 7.03-3.905L67.656-71.25c-.52-2.604-2.083-3.906-4.687-3.906-7.814 0-17.19 1.04-28.126 3.125l-19.53 3.124.78-38.28V-165c-2.604-1.042-5.323-1.562-8.188-1.563zM55.938-40v71.875l-41.407 7.03c0-48.436.262-72.655.783-72.655L55.938-40z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 70.311,\n      height: 330.469\n    },\n    origin: {\n      x: 0.312,\n      y: 166.563\n    },\n    align: \"left\"\n  },\n  Sharp: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"m41.725,-73.773c-5.421,-0.241-10.878,5.856-6.549,12.357L67.061,-20.473 61.264,-12.5 13.436,-71.199c-5.634,-5.934-16.988,1.032-11.232,9.783L50.756,0.182 2.203,61.416c-6.745,7.984 3.442,17.859 11.232,9.783L61.264,12.5l5.797,7.973-31.885,40.943c-5.578,6.844 5.588,16.005 11.594,9.783L77.568,33.154 108.367,71.199c4.894,6.717 17.343,-1.575 11.232,-9.783L87.715,20.473 93.873,12.5 141.34,71.199c6.725,7.67 17.509,-2.248 11.596,-9.783L104.02,0.182 152.936,-61.416c5.52,-7.02-5.541,-16.309-11.596,-9.783L93.873,-12.5l-6.158,-7.973 31.884766,-40.943c5.407,-7.045-5.505,-15.924-11.232,-9.783L77.568,-33.154 46.77,-71.199c-1.435,-1.708-3.238,-2.494-5.044922,-2.574zM77.568,-8.516 84.09,0.182 77.568,8.516 70.684,0.182Z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 154.646,\n      height: 147.987\n    },\n    origin: {\n      x: 0,\n      y: 74.098\n    },\n    align: \"left\"\n  },\n  OriscusAsc: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M50 30.25c0 12.5-3.125 21.354-9.375 26.562-3.125 2.605-7.813 3.907-14.063 3.907-3.125 0-5.99-.522-8.593-1.564-2.605-1.04-5.6-2.474-8.986-4.297C5.6 53.035 2.734 51.603.39 50.56c-2.343-1.04-5.338-2.474-8.984-4.296-3.646-1.823-6.77-3.256-9.375-4.297-2.603-1.043-5.468-1.564-8.593-1.564-6.25 0-10.937 1.563-14.062 4.688C-46.875 50.824-50 59.677-50 71.656v-106.25c0-13.02 3.125-21.875 9.375-26.562 3.125-2.604 7.813-3.906 14.063-3.907 3.125 0 5.99.52 8.593 1.563 2.605 1.042 5.73 2.474 9.376 4.297 3.646 1.823 6.51 2.995 8.594 3.516l10.938 5.468c6.25 3.126 11.458 4.69 15.624 4.69 6.25 0 10.938-1.564 14.063-4.69C46.875-55.426 50-64.02 50-76V30.25z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 147.656\n    },\n    origin: {\n      x: 50,\n      y: 76\n    },\n    align: \"left\"\n  },\n  OriscusDes: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M-50 30.844v-106.25c0 11.458 3.125 20.052 9.375 25.78 3.125 3.126 7.813 4.69 14.063 4.688 4.687 0 13.41-3.255 26.17-9.765 12.762-6.51 21.746-9.766 26.954-9.766 6.25 0 10.938 1.303 14.063 3.907C46.875-55.874 50-47.02 50-34V72.25c0-11.98-3.125-20.833-9.375-26.563C37.5 42.563 32.812 41 26.562 41 21.875 41 13.023 44.385 0 51.156c-4.167 2.604-8.594 4.948-13.28 7.032-4.69 2.083-9.116 3.124-13.283 3.124-6.25 0-10.937-1.302-14.062-3.906C-46.875 52.198-50 43.344-50 30.844z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 147.656\n    },\n    origin: {\n      x: 50,\n      y: 75.406\n    },\n    align: \"left\"\n  },\n  OriscusLiquescent: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M 19.055,78.887 C 20.242,78.487 21.532,77.890 22.925,77.097 24.318,76.304 26.700882,74.417 30.074,71.438 33.447,68.458 36.524,64.985 39.303,61.019 42.083,57.052 44.563,51.396 46.743,44.05 48.923,36.704 50.013,28.671 50.013,19.950525 L 50.013,-34.226 C 50.013,-54.464 42.074,-64.584 26.195,-64.584 20.248,-64.584 11.519,-61.410 0.007,-55.064 -11.506,-48.717 -20.235,-45.544 -26.182,-45.544 -34.515,-45.544 -40.568,-48.520 -44.340791,-54.473 -48.114,-60.426 -50.000,-67.369 -50.000,-75.303 L -50.000,30.07 C -50.000,49.909 -42.060754,59.829 -26.182,59.829 -21.023,59.829 -12.39,56.455 -0.284,49.709 11.822,42.963 20.648,39.59 26.195,39.59 29.369,40.777 30.362,44.25 29.17479,50.009 27.988,55.768 26.001,62.020829 23.216,68.767 z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 147.656\n    },\n    origin: {\n      x: 50,\n      y: 75.406\n    },\n    align: \"left\"\n  },\n  PodatusLower: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M-4.688-30.28c22.396 0 34.636-.262 36.72-.782 5.728-1.563 8.593-5.21 8.593-10.938H50v97.656c0 2.604-1.302 4.167-3.906 4.688-5.21.52-21.355.78-48.438.78-23.958 0-38.54-.26-43.75-.78-2.604 0-3.906-1.302-3.906-3.906v-82.032c0-3.646 1.302-5.468 3.906-5.468h2.344c2.604.52 15.625.78 39.063.78z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 103.124\n    },\n    origin: {\n      x: 50,\n      y: 42\n    },\n    align: \"left\"\n  },\n  PodatusUpper: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M-46.094-63.78c13.542 0 24.61 2.473 33.203 7.42C-4.298-51.41 0-43.99 0-34.093V62h-9.375c0-10.938-2.604-19.14-7.812-24.61-5.21-5.468-14.844-8.203-28.907-8.202-18.23 0-33.333 4.166-45.312 12.5v-75.782c0-19.79 15.104-29.687 45.312-29.687z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 91.406,\n      height: 125.781\n    },\n    origin: {\n      x: 91.406,\n      y: 63.781\n    },\n    align: \"right\"\n  },\n  Porrectus1: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M233.594 162.875c-58.855 0-107.032-6.25-144.53-18.75C34.895 125.895-11.46 99.855-50 66V-52.75C-21.354-24.625 26.302 6.885 92.97 41.78 123.697 57.928 163.54 66 212.5 66c21.354 0 34.635-9.896 39.844-29.688V151.94c0 7.29-6.25 10.937-18.75 10.937z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 302.344,\n      height: 215.627\n    },\n    origin: {\n      x: 50,\n      y: 52.75\n    },\n    align: \"left\"\n  },\n  Porrectus2: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M309.375 259.375c-50.52 0-110.938-22.396-181.25-67.188C48.437 141.667-10.938 94.272-50 50V-68.75C0-3.125 60.417 52.083 131.25 96.875c58.333 36.98 110.677 58.854 157.03 65.625h7.033c16.145 0 26.822-9.896 32.03-29.688v114.844c0 7.812-5.99 11.72-17.968 11.72z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 377.343,\n      height: 328.126\n    },\n    origin: {\n      x: 50,\n      y: 68.75\n    },\n    align: \"left\"\n  },\n  Porrectus3: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M309.375 355.78c-48.96-16.666-109.115-55.468-180.47-116.405C79.428 198.23 19.793 134.687-50 48.75V-70C20 40 94.104 103.79 135.25 148.063 190 200 230 230 288.28 258.906c4.168 2.083 8.334 3.125 12.5 3.125 12.5 0 21.355-10.937 26.564-32.81v114.06c0 9.376-3.386 14.063-10.156 14.064-2.084 0-4.688-.522-7.813-1.563z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 377.344,\n      height: 427.345\n    },\n    origin: {\n      x: 50,\n      y: 70\n    },\n    align: \"left\"\n  },\n  Porrectus4: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M350 453.438c-52.754-22.397-120-77.345-201.74-164.844C90.87 227.656 24.784 147.708-50 48.75V-70C-8.84-1.25 58.406 86.51 151.74 193.28c60.868 69.793 119.13 124.22 174.782 163.282 5.797 3.646 11.014 5.47 15.652 5.47 12.173 0 21.45-11.72 27.826-35.157V441.72c0 9.373-3.19 14.06-9.565 14.06-2.9 0-6.377-.78-10.435-2.342z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 420,\n      height: 525.78\n    },\n    origin: {\n      x: 50,\n      y: 70\n    },\n    align: \"left\"\n  },\n  PunctumCavum: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M0-60.906c33.333 0 50 9.635 50 28.906v94.53C39.062 51.595 22.396 46.126 0 46.126s-39.063 5.47-50 16.406V-32c0-19.27 16.667-28.906 50-28.906z\"\n      },\n      {\n        type: \"negative\",\n        data:\n          \"M.08-42.56c9.585.206 20.126.53 27.954 6.822 4.96 3.9 4.71 10.792 4.574 16.482v51.278C22.09 27.066 7.283 26.072.168 26.01c-7.72.23-21.895.935-32.616 4.674.04-19.197-.083-38.395.064-57.59.567-7.5 7.834-12.33 14.62-13.774 5.818-1.498 11.857-1.86 17.844-1.88z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 123.438\n    },\n    origin: {\n      x: 50,\n      y: 60.906\n    },\n    align: \"left\"\n  },\n  PunctumQuadratum: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M0-60.906c33.333 0 50 9.635 50 28.906v94.53C39.062 51.595 22.396 46.126 0 46.126s-39.063 5.47-50 16.406V-32c0-19.27 16.667-28.906 50-28.906z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 123.438\n    },\n    origin: {\n      x: 50,\n      y: 60.906\n    },\n    align: \"left\"\n  },\n  PunctumQuadratumLiquescent: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M0-36.5436c19.999799999999997 0 30 5.781 30 17.3436v56.717999999999996C23.437199999999997 30.956999999999997 13.4376 27.6756 0 27.6756s-23.4378 3.2819999999999996-30 9.843599999999999V-19.2c0-11.562 10.000200000000001-17.3436 30-17.3436z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 123.438\n    },\n    origin: {\n      x: 50,\n      y: 60.906\n    },\n    align: \"left\"\n  },\n  PunctumQuadratumAscLiquescent: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M-50 43.688V-61c4.167 7.292 12.76 10.938 25.78 10.938 9.376 0 20.053-1.563 32.032-4.688C31.773-60.48 45.833-71.677 50-88.344v117.97C43.75 42.645 32.812 51.5 17.187 56.186-.52 61.398-15.886 64-28.906 64-42.97 64-50 57.23-50 43.687z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 152.344\n    },\n    origin: {\n      x: 50,\n      y: 88.344\n    },\n    align: \"left\"\n  },\n  PunctumQuadratumDesLiquescent: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M-50-56.03c0-13.022 7.03-19.532 21.094-19.532 13.02 0 28.385 2.604 46.093 7.812C32.813-63.583 43.75-54.73 50-41.187V76C45.833 59.854 31.77 48.656 7.812 42.406c-11.98-3.125-22.656-4.687-32.03-4.687-13.022 0-21.615 3.905-25.782 11.718v-105.47z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 151.562\n    },\n    origin: {\n      x: 50,\n      y: 75.562\n    },\n    align: \"left\"\n  },\n  PunctumInclinatum: {\n    paths: [\n      {\n        type: \"positive\",\n        data: \"M0-75.78L50 0 0 75-50 0 0-75.78z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 150.78\n    },\n    origin: {\n      x: 50,\n      y: 75.78\n    },\n    align: \"left\"\n  },\n  PunctumInclinatumLiquescent: {\n    paths: [\n      {\n        type: \"positive\",\n        data: \"M 0,-53.164 35,-0.117 0,52.383 -35,-0.117 0,-53.164 z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 105.546\n    },\n    origin: {\n      x: 50,\n      y: 53.164\n    },\n    align: \"left\"\n  },\n  Quilisma: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M-50 34.938V-51c5.73 20.833 13.02 31.25 21.875 31.25 7.813 0 12.5-15.625 14.063-46.875 3.645 12.5 6.9 21.224 9.765 26.172s6.9 7.422 12.11 7.422c5.208 0 9.374-14.324 12.5-42.97 5.73 22.917 10.677 34.375 14.843 34.375 5.73 0 10.677-15.885 14.844-47.656v100c0 17.707-3.125 26.56-9.375 26.56-4.688 0-9.115-5.988-13.28-17.968-2.085 21.875-8.074 32.813-17.97 32.813-7.813 0-16.146-7.292-25-21.875-4.688 20.312-10.677 30.47-17.97 30.47-5.207 0-9.244-2.605-12.108-7.814C-48.568 47.698-50 41.708-50 34.938z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 150\n    },\n    origin: {\n      x: 50,\n      y: 89.282\n    },\n    align: \"left\"\n  },\n  TerminatingAscLiquescent: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M-9.375 40.22c0-11.98-4.948-17.97-14.844-17.97-10.936 0-19.53 3.646-25.78 10.938v-53.126c0-6.77 2.604-12.76 7.813-17.968 5.208-5.21 10.677-8.594 16.406-10.157 2.603-.52 5.207-.78 7.81-.78 3.647 0 7.032.78 10.157 2.343C-2.603-43.896 0-39.73 0-34V73.03h-9.375V40.22z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 49.999,\n      height: 121.873\n    },\n    origin: {\n      x: 49.999,\n      y: 48.843\n    },\n    align: \"right\"\n  },\n  TerminatingDesLiquescent: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M-9.375-48.156V-80.97H0V26.845c0 5.73-2.604 9.896-7.813 12.5-3.125 1.562-6.51 2.343-10.156 2.343-2.603 0-5.207-.26-7.81-.78-5.73-1.563-11.2-4.95-16.407-10.157C-47.398 25.542-50 19.292-50 12v-52.344c6.25 7.292 14.844 10.938 25.78 10.938 9.897 0 14.845-6.25 14.845-18.75z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 50,\n      height: 122.658\n    },\n    origin: {\n      x: 50,\n      y: 80.97\n    },\n    align: \"right\"\n  },\n  VerticalEpisemaAbove: {\n    paths: [\n      {\n        type: \"positive\",\n        data: \"M-8-4c2 3 6 4 8 4s6-1 8-4v-52c-2-3-6-4-8-4s-6 1-8 4z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 16,\n      height: 60\n    },\n    origin: {\n      x: 8,\n      y: 60\n    },\n    align: \"left\"\n  },\n  VerticalEpisemaBelow: {\n    paths: [\n      {\n        type: \"positive\",\n        data: \"M-8 56c2 3 6 4 8 4s6-1 8-4v-52c-2-3-6-4-8-4s-6 1-8 4z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 16,\n      height: 60\n    },\n    origin: {\n      x: 8,\n      y: 0\n    },\n    align: \"left\"\n  },\n  VirgaLong: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M50-38v285.156c0 6.77-2.344 10.937-7.03 12.5-1.564 0-2.605-.78-3.126-2.344-.52-1.562-.782-10.156-.782-25.78V54.186C29.168 45.334 16.146 40.907 0 40.907c-22.917 0-39.583 5.208-50 15.624V-38c0-19.27 16.667-28.906 50-28.906S50-57.27 50-38z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 326.562\n    },\n    origin: {\n      x: 50,\n      y: 66.906\n    },\n    align: \"left\"\n  },\n  VirgaShort: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M50-38v211.72c0 7.29-2.344 11.457-7.03 12.5-1.564 0-2.606-.783-3.126-2.345-.52-1.563-.782-10.156-.782-25.78V54.187C29.167 45.332 16.146 40.906 0 40.906c-22.917 0-39.583 5.21-50 15.625V-38c0-19.27 16.667-28.906 50-28.906S50-57.27 50-38z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 253.126\n    },\n    origin: {\n      x: 50,\n      y: 66.906\n    },\n    align: \"left\"\n  },\n  Virgula: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M8.178-55.66c0-22.137 12.092-33.2 36.287-33.2 11.835 0 23.53 5.66 35.108 16.98C91.15-60.547 96.94-41.766 96.94-15.534c0 53.515-31.646 87.487-94.937 101.895-2.048-2.06-3.077-5.146-3.077-9.273 0-1.03.247-1.8.76-2.316 42.71-19.027 64.075-41.678 64.075-67.92 0-11.322-2.325-20.326-6.945-27.016-4.62-6.69-9.52-11.052-14.676-13.11-5.147-2.048-11.836-3.85-20.07-5.403C12.81-39.707 8.18-45.37 8.18-55.66z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 98.014,\n      height: 175.221\n    },\n    origin: {\n      x: 1.074,\n      y: 88.86\n    },\n    align: \"left\"\n  }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/Exsurge.Glyphs.js","//\n// Author(s):\n// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n//\n// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\nimport {\n  getCssForProperties, Point,\n  Rect\n} from \"./Exsurge.Core.js\";\nimport { Glyphs } from \"./Exsurge.Glyphs.js\";\nimport { language } from \"./Exsurge.Text.js\";\n\nfunction getFontFilenameForProperties(properties = {}, url = \"{}\") {\n  var italic = properties[\"font-style\"] === \"italic\" ? \"Italic\" : \"\",\n    bold = properties[\"font-weight\"] === \"bold\" ? \"Bold\" : \"\";\n  return url.replace(\n    \"{}\",\n    `${italic || bold ? `${bold}${italic}` : `Regular`}`\n  );\n}\n\n// load in the web font for special chant characters here:\n// var __exsurgeCharactersFont = require(\"url?limit=30000!../assets/fonts/ExsurgeChar.otf\")\n\nconst canAccessDOM = typeof document !== \"undefined\";\n\nconst __getNeumeFromSvgElem = (score, elem) => {\n  let note =\n    score.notes[\n      elem.parentElement\n        .querySelector(\"[element-index]\")\n        .getAttribute(\"element-index\")\n    ];\n  return note.neume || note;\n};\n\n// for positioning markings on notes\nexport var MarkingPositionHint = {\n  Default: 0,\n  Above: 1,\n  Below: 2\n};\n\n/**\n * List of types of text and their defaults relative to lyrics\n * @type Array\n */\nexport const TextTypes = {\n  supertitle: {\n    display: \"Supertitle\",\n    defaultSize: (size) => (size * 7) / 6, // 14pt\n    containedInScore: (score) => score.titles.hasSupertitle(),\n    getFromScore: (score) => score.titles.supertitle\n  },\n  title: {\n    display: \"Title\",\n    defaultSize: (size) => (size * 3) / 2, // 18pt\n    containedInScore: (score) => score.titles.hasTitle(),\n    getFromScore: (score) => score.titles.title\n  },\n  subtitle: {\n    display: \"Subtitle\",\n    defaultSize: (size) => size, // 12pt\n    containedInScore: (score) => score.titles.hasSubtitle(),\n    getFromScore: (score) => score.titles.subtitle\n  },\n  leftRight: {\n    display: \"Left / Right Text\",\n    cssClass: \"textLeftRight\",\n    defaultSize: (size) => size * 0.9,\n    containedInScore: (score) =>\n      score.titles.hasTextLeft() || score.titles.hasTextRight(),\n    getFromScore: (score, elem) => score.titles[elem.extraClass],\n    getFromSvgElem: (score, elem) =>\n      score.titles[\n        elem.classList.contains(\"textRight\") ? \"textRight\" : \"textLeft\"\n      ]\n  },\n  annotation: {\n    display: \"Annotation\",\n    defaultSize: (size) => (size * 2) / 3,\n    containedInScore: (score) =>\n      !!score.annotation &&\n      (!score.mergeAnnotationWithTextLeft || score.dropCap),\n    getFromScore: (score, { elementIndex = 0 }) =>\n      score.annotation &&\n      (score.annotation.annotations\n        ? score.annotation.annotations[elementIndex]\n        : score.annotation)\n  },\n  dropCap: {\n    display: \"Drop Cap\",\n    defaultSize: (size) => size * 4,\n    containedInScore: (score) => !!score.dropCap,\n    getFromScore: (score) => score.dropCap\n  },\n  al: {\n    display: \"Above Staff\",\n    cssClass: \"aboveLinesText\",\n    defaultSize: (size) => size,\n    containedInScore: (score) => score.hasAboveLinesText,\n    getFromScore: (score, elem) =>\n      score.notations[elem.notation.notationIndex].alText[elem.alIndex],\n    getFromSvgElem: (score, elem) =>\n      __getNeumeFromSvgElem(score, elem).alText[\n        elem.getAttribute(\"al-index\") || 0\n      ]\n  },\n  choralSign: {\n    display: \"Choral Sign\",\n    size: (ctxt) => ctxt.staffInterval * 1.5,\n    containedInScore: (score) => false,\n    getFromScore: (score, elem) =>\n      score.notes[elem.note.elementIndex].choralSign\n  },\n  lyric: {\n    display: \"Lyric\",\n    defaultSize: (size) => size * 0.9,\n    containedInScore: (score) => score.hasLyrics,\n    getFromScore: (score, elem) =>\n      score.notations[elem.notation.notationIndex].lyrics[elem.lyricIndex],\n    getFromSvgElem: (score, elem) =>\n      __getNeumeFromSvgElem(score, elem).lyrics[\n        elem.getAttribute(\"lyric-index\") || 0\n      ]\n  },\n  translation: {\n    display: \"Translation\",\n    defaultSize: (size) => size * 0.75,\n    containedInScore: (score) => score.hasTranslations,\n    getFromScore: (score, elem) =>\n      score.notations[elem.notation.notationIndex].translationText[\n        elem.translationIndex\n      ],\n    getFromSvgElem: (score, elem) =>\n      __getNeumeFromSvgElem(score, elem).translationText[\n        elem.getAttribute(\"translation-index\") || 0\n      ]\n  }\n};\nexport const TextTypesByClass = {};\nObject.entries(TextTypes).forEach(([key, entry]) => {\n  let cssClass = (entry.cssClass = entry.cssClass || key);\n  entry.key = key;\n  TextTypesByClass[cssClass] = entry;\n});\n\nexport const DefaultTrailingSpace = (ctxt) =>\n  ctxt.intraNeumeSpacing * ctxt.interSyllabicMultiplier;\nDefaultTrailingSpace.isDefault = true;\n\nexport let GlyphCode = {\n  None: \"None\",\n\n  AcuteAccent: \"AcuteAccent\",\n  GraveAccent: \"GraveAccent\",\n  Circle: \"Circle\",\n  Semicircle: \"Semicircle\",\n  ReversedSemicircle: \"ReversedSemicircle\",\n  Stropha: \"Stropha\",\n  StrophaLiquescent: \"StrophaLiquescent\",\n\n  BeginningAscLiquescent: \"BeginningAscLiquescent\",\n  BeginningDesLiquescent: \"BeginningDesLiquescent\",\n\n  CustosDescLong: \"CustosDescLong\",\n  CustosDescShort: \"CustosDescShort\",\n  CustosLong: \"CustosLong\",\n  CustosShort: \"CustosShort\",\n\n  // clefs and other markings\n  DoClef: \"DoClef\",\n  FaClef: \"FaClef\",\n  Flat: \"Flat\",\n  Mora: \"Mora\",\n  Natural: \"Natural\",\n  OriscusAsc: \"OriscusAsc\",\n  OriscusDes: \"OriscusDes\",\n  OriscusLiquescent: \"OriscusLiquescent\",\n\n  PodatusLower: \"PodatusLower\",\n  PodatusUpper: \"PodatusUpper\",\n\n  Porrectus1: \"Porrectus1\", // 1 staff line difference,\n  Porrectus2: \"Porrectus2\", // 2 lines difference, etc...\n  Porrectus3: \"Porrectus3\",\n  Porrectus4: \"Porrectus4\",\n\n  PunctumCavum: \"PunctumCavum\",\n  PunctumQuadratum: \"PunctumQuadratum\",\n  PunctumQuadratumLiquescent: \"PunctumQuadratumLiquescent\",\n  PunctumQuadratumAscLiquescent: \"PunctumQuadratumAscLiquescent\",\n  PunctumQuadratumDesLiquescent: \"PunctumQuadratumDesLiquescent\",\n  PunctumInclinatum: \"PunctumInclinatum\",\n  PunctumInclinatumLiquescent: \"PunctumInclinatumLiquescent\",\n  Quilisma: \"Quilisma\",\n\n  Sharp: \"Sharp\",\n  TerminatingAscLiquescent: \"TerminatingAscLiquescent\",\n  TerminatingDesLiquescent: \"TerminatingDesLiquescent\",\n  VerticalEpisemaAbove: \"VerticalEpisemaAbove\",\n  VerticalEpisemaBelow: \"VerticalEpisemaBelow\",\n  VirgaLong: \"VirgaLong\",\n  VirgaShort: \"VirgaShort\",\n  Virgula: \"Virgula\",\n\n  UpperBrace: \"UpperBrace\"\n}; // GlyphCode\n\nexport var QuickSvg = {\n  // namespaces\n  ns: \"http://www.w3.org/2000/svg\",\n  xmlns: \"http://www.w3.org/2000/xmlns/\",\n  xlink: \"http://www.w3.org/1999/xlink\",\n\n  hasDOMAccess: function () {\n    return canAccessDOM;\n  },\n\n  // create the root level svg object\n  svg: function (width, height) {\n    var node = document.createElementNS(this.ns, \"svg\");\n\n    node.setAttribute(\"xmlns\", this.ns);\n    node.setAttribute(\"version\", \"1.1\");\n    node.setAttributeNS(this.xmlns, \"xmlns:xlink\", this.xlink);\n\n    node.setAttribute(\"width\", width);\n    node.setAttribute(\"height\", height);\n\n    // create the defs element\n    var defs = document.createElementNS(this.ns, \"defs\");\n    node.appendChild(defs);\n\n    node.defs = defs;\n\n    node.clearNotations = function () {\n      // clear out all children except defs\n      node.removeChild(defs);\n\n      while (node.hasChildNodes()) node.removeChild(node.lastChild);\n\n      node.appendChild(defs);\n    };\n\n    return node;\n  },\n\n  rect: function (width, height) {\n    var node = document.createElementNS(this.ns, \"rect\");\n\n    node.setAttribute(\"width\", width);\n    node.setAttribute(\"height\", height);\n\n    return node;\n  },\n\n  line: function (x1, y1, x2, y2) {\n    var node = document.createElementNS(this.ns, \"line\");\n\n    node.setAttribute(\"x1\", x1);\n    node.setAttribute(\"y1\", y1);\n    node.setAttribute(\"x2\", x2);\n    node.setAttribute(\"y2\", y2);\n\n    return node;\n  },\n\n  g: function () {\n    var node = document.createElementNS(this.ns, \"g\");\n\n    return node;\n  },\n\n  text: function () {\n    var node = document.createElementNS(this.ns, \"text\");\n\n    return node;\n  },\n\n  tspan: function (str) {\n    var node = document.createElementNS(this.ns, \"tspan\");\n    node.textContent = str;\n\n    return node;\n  },\n\n  // nodeRef should be the id of the object in defs (without the #)\n  use: function (nodeRef) {\n    var node = document.createElementNS(this.ns, \"use\");\n    node.setAttributeNS(this.xlink, \"xlink:href\", \"#\" + nodeRef);\n\n    return node;\n  },\n\n  svgFragmentForGlyph: function (glyph) {\n    var svgSrc = \"\";\n    for (var i = 0; i < glyph.paths.length; ++i) {\n      var path = glyph.paths[i];\n      svgSrc += QuickSvg.createFragment(path.data ? \"path\" : \"g\", {\n        d: path.data || undefined,\n        fill: path.type === \"negative\" ? \"#fff\" : undefined\n      });\n    }\n    return svgSrc;\n  },\n\n  nodesForGlyph: function (glyph, functionName = \"createNode\") {\n    var nodes = [];\n    for (var i = 0; i < glyph.paths.length; ++i) {\n      var path = glyph.paths[i];\n      let props = {};\n      if (path.data) props.d = path.data;\n      if (path.type === \"negative\") props.fill = \"#fff\";\n      nodes.push(QuickSvg[functionName](path.data ? \"path\" : \"g\", props));\n    }\n    return nodes;\n  },\n\n  createNode: function (name, attributes, children) {\n    var node = document.createElementNS(this.ns, name);\n    if (attributes && attributes.source) {\n      node.source = attributes.source;\n      delete attributes.source;\n    }\n    for (var attr in attributes) {\n      if (\n        attributes.hasOwnProperty(attr) &&\n        typeof attributes[attr] !== \"undefined\"\n      ) {\n        var val = attributes[attr];\n        var match = attr.match(/^([^:]+):([^:]+)$/);\n        if (match) {\n          node.setAttributeNS(this[match[1]], match[2], val);\n        } else {\n          node.setAttribute(attr, val);\n        }\n      }\n    }\n    if (children) {\n      if (typeof children === \"string\") {\n        node.textContent = children;\n      } else if (children.constructor === [].constructor) {\n        for (var i = 0; i < children.length; ++i) {\n          node.appendChild(children[i]);\n        }\n      } else {\n        node.appendChild(children);\n      }\n    }\n    return node;\n  },\n\n  createSvgTree(name, props, ...children) {\n    if (\"class\" in props) {\n      props.className = props.class;\n      delete props.class;\n    }\n    if (children.length === 1 && children[0] instanceof Array) {\n      children = children[0];\n    }\n    const convertKeysToCamelCase = (obj) => {\n      for (let key of Object.keys(obj)) {\n        if (/[-:][a-z]/.test(key)) {\n          if (/^\\w+-index$/.test(key)) continue;\n          let camelCase = key.replace(/[-:]([a-z])/g, (whole, letter) =>\n            letter.toUpperCase()\n          );\n          obj[camelCase] = obj[key];\n          delete obj[key];\n        }\n      }\n    };\n    convertKeysToCamelCase(props);\n    if (props.style) convertKeysToCamelCase(props.style);\n    let source = props.source;\n    if (source && source.sourceGabc) {\n      props[\"source-gabc\"] = source.sourceGabc;\n    }\n    return { name, props, children };\n  },\n\n  createFragment: function (name, attributes, child) {\n    if (child === undefined || child === null) child = \"\";\n\n    var fragment = \"<\" + name + \" \";\n\n    for (var attr in attributes) {\n      if (\n        attributes.hasOwnProperty(attr) &&\n        typeof attributes[attr] !== \"undefined\"\n      )\n        fragment += attr + '=\"' + attributes[attr] + '\" ';\n    }\n\n    fragment += \">\" + child + \"</\" + name + \">\";\n\n    return fragment;\n  },\n\n  parseFragment: function (fragment) {\n    // create temporary holder\n    var well = document.createElement(\"svg\");\n\n    // act as a setter if svg is given\n    if (fragment) {\n      var container = this.g();\n\n      // dump raw svg\n      // do this to allow the browser to automatically create svg nodes?\n      well.innerHTML =\n        \"<svg>\" +\n        fragment\n          .replace(/\\n/, \"\")\n          .replace(/<(\\w+)([^<]+?)\\/>/g, \"<$1$2></$1>\") +\n        \"</svg>\";\n\n      // transplant nodes\n      for (var i = 0, il = well.firstChild.childNodes.length; i < il; i++)\n        container.appendChild(well.firstChild.firstChild);\n\n      return container;\n    }\n  },\n\n  translate: function (node, x, y) {\n    node.setAttribute(\"transform\", \"translate(\" + x + \",\" + y + \")\");\n    return node;\n  },\n\n  scale: function (node, sx, sy) {\n    node.setAttribute(\"transform\", \"scale(\" + sx + \",\" + sy + \")\");\n    return node;\n  }\n};\n\nexport var TextMeasuringStrategy = {\n  // shapes\n  Svg: 0,\n  Canvas: 1,\n  OpenTypeJS: 2\n};\n\nconst specialCharMap = {\n  \"℣\": 'v',\n  \"℟\": 'r'\n};\n\n/*\n * ChantContext\n */\nexport class ChantContext {\n  constructor(\n    textMeasuringStrategy = QuickSvg.hasDOMAccess()\n      ? TextMeasuringStrategy.Canvas\n      : TextMeasuringStrategy.OpenTypeJS\n  ) {\n    this.textMeasuringStrategy = textMeasuringStrategy;\n    this.defs = {};\n    this.makeDefs = [];\n    if (QuickSvg.hasDOMAccess()) {\n      this.defsNode = QuickSvg.createNode(\"defs\");\n    }\n\n    // font styles\n    this.textStyles = {};\n    this.textColor = \"#000\";\n    this.setFont(\"'Palatino Linotype', 'Book Antiqua', Palatino, serif\", 16);\n\n    this.rubricColor = \"#d00\";\n    this.specialCharProperties = {\n      \"font-family\": \"'Exsurge Characters'\",\n      fill: this.rubricColor,\n      class: 'rubric'\n    };\n    this.textBeforeSpecialChar = \"\";\n    this.textAfterSpecialChar = \".\";\n    this.specialCharText = (char) => specialCharMap[char] || char;\n\n    this.fontStyleDictionary = {\n      b: { \"font-weight\": \"bold\" },\n      i: { \"font-style\": \"italic\" },\n      u: { \"text-decoration\": \"underline\" },\n      ul: { \"text-decoration\": \"underline\" },\n      c: { fill: this.rubricColor, class: 'rubric' },\n      sc: {\n        \"font-variant\": \"small-caps\",\n        \"font-variant-caps\": \"small-caps\",\n        \"font-feature-settings\": \"'smcp'\",\n        \"-webkit-font-feature-settings\": \"'smcp'\"\n      },\n      v: {}\n    };\n\n    this.markupSymbolDictionary = {\n      \"*\": \"b\",\n      \"_\": \"i\",\n      \"^\": \"c\",\n      \"%\": \"sc\"\n    };\n\n    this.textStyles.al.prefix = \"<i>\";\n\n    this.textStyles.translation.prefix = \"<i>\";\n\n    this.textStyles.dropCap.padding = 1; // minimum padding on either side of drop cap in staffIntervals\n\n    this.textStyles.annotation.padding = 1; // minimum padding on either side of annotation in staffIntervals\n\n    this.minLedgerSeparation = 2; // multiple of staffInterval\n    this.minSpaceAboveStaff = 2; // multiple of staffInterval\n    this.minSpaceBelowStaff = 1; // multiple of staffInterval\n    this.spaceBetweenSystems = 1.5; // multiple of staffInterval\n\n    // everything depends on the scale of the punctum\n    this.glyphPunctumWidth = Glyphs.PunctumQuadratum.bounds.width;\n    this.glyphPunctumHeight = Glyphs.PunctumQuadratum.bounds.height;\n\n    // max space to add between notations when justifying, in multiples of this.staffInterval\n    this.maxExtraSpaceInStaffIntervals = 0.5;\n\n    // for keeping track of the clef\n    this.activeClef = null;\n\n    this.neumeLineColor = \"#000\";\n    this.staffLineColor = \"#000\";\n    this.dividerLineColor = \"#000\";\n\n    this.defaultLanguage = language.latin;\n\n    // calculate the pixel ratio for drawing to a canvas\n    this.pixelRatio = window.devicePixelRatio || 1.0;\n\n    //this.canvasCtxt.scale(this.pixelRatio, this.pixelRatio);\n\n    if (textMeasuringStrategy === TextMeasuringStrategy.Svg) {\n      this.svgTextMeasurer = QuickSvg.svg(0, 0);\n      this.svgTextMeasurer.setAttribute(\"id\", \"TextMeasurer\");\n      this.svgTextMeasurer.setAttribute(\"style\", \"position:absolute\");\n      document.body.insertBefore(\n        this.svgTextMeasurer,\n        document.body.firstChild\n      );\n    } else if (textMeasuringStrategy === TextMeasuringStrategy.Canvas) {\n      this.makeCanvasIfNeeded();\n    }\n\n    // for connecting neume syllables...\n    this.syllableConnector = \"-\";\n\n    // set whether to scale the def tags (scaleDefs = true) or the use tags.\n    this.scaleDefs = true;\n\n    // fixme: for now, we just set these using the glyph scales as noted above, presuming a\n    // staff line size of 0.5 in. Really what we should do is scale the punctum size based\n    // on the text metrics, right? 1 punctum ~ x height size?\n    this.setGlyphScaling(1.0 / 16.0);\n\n    // minimum space between puncta of different syllables, in multiples of this.intraNeumeSpacing\n    this.interSyllabicMultiplier = 2.5;\n\n    // space between an accidental and the following note, in multiples of this.intraNeumeSpacing\n    this.accidentalSpaceMultiplier = 2;\n\n    // space added between puncta of different words, in multiples of this.intraNeumeSpacing\n    this.interVerbalMultiplier = 1;\n\n    this.drawGuides = false;\n    this.drawDebuggingBounds = true;\n\n    // we keep track of where we are in processing notations, so that\n    // we can maintain the context for notations to know about.\n    //\n    // these are only gauranteed to be valid during the performLayout phase!\n    this.activeNotations = null;\n    this.currNotationIndex = -1;\n\n    // chant notation elements are normally separated by a minimum fixed amount of space\n    // on the staff line. It can happen, however, that two text elements are almost close\n    // enough to merge, only to be separated much more by the required hyphen (or other\n    // connecting string).\n    //\n    // This tolerance value allows a little bit of flexibility to merge two close lyrical\n    // elements, thus bringing the chant notation elements a bit closer than otherwise\n    // would be normally allowed.\n    //\n    // condensing tolerance is a percentage value (0.0-1.0, inclusive) that indicates\n    // how much the default spacing can shrink. E.g., a value of 0.20 allows the layout\n    // engine to separate two glyphs by only 80% of the normal inter-neume spacing value.\n    this.condensingTolerance = 0.3;\n\n    // if auto color is true, then exsurge tries to automatically colorize\n    // some elements of the chant (directives become rubric color, etc.)\n    this.autoColor = true;\n\n    this.useExtraTextOnly = true;\n\n    this.noteIdPrefix = 'note-';\n\n    this.insertFontsInDoc();\n  }\n\n  getFontForProperties(properties = {}, fontFamily) {\n    let key = getFontFilenameForProperties(properties),\n      keyWithFontFamily = getFontFilenameForProperties(properties, fontFamily);\n    return (\n      this.fontDictionary &&\n      (this.fontDictionary[keyWithFontFamily] ||\n        this.fontDictionary[fontFamily] ||\n        this.fontDictionary.Regular)\n    );\n  }\n\n  setFont(font, size = 16, baseStyle = {}, opentypeFontDictionary) {\n    for (let [key, textType] of Object.entries(TextTypes)) {\n      let textStyle = (this.textStyles[key] = this.textStyles[key] || {});\n      textStyle.size = textType.defaultSize\n        ? textType.defaultSize(size, this)\n        : textType.size(this);\n      textStyle.font = font;\n      textStyle.color = this.textColor || \"#000\";\n    }\n\n    this.baseTextStyle = baseStyle;\n\n    if (opentypeFontDictionary) {\n      this.textMeasuringStrategy = TextMeasuringStrategy.OpenTypeJS;\n      this.fontDictionary = opentypeFontDictionary;\n    }\n  }\n\n  setRubricColor(color) {\n    this.rubricColor = color;\n    this.specialCharProperties.fill = color;\n    this.fontStyleDictionary.c.fill = color;\n  }\n\n  setScaleDefs(scaleDefs) {\n    scaleDefs = !!scaleDefs;\n    if (this.scaleDefs !== scaleDefs) {\n      this.scaleDefs = scaleDefs;\n      this.setGlyphScaling(this.glyphScaling);\n    }\n  }\n\n  createStyleCss() {\n    var style = \"\";\n    for (let [key, textType] of Object.entries(TextTypes)) {\n      var cssClass = textType.cssClass,\n        { color, font, size } = this.textStyles[key];\n      style += `svg.Exsurge .${cssClass}{fill:${color};font-family:${font};font-size:${size}px;font-kerning:normal}`;\n    }\n    return style;\n  }\n\n  createStyleNode() {\n    var node = QuickSvg.createNode(\"style\", {});\n    node.textContent = this.createStyleCss(this);\n    return node;\n  }\n\n  createStyleTree() {\n    return { name: \"style\", props: {}, children: [this.createStyleCss(this)] };\n  }\n\n  createStyle() {\n    return \"<style>\" + this.createStyleCss(this) + \"</style>\";\n  }\n\n  updateHyphenWidth() {\n    // measure the size of a hyphen for the lyrics\n    var hyphen = new Lyric(\n      this,\n      this.syllableConnector,\n      LyricType.SingleSyllable\n    );\n    var multiplier =\n      this.minLyricWordSpacing /\n        (this.hyphenWidth || this.minLyricWordSpacing) || 1;\n    this.hyphenWidth = hyphen.bounds.width;\n\n    this.minLyricWordSpacing = multiplier * this.hyphenWidth;\n  }\n\n  setStaffHeight(staffHeight) {\n    this.setGlyphScaling(staffHeight / 600);\n  }\n\n  setGlyphScaling(glyphScaling) {\n    this.glyphScaling = glyphScaling;\n\n    this.staffInterval = this.glyphPunctumWidth * this.glyphScaling;\n\n    // setup the line weights for the various elements.\n    this.staffLineWeight = Math.ceil((5 * this.staffInterval) / 8) / 5;\n    this.neumeLineWeight = this.staffLineWeight; // the weight of connecting lines in the glyphs.\n    this.dividerLineWeight = this.neumeLineWeight; // of quarter bar, half bar, etc.\n    this.episemaLineWeight = this.neumeLineWeight * 1.25; // of horizontal episemata\n\n    this.intraNeumeSpacing = this.staffInterval / 2.0;\n\n    while (this.defsNode && this.defsNode.firstChild)\n      this.defsNode.removeChild(this.defsNode.firstChild);\n    for (var i = 0; i < this.makeDefs.length; ++i) {\n      this.makeDefs[i]();\n    }\n\n    this.updateHyphenWidth();\n  }\n\n  calculateHeightFromStaffPosition(staffPosition) {\n    return -staffPosition * this.staffInterval;\n  }\n\n  insertFontsInDoc() {\n    if (!canAccessDOM) return;\n\n    var styleElement = document.getElementById(\"exsurge-fonts\");\n\n    if (styleElement === null) {\n      // create it since it doesn't exist yet.\n      styleElement = document.createElement(\"style\");\n      styleElement.id = \"exsurge-fonts\";\n\n      // styleElement.appendChild(document.createTextNode(\"@font-face{font-family: 'Exsurge Characters';font-weight: normal;font-style: normal;src: url(\" + __exsurgeCharactersFont + \") format('opentype');}\"));\n\n      document.head.appendChild(styleElement);\n    }\n  }\n\n  // returns the next neume starting at this.currNotationIndex, or null\n  // if there isn't a neume after this one...\n  findNextNeume() {\n    if (typeof this.currNotationIndex === \"undefined\")\n      throw \"findNextNeume() called without a valid currNotationIndex set\";\n\n    for (var i = this.currNotationIndex + 1; i < this.notations.length; i++) {\n      var notation = this.notations[i];\n\n      if (notation.isNeume && !notation.hasNoWidth) return notation;\n    }\n\n    return null;\n  }\n\n  makeCanvasIfNeeded() {\n    if (!this.canvas) {\n      this.canvas = document.createElement(\"canvas\");\n      this.canvasCtxt = this.canvas.getContext(\"2d\");\n    }\n  }\n\n  setCanvasSize(width, height, scale = 1) {\n    this.makeCanvasIfNeeded();\n\n    this.canvas.style.width = width * scale + \"px\";\n    this.canvas.style.height = height * scale + \"px\";\n    scale *= this.pixelRatio;\n    this.canvas.width = width * scale;\n    this.canvas.height = height * scale;\n\n    this.canvasCtxt.setTransform(scale, 0, 0, scale, 0, 0);\n  }\n}\n\n/*\n * ChantLayoutElement\n */\nexport class ChantLayoutElement {\n  constructor() {\n    this.bounds = new Rect();\n    this.origin = new Point(0, 0);\n\n    this.selected = false;\n    this.highlighted = false;\n  }\n\n  // draws the element on an html5 canvas\n  draw(ctxt) {\n    throw \"ChantLayout Elements must implement draw(ctxt)\";\n  }\n\n  // returns svg element\n  createSvgNode(ctxt) {\n    throw \"ChantLayout Elements must implement createSvgNode(ctxt)\";\n  }\n\n  // returns svg code for the element, used for printing support\n  createSvgFragment(ctxt) {\n    throw \"ChantLayout Elements must implement createSvgFragment(ctxt)\";\n  }\n}\n\nexport class DividerLineVisualizer extends ChantLayoutElement {\n  constructor(ctxt, staffPosition0, staffPosition1, divider) {\n    super();\n\n    this.divider = divider;\n\n    var y0 = ctxt.calculateHeightFromStaffPosition(staffPosition0);\n    var y1 = ctxt.calculateHeightFromStaffPosition(staffPosition1);\n\n    if (y0 > y1) {\n      var temp = y0;\n      y0 = y1;\n      y1 = temp;\n    }\n\n    this.bounds.x = 0;\n    this.bounds.y = y0;\n    this.bounds.width = ctxt.dividerLineWeight;\n    this.bounds.height = y1 - y0;\n\n    this.origin.x = this.bounds.width / 2;\n    this.origin.y = y0;\n  }\n\n  draw(ctxt) {\n    var canvasCtxt = ctxt.canvasCtxt;\n\n    canvasCtxt.fillStyle = ctxt.dividerLineColor;\n\n    canvasCtxt.fillRect(\n      this.bounds.x,\n      this.bounds.y,\n      ctxt.dividerLineWeight,\n      this.bounds.height\n    );\n  }\n\n  getSvgProps(ctxt) {\n    let props = {\n      x: this.bounds.x,\n      y: this.bounds.y,\n      width: ctxt.dividerLineWeight,\n      height: this.bounds.height,\n      fill: ctxt.dividerLineColor,\n      class: \"dividerLine\"\n    };\n    if (this.divider) {\n      if (this.divider.selected) props.class += \" selected\";\n      props[\"source-index\"] = this.divider.sourceIndex;\n      props[\"element-index\"] = this.divider.elementIndex;\n      props.source = this.divider;\n    }\n    return props;\n  }\n\n  createSvgNode(ctxt) {\n    return QuickSvg.createNode(\"rect\", this.getSvgProps(ctxt));\n  }\n  createSvgTree(ctxt) {\n    return QuickSvg.createSvgTree(\"rect\", this.getSvgProps(ctxt));\n  }\n\n  createSvgFragment(ctxt) {\n    return QuickSvg.createFragment(\"rect\", this.getSvgProps(ctxt));\n  }\n}\n\nexport class NeumeLineVisualizer extends ChantLayoutElement {\n  constructor(ctxt, note0, note1, hanging) {\n    super();\n\n    var staffPosition0 = note0.staffPosition;\n    var staffPosition1 = note1.staffPosition;\n\n    // note0 should be the upper one for our calculations here\n    if (staffPosition0 < staffPosition1) {\n      var temp = staffPosition0;\n      staffPosition0 = staffPosition1;\n      staffPosition1 = temp;\n    }\n\n    var y0 = ctxt.calculateHeightFromStaffPosition(staffPosition0);\n    var y1 = 0;\n\n    if (hanging) {\n      // if the difference between the notes is only one, and the upper\n      // note is on a line, and the lower note is within the four staff lines,\n      // then our hanging line goes past the lower note by a whole\n      // staff interval\n      if (\n        staffPosition0 - staffPosition1 === 1 &&\n        Math.abs(staffPosition0) % 2 === 1 &&\n        staffPosition1 > -3\n      )\n        staffPosition1--;\n\n      y1 += (ctxt.glyphPunctumHeight * ctxt.glyphScaling) / 2.2;\n    }\n\n    y1 += ctxt.calculateHeightFromStaffPosition(staffPosition1);\n\n    this.bounds.x = 0;\n    this.bounds.y = y0;\n    this.bounds.width = ctxt.neumeLineWeight;\n    this.bounds.height = y1 - y0;\n\n    this.origin.x = 0;\n    this.origin.y = 0;\n  }\n\n  draw(ctxt) {\n    var canvasCtxt = ctxt.canvasCtxt;\n\n    canvasCtxt.fillStyle = ctxt.neumeLineColor;\n\n    canvasCtxt.fillRect(\n      this.bounds.x,\n      this.bounds.y,\n      ctxt.neumeLineWeight,\n      this.bounds.height\n    );\n  }\n\n  getSvgProps(ctxt) {\n    return {\n      x: this.bounds.x,\n      y: this.bounds.y,\n      width: ctxt.neumeLineWeight,\n      height: this.bounds.height,\n      fill: ctxt.neumeLineColor,\n      class: \"neumeLine\"\n    };\n  }\n\n  createSvgNode(ctxt) {\n    return QuickSvg.createNode(\"rect\", this.getSvgProps(ctxt));\n  }\n  createSvgTree(ctxt) {\n    return QuickSvg.createSvgTree(\"rect\", this.getSvgProps(ctxt));\n  }\n\n  createSvgFragment(ctxt) {\n    return QuickSvg.createFragment(\"rect\", this.getSvgProps(ctxt));\n  }\n}\n\nexport class VirgaLineVisualizer extends ChantLayoutElement {\n  constructor(ctxt, note) {\n    super();\n\n    var staffPosition = note.staffPosition;\n\n    var y0 = ctxt.calculateHeightFromStaffPosition(staffPosition);\n    var y1;\n\n    if (Math.abs(staffPosition % 2) === 0) y1 = y0 + ctxt.staffInterval * 1.8;\n    else y1 = y0 + ctxt.staffInterval * 2.7;\n\n    this.bounds.x = 0;\n    this.bounds.y = y0;\n    this.bounds.width = ctxt.neumeLineWeight;\n    this.bounds.height = y1 - y0;\n\n    this.origin.x = 0;\n    this.origin.y = 0;\n  }\n\n  draw(ctxt) {\n    var canvasCtxt = ctxt.canvasCtxt;\n\n    canvasCtxt.fillStyle = ctxt.neumeLineColor;\n    canvasCtxt.fillRect(\n      this.bounds.x,\n      this.bounds.y,\n      ctxt.neumeLineWeight,\n      this.bounds.height\n    );\n  }\n\n  getSvgProps(ctxt) {\n    return {\n      x: this.bounds.x,\n      y: this.bounds.y,\n      width: ctxt.neumeLineWeight,\n      height: this.bounds.height,\n      fill: ctxt.neumeLineColor,\n      class: \"neumeLine\"\n    };\n  }\n\n  createSvgNode(ctxt) {\n    return QuickSvg.createNode(\"rect\", this.getSvgProps(ctxt));\n  }\n  createSvgTree(ctxt) {\n    return QuickSvg.createSvgTree(\"rect\", this.getSvgProps(ctxt));\n  }\n\n  createSvgFragment(ctxt) {\n    return QuickSvg.createFragment(\"rect\", this.getSvgProps(ctxt));\n  }\n}\n\nexport class LineaVisualizer extends ChantLayoutElement {\n  constructor(ctxt, note) {\n    super();\n\n    var staffPosition = note.staffPosition;\n\n    var y0 = ctxt.calculateHeightFromStaffPosition(staffPosition) - note.origin.y;\n    var y1 = y0 + note.bounds.height;\n\n    this.bounds.x = 0;\n    this.bounds.y = y0;\n    this.bounds.width = ctxt.neumeLineWeight * 5 + note.bounds.width;\n    this.bounds.height = y1 - y0;\n\n    this.origin.x = ctxt.neumeLineWeight * 2.5;\n    this.origin.y = 0;\n  }\n\n  draw(ctxt) {\n    var canvasCtxt = ctxt.canvasCtxt;\n\n    canvasCtxt.fillStyle = ctxt.neumeLineColor;\n    canvasCtxt.fillRect(\n      this.bounds.x,\n      this.bounds.y,\n      ctxt.neumeLineWeight,\n      this.bounds.height\n    );\n    canvasCtxt.fillRect(\n      this.bounds.x + this.bounds.width - ctxt.neumeLineWeight,\n      this.bounds.y,\n      ctxt.neumeLineWeight,\n      this.bounds.height\n    );\n  }\n\n  getSvgProps(ctxt, x) {\n    return {\n      x,\n      y: this.bounds.y,\n      width: ctxt.neumeLineWeight,\n      height: this.bounds.height,\n      fill: ctxt.neumeLineColor,\n      class: \"neumeLine\"\n    };\n  }\n\n  createSvgNode(ctxt) {\n    return QuickSvg.createNode(\"g\", null, [\n      this.bounds.x,\n      this.bounds.x + this.bounds.width - ctxt.neumeLineWeight\n    ].map(x => QuickSvg.createNode(\"rect\", this.getSvgProps(ctxt, x))));\n  }\n\n  createSvgTree(ctxt) {\n    return QuickSvg.createSvgTree(\"g\", {}, ...[\n      this.bounds.x,\n      this.bounds.x + this.bounds.width - ctxt.neumeLineWeight\n    ].map(x => QuickSvg.createSvgTree(\"rect\", this.getSvgProps(ctxt, x))));\n  }\n\n  createSvgFragment(ctxt) {\n    return QuickSvg.createFragment(\"g\", null, [\n      this.bounds.x,\n      this.bounds.x + this.bounds.width - ctxt.neumeLineWeight\n    ].map(x => QuickSvg.createFragment(\"rect\", this.getSvgProps(ctxt, x))).join(''));\n  }\n}\n\nexport class GlyphVisualizer extends ChantLayoutElement {\n  constructor(ctxt, glyphCode) {\n    super();\n\n    this.glyph = null;\n\n    this.setGlyph(ctxt, glyphCode);\n  }\n\n  setGlyph(ctxt, glyphCode) {\n    if (this.glyphCode !== glyphCode) {\n      if (\n        typeof glyphCode === \"undefined\" ||\n        glyphCode === null ||\n        glyphCode === \"\"\n      )\n        this.glyphCode = GlyphCode.None;\n      else this.glyphCode = glyphCode;\n\n      this.glyph = Glyphs[this.glyphCode];\n\n      // if this glyph hasn't been used yet, then load it up in the defs section for sharing\n      if (!ctxt.defs.hasOwnProperty(this.glyphCode)) {\n        var getDefProps = () => {\n          var options = {\n            id: this.glyphCode,\n            class: \"glyph\"\n          };\n          if (ctxt.scaleDefs === true) {\n            options.transform = \"scale(\" + ctxt.glyphScaling + \")\";\n          }\n          return options;\n        };\n        var makeDef = () => {\n          let options = getDefProps();\n          // create the ref\n          ctxt.defs[this.glyphCode] = QuickSvg.createFragment(\n            \"g\",\n            options,\n            QuickSvg.svgFragmentForGlyph(this.glyph)\n          );\n\n          if (ctxt.defsNode)\n            ctxt.defsNode.appendChild(\n              QuickSvg.createNode(\n                \"g\",\n                options,\n                QuickSvg.nodesForGlyph(this.glyph)\n              )\n            );\n        };\n        makeDef.makeSvgTree = () => {\n          return QuickSvg.createSvgTree(\n            \"g\",\n            getDefProps(),\n            ...QuickSvg.nodesForGlyph(this.glyph, \"createSvgTree\")\n          );\n        };\n        makeDef();\n        ctxt.makeDefs.push(makeDef);\n      }\n\n      this.align = this.glyph.align;\n    }\n\n    this.origin.x = this.glyph.origin.x * ctxt.glyphScaling;\n    this.origin.y = this.glyph.origin.y * ctxt.glyphScaling;\n\n    this.bounds.x = 0;\n    this.bounds.y = -this.origin.y;\n    this.bounds.width = this.glyph.bounds.width * ctxt.glyphScaling;\n    this.bounds.height = this.glyph.bounds.height * ctxt.glyphScaling;\n  }\n\n  setStaffPosition(ctxt, staffPosition) {\n    this.bounds.y =\n      ctxt.calculateHeightFromStaffPosition(staffPosition) - this.origin.y;\n  }\n\n  draw(ctxt) {\n    var canvasCtxt = ctxt.canvasCtxt;\n\n    var x = this.bounds.x + this.origin.x;\n    var y = this.bounds.y + this.origin.y;\n    canvasCtxt.translate(x, y);\n    canvasCtxt.scale(ctxt.glyphScaling, ctxt.glyphScaling);\n\n    for (var i = 0; i < this.glyph.paths.length; i++) {\n      var path = this.glyph.paths[i];\n      canvasCtxt.fillStyle =\n        path.type === \"negative\" ? \"#fff\" : ctxt.neumeLineColor;\n      canvasCtxt.fill(new Path2D(path.data));\n    }\n\n    canvasCtxt.scale(1.0 / ctxt.glyphScaling, 1.0 / ctxt.glyphScaling);\n    canvasCtxt.translate(-x, -y);\n  }\n\n  getSvgAttributes(ctxt, source) {\n    let className = \"\";\n    if (/^Porrectus\\d$/.test(this.glyphCode)) {\n      let notes = source.neume.notes,\n        noteIndex = notes.indexOf(source),\n        nextNote = notes[noteIndex + 1];\n      className = source.selected\n        ? nextNote.selected\n          ? \"selected\"\n          : \"selectedA\"\n        : nextNote.selected\n        ? \"selectedB\"\n        : \"\";\n    } else {\n      let isSelected =\n        source && (source.selected || (source.model && source.model.selected));\n      className = isSelected ? \"selected\" : \"\";\n    }\n    var result = {\n      \"xlink:href\": \"#\" + this.glyphCode,\n      class: className\n    };\n    if (source) {\n      result[\"source-index\"] = source.sourceIndex;\n      result[\"element-index\"] = source.elementIndex;\n      if ('noteIndex' in source) {\n        result.class += ' note';\n        result.id = ctxt.noteIdPrefix + (source.noteIndex + 1);\n        if (source.neume) {\n          const glyphCode = source.glyphVisualizer.glyphCode;\n          if (/^Porrectus/.test(glyphCode)) {\n            result.class += ' porrectus porrectus-start';\n          } else if (glyphCode === 'None') {\n            result.class += ' porrectus porrectus-end';\n          }\n        }\n      }\n    }\n    if (ctxt.scaleDefs === true) {\n      result.x = this.bounds.x + this.origin.x;\n      result.y = this.bounds.y + this.origin.y;\n    } else {\n      result.x = (this.bounds.x + this.origin.x) / ctxt.glyphScaling;\n      result.y = (this.bounds.y + this.origin.y) / ctxt.glyphScaling;\n      result.transform = \"scale(\" + ctxt.glyphScaling + \")\";\n    }\n    return result;\n  }\n\n  createSvgNode(ctxt, source) {\n    var attributes = this.getSvgAttributes(ctxt, source);\n    attributes.source = source;\n    return QuickSvg.createNode(\"use\", attributes);\n  }\n  createSvgTree(ctxt, source) {\n    var attributes = this.getSvgAttributes(ctxt, source);\n    if (source) attributes.source = source;\n    return QuickSvg.createSvgTree(\"use\", attributes);\n  }\n\n  createSvgFragment(ctxt, source) {\n    return QuickSvg.createFragment(\"use\", this.getSvgAttributes(ctxt, source));\n  }\n}\n\nexport class RoundBraceVisualizer extends ChantLayoutElement {\n  constructor(ctxt, x1, x2, y, isAbove) {\n    super();\n\n    if (x1 > x2) {\n      // swap the xs\n      var temp = x1;\n      x1 = x2;\n      x2 = temp;\n    }\n\n    this.isAbove = isAbove;\n    this.braceHeight = (3 * ctxt.staffInterval) / 2;\n\n    this.bounds = new Rect(\n      x1,\n      isAbove ? y - this.braceHeight : y,\n      x2 - x1,\n      this.braceHeight\n    );\n\n    this.origin.x = 0;\n    this.origin.y = 0;\n  }\n\n  getSvgPathProps(ctxt) {\n    return {\n      d: this.generatePathString(),\n      stroke: ctxt.neumeLineColor,\n      \"stroke-width\": ctxt.staffLineWeight + \"px\",\n      fill: \"none\",\n      class: \"brace\"\n    };\n  }\n\n  createSvgNode(ctxt) {\n    var node = QuickSvg.createNode(\"path\", this.getSvgPathProps(ctxt));\n    if (this.accent) {\n      return QuickSvg.createNode(\n        \"g\",\n        {\n          class: \"accentedBrace\"\n        },\n        [node, this.accent.createSvgNode(ctxt)]\n      );\n    } else return node;\n  }\n  createSvgTree(ctxt) {\n    var node = QuickSvg.createSvgTree(\"path\", this.getSvgPathProps(ctxt));\n    if (this.accent) {\n      return QuickSvg.createSvgTree(\n        \"g\",\n        {\n          class: \"accentedBrace\"\n        },\n        node,\n        this.accent.createSvgTree(ctxt)\n      );\n    } else return node;\n  }\n\n  createSvgFragment(ctxt) {\n    var fragment = QuickSvg.createFragment(\"path\", this.getSvgPathProps(ctxt));\n\n    if (this.accent) {\n      fragment += this.accent.createSvgFragment(ctxt);\n\n      return QuickSvg.createFragment(\n        \"g\",\n        {\n          class: \"accentedBrace\"\n        },\n        fragment\n      );\n    } else return fragment;\n  }\n\n  // returns svg path d string\n  generatePathString() {\n    var x1 = this.bounds.x;\n    var x2 = this.bounds.right();\n    var width = this.bounds.width;\n    var y, dx, dy;\n\n    dx = width / 6;\n    dy = this.bounds.height;\n    if (this.isAbove) {\n      y = this.bounds.bottom();\n      dy = -dy;\n    } else {\n      y = this.bounds.y;\n    }\n\n    //Calculate Control Points of path,\n    var cx1 = x1 + dx;\n    var cy = y + dy;\n    var cx2 = x2 - dx;\n\n    // two decimal points should be enough, but if we need more precision, we can\n    // up it here.\n    var dp = 2;\n    return (\n      \"M \" +\n      x1.toFixed(dp) +\n      \" \" +\n      y.toFixed(dp) +\n      \" C \" +\n      cx1.toFixed(dp) +\n      \" \" +\n      cy.toFixed(dp) +\n      \" \" +\n      cx2.toFixed(dp) +\n      \" \" +\n      cy.toFixed(dp) +\n      \" \" +\n      x2.toFixed(dp) +\n      \" \" +\n      y.toFixed(dp)\n    );\n  }\n}\n\nexport class CurlyBraceVisualizer extends ChantLayoutElement {\n  constructor(ctxt, x1, x2, y, isAbove = true, addAcuteAccent = false) {\n    super();\n\n    if (x1 > x2) {\n      // swap the xs\n      var temp = x1;\n      x1 = x2;\n      x2 = temp;\n    }\n\n    this.isAbove = isAbove;\n    this.braceHeight = ctxt.staffInterval / 2;\n\n    // y is the actual vertical start of the brace (left hand side)\n    // thus for a brace over notes, bounds.y is the bottom of brace,\n    // but for a brace under the notes, y is simply the y passed in.\n    if (isAbove) y -= this.braceHeight;\n\n    var bounds = new Rect(x1, y, x2 - x1, this.braceHeight);\n\n    if (addAcuteAccent && isAbove) {\n      this.accent = new GlyphVisualizer(ctxt, GlyphCode.AcuteAccent);\n      this.accent.bounds.x += bounds.x + (x2 - x1) / 2;\n      this.accent.bounds.y += bounds.y - ctxt.staffInterval / 4;\n\n      bounds.union(this.accent.bounds);\n    }\n\n    this.bounds = bounds;\n\n    this.origin.x = 0;\n    this.origin.y = 0;\n  }\n\n  getSvgPathProps(ctxt) {\n    return {\n      d: this.generatePathString(),\n      stroke: ctxt.neumeLineColor,\n      \"stroke-width\": ctxt.staffLineWeight + \"px\",\n      fill: \"none\",\n      class: \"brace\"\n    };\n  }\n\n  createSvgNode(ctxt) {\n    var node = QuickSvg.createNode(\"path\", this.getSvgPathProps(ctxt));\n\n    if (this.accent) {\n      return QuickSvg.createNode(\n        \"g\",\n        {\n          class: \"accentedBrace\"\n        },\n        [node, this.accent.createSvgNode(ctxt)]\n      );\n    } else return node;\n  }\n  createSvgTree(ctxt) {\n    var node = QuickSvg.createSvgTree(\"path\", this.getSvgPathProps(ctxt));\n    if (this.accent) {\n      return QuickSvg.createSvgTree(\n        \"g\",\n        {\n          class: \"accentedBrace\"\n        },\n        node,\n        this.accent.createSvgTree(ctxt)\n      );\n    } else return node;\n  }\n\n  createSvgFragment(ctxt) {\n    var fragment = QuickSvg.createFragment(\"path\", this.getSvgPathProps(ctxt));\n\n    if (this.accent) {\n      fragment += this.accent.createSvgFragment(ctxt);\n\n      return QuickSvg.createFragment(\n        \"g\",\n        {\n          class: \"accentedBrace\"\n        },\n        fragment\n      );\n    } else return fragment;\n  }\n\n  // code below inspired by: https://gist.github.com/alexhornbake\n  // optimized for braces that are only drawn horizontally.\n  // returns svg path d string\n  generatePathString() {\n    var q = 0.6; // .5 is normal, higher q = more expressive bracket\n\n    var x1 = this.bounds.x;\n    var x2 = this.bounds.right();\n    var width = this.bounds.width;\n    var y, h;\n\n    if (this.isAbove) {\n      y = this.bounds.bottom();\n      h = -this.braceHeight;\n    } else {\n      y = this.bounds.y;\n      h = this.braceHeight;\n    }\n\n    // calculate Control Points of path\n    var qy1 = y + q * h;\n    var qx2 = x1 + 0.25 * width;\n    var qy2 = y + (1 - q) * h;\n    var tx1 = x1 + 0.5 * width;\n    var ty1 = y + h;\n    var qy3 = y + q * h;\n    var qx4 = x1 + 0.75 * width;\n    var qy4 = y + (1 - q) * h;\n\n    // two decimal points should be enough, but if we need more precision, we can\n    // up it here.\n    var dp = 2;\n    return (\n      \"M \" +\n      x1.toFixed(dp) +\n      \" \" +\n      y.toFixed(dp) +\n      \" Q \" +\n      x1.toFixed(dp) +\n      \" \" +\n      qy1.toFixed(dp) +\n      \" \" +\n      qx2.toFixed(dp) +\n      \" \" +\n      qy2.toFixed(dp) +\n      \" T \" +\n      tx1.toFixed(dp) +\n      \" \" +\n      ty1.toFixed(dp) +\n      \" M \" +\n      x2.toFixed(dp) +\n      \" \" +\n      y.toFixed(dp) +\n      \" Q \" +\n      x2.toFixed(dp) +\n      \" \" +\n      qy3.toFixed(dp) +\n      \" \" +\n      qx4.toFixed(dp) +\n      \" \" +\n      qy4.toFixed(dp) +\n      \" T \" +\n      tx1.toFixed(dp) +\n      \" \" +\n      ty1.toFixed(dp)\n    );\n  }\n}\n\nexport class TextSpan {\n  constructor(text, properties, activeTags, index = 0) {\n    if (typeof properties === \"undefined\" || properties === null)\n      properties = {};\n\n    this.text = text;\n    this.properties = properties;\n    this.activeTags = activeTags || [];\n    this.index = index;\n  }\n\n  clone() {\n    return new TextSpan(\n      this.text,\n      this.properties,\n      this.activeTags,\n      this.index\n    );\n  }\n}\n\nfunction MarkupStackFrame(tagName, startIndex, properties = {}) {\n  this.tagName = tagName;\n  this.startIndex = startIndex;\n  this.properties = properties;\n}\n\nMarkupStackFrame.createStackFrame = function (ctxt, tagName, startIndex) {\n  return new MarkupStackFrame(\n    tagName,\n    startIndex,\n    ctxt.fontStyleDictionary[tagName]\n  );\n};\n\n// for escaping html strings before they go into the svgs\n// adapted from http://stackoverflow.com/a/12034334/5720160\nvar __subsForTspans = {\n  \"&\": \"&amp;\",\n  \"<\": \"&lt;\",\n  \">\": \"&gt;\"\n};\n\nexport class TextElement extends ChantLayoutElement {\n  constructor(\n    ctxt,\n    text,\n    fontFamily,\n    fontSize,\n    textAnchor,\n    sourceIndex,\n    sourceGabc\n  ) {\n    super();\n\n    // set these to some sane values for now...\n    this.bounds.x = 0;\n    this.bounds.y = 0;\n    this.bounds.width = 0;\n    this.bounds.height = 0;\n    this.origin.x = 0;\n    this.origin.y = 0;\n\n    this.fontFamily = fontFamily;\n    this.fontSize = fontSize;\n    this.textAnchor = textAnchor;\n    this.sourceIndex = sourceIndex;\n    this.sourceGabc = sourceGabc;\n    this.dominantBaseline = \"baseline\"; // default placement\n\n    this.generateSpansFromText(ctxt, text);\n\n    this.recalculateMetrics(ctxt);\n  }\n\n  getFromScore(score) {\n    return this.textType.getFromScore(score, this);\n  }\n\n  generateSpansFromText(ctxt, text) {\n    text = text.replace(/\\s+/g, \" \");\n    this.text = \"\";\n    this.spans = [];\n\n    // save ourselves a lot of grief for a very common text:\n    if (text === \"*\" || text === \"†\") {\n      this.spans.push(new TextSpan(text));\n      return;\n    }\n\n    var markupStack = [];\n    var spanStartIndex = 0;\n    var newLineInNextSpan = 0;\n\n    var filterFrames = (frame, symbol) => frame.Symbol === symbol;\n\n    var closeSpan = (spanText, index, extraProperties) => {\n      if (spanText === \"\" && !this.dropCap) return;\n\n      this.text += spanText;\n\n      var properties = {};\n      for (var i = 0; i < markupStack.length; i++)\n        Object.assign(properties, markupStack[i].properties);\n\n      if (extraProperties) Object.assign(properties, extraProperties);\n      if (newLineInNextSpan) {\n        properties.newLine = newLineInNextSpan;\n        newLineInNextSpan = 0;\n      }\n\n      this.spans.push(\n        new TextSpan(\n          spanText,\n          properties,\n          markupStack.map((frame) => frame.tagName),\n          index\n        )\n      );\n    };\n\n    var markupRegex = /(<br\\/?>)|<sp>([arv])\\/<\\/sp>|([arv])\\/\\.|([℣℟])\\.?|(?:([*_^%])|<(\\/)?([bciuv]|ul|sc)>)(?=(?:(.+?)(?:\\5|<\\/\\7>))?)/gi;\n\n    var match = null;\n    var openedAsterisk = false;\n    var closeCurrentSpan = () =>\n      closeSpan(text.substring(spanStartIndex, match.index), spanStartIndex);\n    while ((match = markupRegex.exec(text))) {\n      var [\n        ,\n        newLine,\n        specialChar,\n        specialChar2,\n        specialChar3,\n        markupSymbol,\n        closingTag,\n        tagName,\n        enclosedText\n      ] = match;\n      specialChar = specialChar || specialChar2 || specialChar3;\n      // non-matching symbols first\n      if (newLine) {\n        // close the current span, if any:\n        if (match.index > spanStartIndex) {\n          closeCurrentSpan();\n        }\n        // add the newline span:\n        newLineInNextSpan++;\n      } else if (specialChar) {\n        closeCurrentSpan();\n        closeSpan(\n          ctxt.textBeforeSpecialChar +\n            ctxt.specialCharText(specialChar) +\n            ctxt.textAfterSpecialChar,\n          match.index,\n          ctxt.specialCharProperties\n        );\n      } else {\n        // otherwise we're dealing with matching markup delimeters\n        if (markupSymbol === \"*\") {\n          // we are only strict with the asterisk, because there are cases when it needs to be displayed rather than count as a markup symbol\n          if (enclosedText && /[^\\s*]/.test(enclosedText)) {\n            openedAsterisk = true;\n          } else if (openedAsterisk) {\n            openedAsterisk = false;\n          } else {\n            // actually use the asterisk, since it doesn't have a matching closing asterisk\n            continue;\n          }\n        }\n        if (markupSymbol) {\n          tagName = ctxt.markupSymbolDictionary[markupSymbol];\n          if (\n            markupStack.length > 0 &&\n            markupStack[markupStack.length - 1].tagName === tagName\n          ) {\n            closingTag = true;\n          }\n        }\n        if (\n          markupStack.length > 0 &&\n          markupStack[markupStack.length - 1].tagName === tagName\n        ) {\n          if (closingTag) {\n            // group close\n            closeCurrentSpan();\n            markupStack.pop();\n          }\n        } else if (markupStack.filter(filterFrames).length > 0) {\n          // trying to open a recursive group (or forgot to close a previous group)\n          // in either case, we just unwind to the previous stack frame\n          spanStartIndex = markupStack[markupStack.length - 1].startIndex;\n          markupStack.pop();\n          continue;\n        } else {\n          closeCurrentSpan();\n          if (closingTag) {\n            // out of order group close:\n            let index = markupStack.findIndex(\n              (frame) => frame.tagName === tagName\n            );\n            if (index >= 0) {\n              markupStack.splice(index, 1);\n            }\n          } else {\n            // group open\n            markupStack.push(\n              MarkupStackFrame.createStackFrame(ctxt, tagName, match.index)\n            );\n          }\n        }\n      }\n\n      // advance the start index past the current markup\n      spanStartIndex = match.index + match[0].length;\n    }\n\n    // if we finished matches, and there is still some text left,\n    // or if we haven't generated any spans yet, create one final run\n    if (spanStartIndex < text.length || this.spans.length === 0)\n      closeSpan(text.slice(spanStartIndex), spanStartIndex);\n  }\n\n  getCanvasFontForProperties(ctxt, properties = {}) {\n    var font = \"\";\n    if (properties[\"font-style\"] === \"italic\") font += \"italic \";\n    if (properties[\"font-variant\"] === \"small-caps\") font += \"small-caps \";\n    if (properties[\"font-weight\"] === \"bold\") font += \"bold \";\n    let fontSize = parseFloat(properties[\"font-size\"]) || this.fontSize(ctxt);\n    if (/%$/.test(properties[\"font-size\"])) {\n      fontSize *= this.fontSize(ctxt) / 100;\n    }\n    font += `${fontSize * (this.resize || 1)}px `;\n    font += properties[\"font-family\"] || this.fontFamily(ctxt);\n    return font;\n  }\n\n  measureSubstringBBox(ctxt, length) {\n    return this.measureSubstring(ctxt, length, true);\n  }\n\n  // if length is undefined and this.rightAligned === true, then offsets will be marked for each newLine span\n  measureSubstring(ctxt, length, returnBBox = false) {\n    if (length === 0) return 0;\n    if (!length) length = Infinity;\n    if (length < 0) {\n      var lines = -length;\n      length = Infinity;\n    }\n    var canvasCtxt = ctxt.canvasCtxt;\n    var width = 0;\n    var widths = [];\n    var newLineSpans = [this.spans[0]];\n    var subStringLength = 0;\n    var numLines = 1;\n    var fontSize = this.fontSize(ctxt) * (this.resize || 1);\n    var bbox = new Rect(0, 0, 0, 0);\n    for (var i = 0; i < this.spans.length; i++) {\n      var span = this.spans[i],\n        myText = span.text.slice(0, length - subStringLength);\n      if (span.properties.newLine) {\n        numLines += parseInt(span.properties.newLine) || 1;\n        if (!lines && this.rightAligned === true && length === Infinity) {\n          newLineSpans[newLineSpans.length - 1].properties.xOffset =\n            this.firstLineMaxWidth - width;\n          newLineSpans.push(span);\n        } else if (--lines === 0) break;\n        widths.push(width);\n        width = 0;\n      }\n      if (ctxt.textMeasuringStrategy === TextMeasuringStrategy.Canvas) {\n        canvasCtxt.font = this.getCanvasFontForProperties(\n          ctxt,\n          span.properties\n        );\n        let metrics = canvasCtxt.measureText(\n          myText,\n          width,\n          fontSize * (numLines - 1)\n        );\n        if (\"actualBoundingBoxAscent\" in metrics) {\n          let left = metrics.actualBoundingBoxLeft;\n          bbox.union(\n            new Rect(\n              width - left,\n              fontSize * (numLines - 1) - metrics.actualBoundingBoxAscent,\n              metrics.width + left,\n              metrics.actualBoundingBoxDescent + metrics.actualBoundingBoxAscent\n            )\n          );\n          if (this instanceof DropCap) {\n            width += Math.max(0, left);\n          }\n        } else {\n          bbox.union(\n            new Rect(width, fontSize * (numLines - 2), metrics.width, fontSize)\n          );\n        }\n        width += metrics.width;\n      } else if (\n        ctxt.textMeasuringStrategy === TextMeasuringStrategy.OpenTypeJS &&\n        ctxt.fontDictionary\n      ) {\n        // get the bounding box for the substring, placing it at x = width, y = fontSize * (numLines - 1)\n        let font = ctxt.getFontForProperties(\n          span.properties,\n          span.properties[\"font-family\"] || this.fontFamily(ctxt)\n        );\n        let options = { features: { liga: true } };\n        if (span.properties[\"font-variant\"] === \"small-caps\") {\n          options.features.smcp = true;\n        }\n        let spanFontSize = parseFloat(span.properties[\"font-size\"]) || fontSize;\n        if (/%$/.test(span.properties[\"font-size\"])) {\n          spanFontSize *= fontSize / 100;\n        }\n        let subBbox = font\n          .getPath(\n            myText,\n            width,\n            fontSize * (numLines - 1),\n            spanFontSize,\n            options\n          )\n          .getBoundingBox();\n        let subWidth = font.getAdvanceWidth(myText, spanFontSize, options);\n\n        bbox.union(\n          new Rect(\n            width + subBbox.x1,\n            subBbox.y1,\n            subWidth - subBbox.x1,\n            subBbox.y2 - subBbox.y1\n          )\n        );\n        width += subWidth;\n        if (this instanceof DropCap) {\n          width -= subBbox.x1;\n        }\n      }\n      subStringLength += myText.length;\n      if (subStringLength === length) break;\n    }\n    if (\n      !lines &&\n      width &&\n      newLineSpans.length &&\n      this.rightAligned === true &&\n      length === Infinity\n    ) {\n      newLineSpans[newLineSpans.length - 1].properties.xOffset =\n        this.firstLineMaxWidth - width;\n    }\n    width = Math.max(width, ...widths);\n    if (returnBBox === true) {\n      let height = bbox.height;\n      let y = bbox.y,\n        x = bbox.x;\n      return { width, height, x, y };\n    } else {\n      return width;\n    }\n  }\n\n  recalculateMetrics(ctxt, resetNewLines = true) {\n    if (resetNewLines) {\n      delete this.maxWidth;\n      delete this.firstLineMaxWidth;\n      delete this.rightAligned;\n      delete this.resize;\n      delete this.numLines;\n      // replace newlines with spaces\n      this.spans.forEach((span) => {\n        delete span.properties.xOffset;\n        if (span.properties.newLine === true) {\n          delete span.properties.newLine;\n          span.text = \" \" + span.text;\n        }\n      });\n    }\n\n    this.bounds.x = 0;\n    this.bounds.y = 0;\n\n    this.origin.x = 0;\n\n    if (ctxt.textMeasuringStrategy === TextMeasuringStrategy.Svg) {\n      while (ctxt.svgTextMeasurer.firstChild)\n        ctxt.svgTextMeasurer.removeChild(ctxt.svgTextMeasurer.firstChild);\n      ctxt.svgTextMeasurer.appendChild(this.createSvgNode(ctxt));\n      ctxt.svgTextMeasurer.appendChild(ctxt.createStyleNode());\n\n      var bbox = ctxt.svgTextMeasurer.firstChild.getBBox();\n      this.bounds.width = bbox.width;\n      this.bounds.height = bbox.height;\n      this.origin.y = -bbox.y; // offset to baseline from top\n      this.origin.x = -bbox.x;\n    } else {\n      let bbox = this.measureSubstringBBox(ctxt);\n      this.bounds.width = bbox.width;\n      this.bounds.height = bbox.height;\n      this.origin.y = -bbox.y;\n      this.origin.x = -bbox.x;\n    }\n    this.numLines = this.spans.reduce(\n      (result, span) =>\n        result +\n        (span.properties.newLine ? parseInt(span.properties.newLine) || 1 : 0),\n      1\n    );\n  }\n\n  setMaxWidth(ctxt, maxWidth, firstLineMaxWidth = maxWidth) {\n    if (this.spans.filter((s) => s.properties.newLine === true).length) {\n      // first get rid of any new lines set from a previous maxWidth\n      this.recalculateMetrics(ctxt);\n    }\n    if (this.bounds.width > maxWidth) {\n      this.maxWidth = maxWidth;\n      var percentage = maxWidth / this.bounds.width;\n      if (this instanceof Lyric && percentage >= 0.85) {\n        this.resize = percentage;\n      } else {\n        if (firstLineMaxWidth < 0) firstLineMaxWidth = maxWidth;\n        this.firstLineMaxWidth = firstLineMaxWidth;\n        var lastWidth = 0,\n          lastMatch = null,\n          regex = /\\s+|$/g,\n          max = firstLineMaxWidth,\n          match;\n        while (\n          (match = regex.exec(this.text)) &&\n          (!lastMatch || match.index > lastMatch.index)\n        ) {\n          var width = this.measureSubstring(ctxt, match.index);\n          if (width > max && lastMatch) {\n            var spanIndex = 0,\n              length = 0;\n            while (length < lastMatch.index && spanIndex < this.spans.length) {\n              let span = this.spans[spanIndex++];\n              length += span.text.length + (span.properties.newLine ? 1 : 0);\n            }\n            if (length > lastMatch.index) {\n              let span = this.spans[--spanIndex];\n              length -= span.text.length;\n            }\n            var splitSpan = this.spans[spanIndex],\n              textLeft = splitSpan.text.slice(0, lastMatch.index - length),\n              textRight = splitSpan.text.slice(\n                lastMatch.index + lastMatch[0].length - length\n              ),\n              newSpans = [];\n            this.rightAligned =\n              max === firstLineMaxWidth && firstLineMaxWidth !== maxWidth;\n            if (textLeft)\n              newSpans.push(\n                new TextSpan(\n                  textLeft,\n                  splitSpan.properties,\n                  splitSpan.activeTags\n                )\n              );\n            if (textRight) {\n              newSpans.push(\n                new TextSpan(\n                  textRight,\n                  Object.assign({}, splitSpan.properties, { newLine: true }),\n                  splitSpan.activeTags\n                )\n              );\n            } else if (this.spans[spanIndex + 1]) {\n              this.spans[spanIndex + 1].properties.newLine = true;\n            }\n            this.spans.splice(spanIndex, 1, ...newSpans);\n            this.needsLayout = true;\n            max = maxWidth;\n            if (\n              match.index === this.text.length ||\n              this.measureSubstring(ctxt) <= maxWidth\n            )\n              break;\n            width = 0;\n            match = lastMatch = null;\n          }\n          lastWidth = width;\n          lastMatch = match;\n        }\n      }\n      this.recalculateMetrics(ctxt, false);\n    }\n  }\n\n  getCssClasses() {\n    return (this.textType && this.textType.cssClass) || \"\";\n  }\n\n  getExtraStyleProperties(ctxt) {\n    return ctxt.baseTextStyle || {};\n  }\n\n  static escapeForTspan(string) {\n    return String(string).replace(/[&<>]/g, function (s) {\n      return __subsForTspans[s];\n    });\n  }\n\n  draw(ctxt) {\n    var canvasCtxt = ctxt.canvasCtxt;\n\n    if (this.textAnchor === \"middle\") canvasCtxt.textAlign = \"center\";\n    else canvasCtxt.textAlign = \"start\";\n\n    var translateWidth = 0,\n      translateHeight = 0;\n    for (var i = 0; i < this.spans.length; i++) {\n      var span = this.spans[i];\n      var xOffset = span.properties.xOffset || 0;\n      if (span.properties.newLine) {\n        count = parseInt(span.properties.newLine) || 1;\n        canvasCtxt.translate(\n          translateWidth + xOffset,\n          this.fontSize(ctxt) * count\n        );\n        translateWidth = -xOffset;\n        translateHeight -= this.fontSize(ctxt);\n      } else if (xOffset) {\n        canvasCtxt.translate(translateWidth + xOffset, 0);\n        translateWidth = -xOffset;\n      }\n      var properties = Object.assign(\n        {},\n        this.getExtraStyleProperties(ctxt),\n        span.properties\n      );\n      canvasCtxt.font = this.getCanvasFontForProperties(ctxt, properties);\n      canvasCtxt.fillStyle = properties.fill || \"#000\";\n      canvasCtxt.fillText(\n        span.text,\n        this.bounds.x,\n        this.bounds.y,\n        span.properties.textLength || undefined\n      );\n      var metrics = canvasCtxt.measureText(\n        span.text,\n        this.bounds.x,\n        this.bounds.y\n      );\n      translateWidth -= metrics.width;\n      canvasCtxt.translate(metrics.width, 0);\n    }\n    canvasCtxt.translate(translateWidth, translateHeight);\n  }\n\n  getSvgProps() {\n    return {\n      \"source-index\": this.sourceIndex,\n      x: this.bounds.x,\n      y: this.bounds.y,\n      class: this.getCssClasses().trim(),\n      \"text-anchor\": this.textAnchor\n      //'dominant-baseline': this.dominantBaseline, // hanging baseline doesn't work in Safari\n    };\n  }\n\n  getSpanOptions(span, ctxt, useStyleObject = false) {\n    var options = {\n      \"source-index\": span.index,\n      class: span.properties.class,\n      style: useStyleObject\n        ? Object.assign({}, span.properties)\n        : getCssForProperties(span.properties)\n    };\n\n    if (span.properties.newLine) {\n      var xOffset = span.properties.xOffset || 0;\n      options.dy = 1.1 * (parseInt(span.properties.newLine) || 1) + \"em\";\n      options.x = this.bounds.x + xOffset;\n    } else if (span.properties.xOffset) {\n      options.x = this.bounds.x + span.properties.xOffset;\n    }\n    if (span.properties.textLength) {\n      options.textLength = span.properties.textLength;\n      options.lengthAdjust = \"spacingAndGlyphs\";\n      options.y = this.bounds.y;\n    }\n    if (this.resize) {\n      options[\"font-size\"] =\n        span.properties[\"font-size\"] || this.fontSize(ctxt) * this.resize;\n    }\n    // if (ctxt.setFontFamilyAttributes) {\n    //   options[\"font-family\"] =\n    //     span.properties[\"font-family\"] ||\n    //     getFontFilenameForProperties(span.properties, this.fontFamily(ctxt));\n    //   let properties = Object.assign({}, span.properties);\n    //   delete properties[\"font-weight\"];\n    //   delete properties[\"font-style\"];\n    //   options[\"style\"] = getCssForProperties(properties);\n    // } else {\n    //   options[\"style\"] = getCssForProperties(span.properties);\n    // }\n\n    return options;\n  }\n\n  createSvgNode(ctxt) {\n    var spans = [];\n\n    for (var i = 0; i < this.spans.length; i++) {\n      let span = this.spans[i];\n      let options = this.getSpanOptions(span, ctxt);\n\n      spans.push(QuickSvg.createNode(\"tspan\", options, span.text));\n    }\n\n    let options = this.getSvgProps();\n    const extraStyleProperties = this.getExtraStyleProperties(ctxt);\n    options.style = getCssForProperties(extraStyleProperties);\n    if (extraStyleProperties.class) {\n      options.class = extraStyleProperties.class + ' ' + options.class;\n    }\n    options.source = this;\n\n    return (this.svgNode = QuickSvg.createNode(\"text\", options, spans));\n  }\n  createSvgTree(ctxt) {\n    var spans = [];\n\n    for (var i = 0; i < this.spans.length; i++) {\n      let span = this.spans[i];\n      let options = this.getSpanOptions(span, ctxt, true);\n\n      spans.push(QuickSvg.createSvgTree(\"tspan\", options, span.text));\n    }\n\n    let options = this.getSvgProps();\n    options.style = this.getExtraStyleProperties(ctxt);\n    if (options.style.class) {\n      options.class = options.style.class + ' ' + options.class;\n    }\n    options.source = this;\n\n    return QuickSvg.createSvgTree(\"text\", options, ...spans);\n  }\n\n  createSvgFragment(ctxt) {\n    var spans = \"\";\n\n    for (var i = 0; i < this.spans.length; i++) {\n      let span = this.spans[i];\n      let options = this.getSpanOptions(span, ctxt);\n\n      spans += QuickSvg.createFragment(\n        \"tspan\",\n        options,\n        TextElement.escapeForTspan(span.text)\n      );\n    }\n\n    let options = this.getSvgProps();\n    const extraStyleProperties = this.getExtraStyleProperties(ctxt)\n    options.style = getCssForProperties(extraStyleProperties);\n    if (extraStyleProperties.class) {\n      options.class = extraStyleProperties.class + ' ' + options.class;\n    }\n    if (ctxt.setFontFamilyAttributes) {\n      options[\"font-size\"] = this.fontSize(ctxt);\n    }\n\n    return QuickSvg.createFragment(\"text\", options, spans);\n  }\n}\n\nexport var LyricType = {\n  SingleSyllable: 0,\n  BeginningSyllable: 1,\n  MiddleSyllable: 2,\n  EndingSyllable: 3,\n\n  Directive: 4 // for asterisks, \"ij.\" elements, or other performance notes.\n};\n\nexport var LyricArray = {\n  getLeft: function (lyricArray) {\n    if (lyricArray.length === 0) return NaN;\n\n    var x = Number.MAX_VALUE;\n    for (var i = 0; i < lyricArray.length; i++) {\n      if (lyricArray[i])\n        x = Math.min(\n          x,\n          lyricArray[i].notation.bounds.x + lyricArray[i].bounds.x\n        );\n    }\n\n    return x;\n  },\n\n  getRight: function (lyricArray, presumeConnectorNeeded) {\n    if (lyricArray.length === 0) return NaN;\n\n    var x = Number.MIN_VALUE;\n    for (var i = 0; i < lyricArray.length; i++) {\n      let l = lyricArray[i];\n      if (l)\n        x = Math.max(\n          x,\n          l.notation.bounds.x +\n            l.bounds.x +\n            l.bounds.width +\n            (presumeConnectorNeeded && l.allowsConnector() && !l.needsConnector\n              ? l.getConnectorWidth()\n              : 0)\n        );\n    }\n\n    return x;\n  },\n\n  hasOnlyOneLyric: function (lyricArray) {\n    return lyricArray.filter((l) => l.originalText).length === 1;\n  },\n\n  indexOfLyric: function (lyricArray) {\n    return lyricArray.indexOf(lyricArray.filter((l) => l.originalText)[0]);\n  },\n\n  mergeIn: function (lyricArray, newLyrics) {\n    for (var i = 0; i < newLyrics.length; ++i) {\n      if (newLyrics[i].originalText || !lyricArray[i])\n        lyricArray[i] = newLyrics[i];\n    }\n  },\n\n  mergeInArray: function (lyricArray, notations) {\n    for (var i = 0; i < notations.length; ++i) {\n      this.mergeIn(lyricArray, notations[i].lyrics);\n    }\n  },\n\n  setNotation: function (lyricArray, notation) {\n    notation.lyrics = lyricArray;\n    for (var i = 0; i < lyricArray.length; ++i) {\n      lyricArray[i].notation = notation;\n    }\n  }\n};\n\nexport class Lyric extends TextElement {\n  constructor(ctxt, text, lyricType, notation, notations, sourceIndex) {\n    super(\n      ctxt,\n      (ctxt.textStyles.lyric.prefix || \"\") + text,\n      (ctxt) => ctxt.textStyles.lyric.font,\n      (ctxt) => ctxt.textStyles.lyric.size,\n      \"start\",\n      sourceIndex,\n      text\n    );\n    this.textType = TextTypes.lyric;\n\n    // save the original text in case we need to later use the lyric\n    // in a dropcap...\n    this.originalText = text;\n\n    this.notation = notation;\n    this.notations = notations;\n\n    if (\n      typeof lyricType === \"undefined\" ||\n      lyricType === null ||\n      lyricType === \"\"\n    )\n      this.lyricType = LyricType.SingleSyllable;\n    else this.lyricType = lyricType;\n\n    // Lyrics keep track of how to center them on notation elements.\n    // centerTextIndex is the index in this.text where the centering starts,\n    // centerLength is how many characters comprise the center point.\n    // performLayout will do the processing\n    this.centerStartIndex = -1;\n    this.centerLength = text.length;\n\n    this.needsConnector = false;\n\n    // Lyrics can have their own language defined, which affects the alignment\n    // of the text with the notation element\n    this.language = null;\n\n    if (this.allowsConnector)\n      this.connectorSpan = new TextSpan(ctxt.syllableConnector);\n  }\n\n  allowsConnector() {\n    return (\n      this.lyricType === LyricType.BeginningSyllable ||\n      this.lyricType === LyricType.MiddleSyllable\n    );\n  }\n\n  setForceConnector(force) {\n    this.forceConnector = force && this.allowsConnector();\n  }\n\n  setNeedsConnector(needs, width) {\n    if (needs === true || this.forceConnector) {\n      this.needsConnector = true;\n      if (typeof width !== \"undefined\") {\n        this.setConnectorWidth(width);\n      } else {\n        this.bounds.width =\n          this.widthWithoutConnector + this.getConnectorWidth();\n      }\n\n      if (\n        this.spans.length > 0 &&\n        this.spans[this.spans.length - 1] !== this.connectorSpan\n      )\n        this.spans.push(this.connectorSpan);\n    } else {\n      this.connectorWidth = 0;\n      this.needsConnector = false;\n      this.bounds.width = this.widthWithoutConnector;\n\n      var span = this.spans.pop();\n      if (span && span !== this.connectorSpan) this.spans.push(span);\n    }\n  }\n\n  setConnectorWidth(width) {\n    this.connectorWidth = width;\n    this.connectorSpan.properties = Object.assign(\n      {},\n      this.connectorSpan.properties,\n      { textLength: width }\n    );\n    if (this.needsConnector)\n      this.bounds.width = this.widthWithoutConnector + this.getConnectorWidth();\n  }\n\n  getConnectorWidth() {\n    return this.connectorWidth || this.defaultConnectorWidth;\n  }\n\n  getLeft() {\n    return this.notation.bounds.x + this.bounds.x;\n  }\n\n  getRight() {\n    return this.notation.bounds.x + this.bounds.x + this.bounds.width;\n  }\n\n  recalculateMetrics(ctxt, resetNewLines = true) {\n    this.setNeedsConnector();\n\n    super.recalculateMetrics(ctxt, resetNewLines);\n\n    this.widthWithoutConnector = this.bounds.width;\n\n    this.connectorWidth = 0;\n    this.defaultConnectorWidth = ctxt.hyphenWidth;\n\n    var activeLanguage = this.language || ctxt.defaultLanguage;\n\n    // calculate the point where the text lines up to the staff notation\n    // and offset the rect that much. By default we just center the text,\n    // but the logic below allows for smarter lyric alignment based\n    // on manual override or language control.\n    var offset = this.widthWithoutConnector / 2,\n      x1,\n      x2,\n      vowelSegmentWidth = this.widthWithoutConnector;\n\n    // some simple checks for sanity, and disable manual centering if the numbers are bad\n    if (\n      this.centerStartIndex >= 0 &&\n      (this.centerStartIndex >= this.text.length ||\n        this.centerLength < 0 ||\n        this.centerStartIndex + this.centerLength > this.text.length)\n    )\n      this.centerStartIndex = -1;\n\n    if (this.text.length === 0) {\n      // if we have no text to work with, then there's nothing to do!\n      // Unless it's a drop cap, in which case we center the connector:\n      if (this.dropCap && this.originalText) {\n        offset = ctxt.hyphenWidth / 2;\n        vowelSegmentWidth = ctxt.hyphenWidth;\n      }\n    } else if (this.centerStartIndex >= 0) {\n      // if we have manually overriden the centering logic for this lyric,\n      // then always use that.\n      if (ctxt.textMeasuringStrategy === TextMeasuringStrategy.Svg) {\n        // svgTextMeasurer still has the current lyric in it...\n        x1 = ctxt.svgTextMeasurer.firstChild.getSubStringLength(\n          0,\n          this.centerStartIndex\n        );\n        x2 = ctxt.svgTextMeasurer.firstChild.getSubStringLength(\n          0,\n          this.centerStartIndex + this.centerLength\n        );\n      } else {\n        x1 = this.measureSubstring(ctxt, this.centerStartIndex);\n        x2 = this.measureSubstring(\n          ctxt,\n          this.centerStartIndex + this.centerLength\n        );\n      }\n      offset = (x1 + x2) / 2;\n      vowelSegmentWidth = x2 - x1;\n    } else {\n      // if it's a directive with no manual centering override, then\n      // just center the text.\n      if (this.lyricType !== LyricType.Directive) {\n        // only consider text content after the last space (if any)\n        var startIndex = this.text.lastIndexOf(\" \") + 1;\n\n        // unless there are no text characters following the space:\n        if (\n          startIndex > 0 &&\n          !this.text\n            .slice(startIndex)\n            .match(/[a-záéíóúýäëïöüÿàèìòùỳāēīōūȳăĕĭŏŭ]/i)\n        ) {\n          startIndex = 0;\n        }\n\n        // Non-directive elements are lined up to the chant notation based on vowel segments,\n        var result = activeLanguage.findVowelSegment(this.text, startIndex);\n\n        if (result.found !== true) {\n          var match = this.text.slice(startIndex).match(/[a-z]+/i);\n          if (match) {\n            result.startIndex = startIndex + match.index;\n            result.length = match[0].length;\n          } else {\n            result.startIndex = startIndex;\n            result.length = this.text.length - startIndex;\n          }\n        }\n        if (ctxt.textMeasuringStrategy === TextMeasuringStrategy.Svg) {\n          // svgTextMeasurer still has the current lyric in it...\n          x1 = ctxt.svgTextMeasurer.firstChild.getSubStringLength(\n            0,\n            result.startIndex\n          );\n          x2 = ctxt.svgTextMeasurer.firstChild.getSubStringLength(\n            0,\n            result.startIndex + result.length\n          );\n        } else {\n          x1 = this.measureSubstring(ctxt, result.startIndex);\n          x2 = this.measureSubstring(ctxt, result.startIndex + result.length);\n        }\n        offset = (x1 + x2) / 2;\n        vowelSegmentWidth = x2 - x1;\n      }\n    }\n\n    this.vowelSegmentWidth = vowelSegmentWidth;\n\n    this.bounds.x = -offset;\n    this.bounds.y = 0;\n\n    this.origin.x = offset;\n  }\n\n  generateDropCap(ctxt) {\n    if (this.dropCap) return this.dropCap;\n    // disallow special characters:\n    if (this.spans[0].properties['font-family'] === ctxt.specialCharProperties['font-family']) {\n      return null;\n    }\n    let dropCapSpan = this.spans[0].clone();\n    dropCapSpan.text = dropCapSpan.text.slice(0, 1).toUpperCase();\n    let dropCapLowerCase = dropCapSpan.text.toLowerCase();\n    // disallow any characters that do not change from .toUpperCase():\n    if (dropCapSpan.text === dropCapLowerCase) return null;\n\n    if (dropCapSpan.activeTags.indexOf(\"sc\") >= 0)\n      dropCapSpan.text = dropCapLowerCase;\n\n    var dropCap = (this.dropCap = new DropCap(ctxt, \"\", this.sourceIndex));\n    dropCap.spans = [dropCapSpan];\n    let dropCapSourceGabcLength = this.sourceGabc.match(\n      /^(?:<\\/?[^>]>)*.?(?:<\\/[^>]>)*/\n    )[0].length;\n    dropCap.sourceGabc = this.sourceGabc.slice(0, dropCapSourceGabcLength);\n    this.sourceIndex += dropCap.sourceGabc.length;\n    this.sourceGabc = this.sourceGabc.slice(dropCapSourceGabcLength);\n\n    this.spans[0].text = this.spans[0].text.slice(1);\n    this.text = this.text.slice(1);\n    this.centerStartIndex--; // lost a letter, so adjust centering accordingly\n\n    return dropCap;\n  }\n\n  getCssClasses() {\n    var classes = this.lyricType === LyricType.Directive ? \"directive \" : \"\";\n\n    return classes + super.getCssClasses();\n  }\n\n  getExtraStyleProperties(ctxt) {\n    var props = super.getExtraStyleProperties(ctxt);\n\n    if (this.lyricType === LyricType.Directive && ctxt.autoColor === true)\n      props = Object.assign({}, props, { fill: ctxt.rubricColor });\n\n    return props;\n  }\n}\n\nexport class ChoralSign extends TextElement {\n  constructor(ctxt, text, note, sourceIndex) {\n    super(\n      ctxt,\n      (ctxt.textStyles.choralSign.prefix || \"\") + text,\n      (ctxt) => ctxt.textStyles.choralSign.font,\n      TextTypes.choralSign.size,\n      \"start\",\n      sourceIndex,\n      text\n    );\n    this.positionHint = MarkingPositionHint.Default;\n    this.note = note;\n    this.textType = TextTypes.choralSign;\n  }\n\n  recalculateMetrics(ctxt) {\n    super.recalculateMetrics(ctxt);\n  }\n\n  performLayout(ctxt) {\n    this.recalculateMetrics(ctxt);\n    this.bounds.x =\n      this.note.bounds.x +\n      Math.max(0, (ctxt.staffInterval - this.bounds.width) / 2); // center on the note itself\n\n    let offset, staffPosition;\n    if (this.positionHint === MarkingPositionHint.Below) {\n      offset = -1;\n      staffPosition = this.note.staffPosition + 2 * offset;\n      staffPosition += staffPosition % 2 === 0 ? 0.3 : 1;\n    } else {\n      offset = 1;\n      staffPosition = this.note.staffPosition + 2 * offset;\n      staffPosition += staffPosition % 2 === 0 ? 0.3 : -0.4;\n    }\n    // if (staffPosition % 2 === 0) staffPosition += offset;\n    this.bounds.y =\n      ctxt.calculateHeightFromStaffPosition(staffPosition) + this.origin.y;\n  }\n}\n\nexport class AboveLinesText extends TextElement {\n  /**\n   * @param {String} text\n   */\n  constructor(ctxt, text, notation, sourceIndex) {\n    super(\n      ctxt,\n      (ctxt.textStyles.al.prefix || \"\") + text,\n      (ctxt) => ctxt.textStyles.al.font,\n      (ctxt) => ctxt.textStyles.al.size,\n      \"start\",\n      sourceIndex,\n      text\n    );\n    this.notation = notation;\n    this.textType = TextTypes.al;\n\n    this.padding = ctxt.staffInterval / 2;\n  }\n}\n\nexport class TranslationText extends TextElement {\n  /**\n   * @param {String} text\n   */\n  constructor(ctxt, text, notation, sourceIndex) {\n    var gabcSource = text;\n    var anchor = \"start\";\n    if (text === \"/\") {\n      text = \"\";\n      anchor = \"end\";\n    } else {\n      text = (ctxt.textStyles.translation.prefix || \"\") + text;\n    }\n    super(\n      ctxt,\n      text,\n      (ctxt) => ctxt.textStyles.translation.font,\n      (ctxt) => ctxt.textStyles.translation.size,\n      anchor,\n      sourceIndex,\n      gabcSource\n    );\n    this.notation = notation;\n    this.textType = TextTypes.translation;\n\n    this.padding = ctxt.staffInterval / 2;\n  }\n}\n\nexport class DropCap extends TextElement {\n  /**\n   * @param {String} text\n   */\n  constructor(ctxt, text, sourceIndex) {\n    super(\n      ctxt,\n      (ctxt.textStyles.dropCap.prefix || \"\") + text,\n      (ctxt) => ctxt.textStyles.dropCap.font,\n      (ctxt) => ctxt.textStyles.dropCap.size,\n      \"middle\",\n      sourceIndex,\n      text\n    );\n    this.textType = TextTypes.dropCap;\n\n    this.padding = ctxt.staffInterval * ctxt.textStyles.dropCap.padding;\n  }\n}\n\nexport class TitleTextElement extends TextElement {\n  constructor(\n    ctxt,\n    text,\n    fontFamily,\n    fontSize,\n    textAnchor,\n    sourceIndex,\n    sourceGabc\n  ) {\n    super(\n      ctxt,\n      text,\n      fontFamily,\n      fontSize,\n      textAnchor,\n      sourceIndex,\n      sourceGabc\n    );\n  }\n}\n\nexport class Supertitle extends TitleTextElement {\n  constructor(ctxt, text, sourceIndex) {\n    super(\n      ctxt,\n      (ctxt.textStyles.supertitle.prefix || \"\") + text,\n      (ctxt) => ctxt.textStyles.supertitle.font,\n      (ctxt) => ctxt.textStyles.supertitle.size,\n      \"middle\",\n      sourceIndex,\n      text\n    );\n    this.textType = TextTypes.supertitle;\n\n    this.padding = (ctxt) => (\n      (Number(ctxt.textStyles.supertitle.padding) || 1) * ctxt.textStyles.supertitle.size / 3\n    );\n  }\n}\n\nexport class Title extends TitleTextElement {\n  constructor(ctxt, text, sourceIndex) {\n    super(\n      ctxt,\n      (ctxt.textStyles.title.prefix || \"\") + text,\n      (ctxt) => ctxt.textStyles.title.font,\n      (ctxt) => ctxt.textStyles.title.size,\n      \"middle\",\n      sourceIndex,\n      text\n    );\n    this.textType = TextTypes.title;\n\n    this.padding = (ctxt) => (\n      (Number(ctxt.textStyles.title.padding) || 1) * ctxt.textStyles.title.size / 3\n    );\n  }\n}\n\nexport class Subtitle extends TitleTextElement {\n  constructor(ctxt, text, sourceIndex) {\n    super(\n      ctxt,\n      (ctxt.textStyles.subtitle.prefix || \"\") + text,\n      (ctxt) => ctxt.textStyles.subtitle.font,\n      (ctxt) => ctxt.textStyles.subtitle.size,\n      \"middle\",\n      sourceIndex,\n      text\n    );\n    this.textType = TextTypes.subtitle;\n\n    this.padding = (ctxt) => (\n      (Number(ctxt.textStyles.subtitle.padding) || 1) * ctxt.textStyles.subtitle.size / 3\n    );\n  }\n}\n\nexport class TextLeftRight extends TitleTextElement {\n  constructor(ctxt, text, type, sourceIndex) {\n    super(\n      ctxt,\n      (ctxt.textStyles.leftRight.prefix || \"\") + text,\n      (ctxt) => ctxt.textStyles.leftRight.font,\n      (ctxt) => ctxt.textStyles.leftRight.size,\n      type === \"textLeft\" ? \"start\" : \"end\",\n      sourceIndex,\n      text\n    );\n    this.textType = TextTypes.leftRight;\n    this.extraClass = type === \"textLeft\" ? \"textLeft\" : \"textRight\";\n    this.headerKey = type === \"textLeft\" ? \"text-left\" : \"text-right\";\n    this.padding = (ctxt) => (\n      (Number(ctxt.textStyles.leftRight.padding) || 1) * ctxt.textStyles.leftRight.size / 5\n    );\n  }\n\n  getCssClasses() {\n    return this.extraClass + \" \" + super.getCssClasses();\n  }\n}\n\nexport class Annotation extends TextElement {\n  /**\n   * @param {String} text\n   */\n  constructor(ctxt, text) {\n    super(\n      ctxt,\n      (ctxt.textStyles.annotation.prefix || \"\") + text,\n      (ctxt) => ctxt.textStyles.annotation.font,\n      (ctxt) => ctxt.textStyles.annotation.size,\n      \"middle\"\n    );\n    this.textType = TextTypes.annotation;\n    this.padding = ctxt.staffInterval * ctxt.textStyles.annotation.padding;\n    this.dominantBaseline = \"hanging\"; // so that annotations can be aligned at the top.\n  }\n}\n\nexport class Annotations extends ChantLayoutElement {\n  /**\n   * @param {String} text\n   */\n  constructor(ctxt, ...texts) {\n    super();\n\n    this.annotations = texts.map(function (text) {\n      return new Annotation(ctxt, text);\n    });\n    this.padding = Math.max.apply(\n      null,\n      this.annotations.map(function (annotation) {\n        return annotation.padding;\n      })\n    );\n  }\n\n  updateBounds(multiplier) {\n    if (!multiplier) multiplier = 1;\n    for (var i = 0; i < this.annotations.length; ++i) {\n      var annotation = this.annotations[i];\n      annotation.bounds.x += this.bounds.x * multiplier;\n      annotation.bounds.y += this.bounds.y * multiplier;\n    }\n  }\n\n  recalculateMetrics(ctxt) {\n    this.bounds.x = 0;\n    this.bounds.y = 0;\n\n    this.bounds.width = 0;\n    this.bounds.height = 0;\n\n    this.origin.x = 0;\n    this.origin.y = 0;\n\n    for (var i = 0; i < this.annotations.length; ++i) {\n      var annotation = this.annotations[i];\n      annotation.recalculateMetrics(ctxt);\n      this.bounds.width = Math.max(this.bounds.width, annotation.bounds.width);\n      annotation.bounds.y += this.bounds.height;\n      this.bounds.height += annotation.bounds.height;\n      this.origin.y = this.origin.y || annotation.origin.y;\n    }\n  }\n\n  draw(ctxt) {\n    this.updateBounds();\n    this.annotations.forEach(function (annotation) {\n      annotation.draw(ctxt);\n    });\n    this.updateBounds(-1);\n  }\n\n  createSvgNode(ctxt) {\n    this.updateBounds();\n    var result = this.annotations.map(function (annotation) {\n      return annotation.createSvgNode(ctxt);\n    });\n    this.updateBounds(-1);\n    return result;\n  }\n  createSvgTree(ctxt) {\n    this.updateBounds();\n    var result = this.annotations.map(function (annotation) {\n      return annotation.createSvgTree(ctxt);\n    });\n    this.updateBounds(-1);\n    return { children: result };\n  }\n\n  createSvgFragment(ctxt) {\n    this.updateBounds();\n    var result = this.annotations\n      .map(function (annotation) {\n        return annotation.createSvgFragment(ctxt);\n      })\n      .join(\"\");\n    this.updateBounds(-1);\n    return result;\n  }\n}\n\nexport class ChantNotationElement extends ChantLayoutElement {\n  constructor() {\n    super();\n\n    //double\n    this.leadingSpace = 0.0;\n    this.trailingSpace = DefaultTrailingSpace;\n    this.keepWithNext = false;\n    this.needsLayout = true;\n\n    this.lyrics = [];\n\n    this.score = null; // the ChantScore\n    this.line = null; // the ChantLine\n\n    this.visualizers = [];\n  }\n\n  hasLyrics() {\n    return this.lyrics.length !== 0;\n  }\n\n  getAllLyricsLeft() {\n    if (this.lyrics.length === 0) return this.bounds.right();\n\n    var x = Number.MAX_VALUE;\n    for (var i = 0; i < this.lyrics.length; i++) {\n      if (this.lyrics[i]) x = Math.min(x, this.lyrics[i].bounds.x);\n    }\n\n    return this.bounds.x + x;\n  }\n\n  getAllLyricsRight() {\n    if (this.lyrics.length === 0) return this.bounds.x;\n\n    var x = Number.MIN_VALUE;\n    for (var i = 0; i < this.lyrics.length; i++) {\n      if (this.lyrics[i])\n        x = Math.max(x, this.lyrics[i].bounds.x + this.lyrics[i].bounds.width);\n    }\n\n    return this.bounds.x + x;\n  }\n\n  // used by subclasses while building up the chant notations.\n  addVisualizer(chantLayoutElement) {\n    if (!chantLayoutElement.ignoreBounds) {\n      if (this.bounds.isEmpty())\n        this.bounds = chantLayoutElement.bounds.clone();\n      else this.bounds.union(chantLayoutElement.bounds);\n    }\n\n    this.visualizers.push(chantLayoutElement);\n  }\n\n  // same as addVisualizer, except the element is unshifted to the front\n  // of the visualizer array rather than the end. This way, some\n  // visualizers can be placed behind the others...ledger lines for example.\n  prependVisualizer(chantLayoutElement) {\n    if (this.bounds.isEmpty()) this.bounds = chantLayoutElement.bounds.clone();\n    else this.bounds.union(chantLayoutElement.bounds);\n\n    this.visualizers.unshift(chantLayoutElement);\n  }\n\n  // chant notation elements are given an opportunity to perform their layout via this function.\n  // subclasses should call this function first in overrides of this function.\n  // on completion, exsurge presumes that the bounds, the origin, and the fragment objects are\n  // all valid and prepared for higher level layout.\n  performLayout(ctxt) {\n    if (typeof this.trailingSpace === \"function\")\n      this.calculatedTrailingSpace = this.trailingSpace(ctxt);\n    else this.calculatedTrailingSpace = this.trailingSpace;\n\n    // reset the bounds and the staff notations before doing a layout\n    this.visualizers = [];\n    this.bounds = new Rect(Infinity, Infinity, -Infinity, -Infinity);\n\n    for (var i = 0; i < this.lyrics.length; i++)\n      this.lyrics[i].recalculateMetrics(ctxt);\n\n    if (this.alText)\n      for (i = 0; i < this.alText.length; i++)\n        this.alText[i].recalculateMetrics(ctxt);\n\n    if (this.translationText)\n      for (i = 0; i < this.translationText.length; i++)\n        this.translationText[i].recalculateMetrics(ctxt);\n  }\n\n  // some subclasses have internal dependencies on other notations (for example,\n  // a custos can depend on a later neume which it uses to set its height).\n  // subclasses can override this function so that when the notations are\n  // altered, the subclass can correctly invalidate (and later restore) its own\n  // depedencies\n  resetDependencies() {}\n\n  // a helper function for subclasses to call after they are done performing layout...\n  finishLayout(ctxt) {\n    this.bounds.x = 0;\n\n    let language =\n      (this.lyrics[0] && this.lyrics[0].language) || ctxt.defaultLanguage;\n    // center the neume itself over the syllable, or just the first punctum\n    // if the neume is wider than the syllable + the width of a punctum, we always revert to centering just over the punctum\n    let calculateLyricX = language.centerNeume\n      ? (lyric) =>\n          (lyric.bounds.x =\n            this.bounds.width + ctxt.staffInterval < lyric.vowelSegmentWidth\n              ? this.bounds.width / 2 - lyric.origin.x\n              : this.origin.x - lyric.origin.x)\n      : (lyric) => (lyric.bounds.x = this.origin.x - lyric.origin.x);\n    this.lyrics.forEach(calculateLyricX);\n\n    this.needsLayout = false;\n  }\n\n  draw(ctxt) {\n    var canvasCtxt = ctxt.canvasCtxt;\n    canvasCtxt.translate(this.bounds.x, 0);\n\n    for (var i = 0; i < this.visualizers.length; i++)\n      this.visualizers[i].draw(ctxt);\n\n    for (i = 0; i < this.lyrics.length; i++) this.lyrics[i].draw(ctxt);\n\n    if (this.translationText)\n      for (i = 0; i < this.translationText.length; i++)\n        this.translationText[i].draw(ctxt);\n\n    if (this.alText)\n      for (i = 0; i < this.alText.length; i++) this.alText[i].draw(ctxt);\n\n    canvasCtxt.translate(-this.bounds.x, 0);\n  }\n\n  getInnerSvgNodes(ctxt, functionName = \"createSvgNode\") {\n    var inner = [];\n\n    for (i = 0; i < this.lyrics.length; i++)\n      inner.push(this.lyrics[i][functionName](ctxt));\n\n    if (this.translationText)\n      for (i = 0; i < this.translationText.length; i++)\n        inner.push(this.translationText[i][functionName](ctxt));\n\n    if (this.alText)\n      for (i = 0; i < this.alText.length; i++)\n        inner.push(this.alText[i][functionName](ctxt));\n\n    if (this.visualizers.length) {\n      let visualizers = [];\n      for (var i = 0; i < this.visualizers.length; i++)\n        visualizers.push(this.visualizers[i][functionName](ctxt, this));\n\n      if (functionName === \"createSvgTree\") {\n        inner.push(\n          QuickSvg.createSvgTree(\"g\", { class: \"Notations\" }, ...visualizers)\n        );\n      } else {\n        inner.push(\n          QuickSvg.createNode(\"g\", { class: \"Notations\" }, visualizers)\n        );\n      }\n    }\n    return inner;\n  }\n\n  getSvgProps() {\n    return {\n      // this.constructor.name will not be the same after being mangled by UglifyJS\n      class: \"ChantNotationElement \" + this.constructor.name,\n      transform: \"translate(\" + this.bounds.x + \",\" + 0 + \")\"\n    };\n  }\n\n  createSvgNode(ctxt) {\n    var inner = this.getInnerSvgNodes(ctxt, \"createSvgNode\");\n    var svgProps = this.getSvgProps();\n    svgProps.source = this;\n    return QuickSvg.createNode(\"g\", svgProps, inner);\n  }\n  createSvgTree(ctxt) {\n    var inner = this.getInnerSvgNodes(ctxt, \"createSvgTree\");\n    var svgProps = this.getSvgProps();\n    svgProps.source = this;\n    return QuickSvg.createSvgTree(\"g\", svgProps, ...inner);\n  }\n\n  createSvgFragment(ctxt) {\n    var inner = \"\";\n\n    for (i = 0; i < this.lyrics.length; i++)\n      inner += this.lyrics[i].createSvgFragment(ctxt);\n\n    if (this.translationText)\n      for (i = 0; i < this.translationText.length; i++)\n        inner += this.translationText[i].createSvgFragment(ctxt);\n\n    if (this.alText)\n      for (i = 0; i < this.alText.length; i++)\n        inner += this.alText[i].createSvgFragment(ctxt);\n\n    for (var i = 0; i < this.visualizers.length; i++)\n      inner += this.visualizers[i].createSvgFragment(ctxt, this);\n\n    return QuickSvg.createFragment(\"g\", this.getSvgProps(), inner);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Exsurge.Drawing.js","//\n// Author(s):\n// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n//\n// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\nimport { ChantLine } from \"./Exsurge.Chant.ChantLine.js\";\nimport { InsertionCursor } from \"./Exsurge.Chant.Signs.js\";\nimport { Pitch, Rect, Step } from \"./Exsurge.Core.js\";\nimport {\n  Annotation, ChantLayoutElement,\n  ChantNotationElement,\n  GlyphCode,\n  GlyphVisualizer, QuickSvg, TextLeftRight,\n  TextSpan\n} from \"./Exsurge.Drawing.js\";\nimport { Gabc } from \"./Exsurge.Gabc.js\";\nimport { Titles } from \"./Exsurge.Titles.js\";\n\nexport var LiquescentType = {\n  None: 0,\n\n  // flags that can be combined, though of course it\n  // it doesn't make sense to combine some!\n  Large: 1 << 0,\n  Small: 1 << 1,\n  Ascending: 1 << 2,\n  Descending: 1 << 3,\n  InitioDebilis: 1 << 4,\n\n  // handy liquescent types\n  LargeAscending: (1 << 0) | (1 << 2),\n  LargeDescending: (1 << 0) | (1 << 3),\n  SmallAscending: (1 << 1) | (1 << 2),\n  SmallDescending: (1 << 1) | (1 << 3)\n};\n\nexport var NoteShape = {\n  // shapes\n  Default: 0,\n  Virga: 1,\n  Inclinatum: 2,\n  Quilisma: 3,\n  Stropha: 4,\n  Oriscus: 5\n};\n\nexport var NoteShapeModifiers = {\n  // flags which modify the shape\n  // not all of them apply to every shape of course\n  None: 0,\n  Ascending: 1 << 0,\n  Descending: 1 << 1,\n  Cavum: 1 << 2,\n  Stemmed: 1 << 3,\n  Linea: 1 << 4,\n  Reverse: 1 << 5\n};\n\n/**\n * @class\n */\nexport class Note extends ChantLayoutElement {\n  /**\n   * @para {Pitch} pitch\n   */\n  constructor(pitch) {\n    super();\n\n    if (typeof pitch !== \"undefined\") this.pitch = pitch;\n    else this.pitch = null;\n\n    this.glyphVisualizer = null;\n\n    // The staffPosition on a note is an integer that indicates the vertical position on the staff.\n    // 0 is the center space on the staff (equivalent to gabc 'g'). Positive numbers go up\n    // the staff, and negative numbers go down, i.e., 1 is gabc 'h', 2 is gabc 'i', -1 is gabc 'f', etc.\n    this.staffPosition = 0;\n    this.liquescent = LiquescentType.None;\n    this.shape = NoteShape.Default;\n    this.shapeModifiers = NoteShapeModifiers.None;\n\n    // notes keep track of the neume they belong to in order to facilitate layout\n    // this.neume gets set when a note is added to a neume via Neume.addNote()\n    this.neume = null;\n\n    // various markings that can exist on a note, organized by type\n    // for faster access and simpler code logic\n    this.episemata = [];\n    this.morae = []; // silly to have an array of these, but gabc allows multiple morae per note!\n\n    // these are set on the note when they are needed, otherwise, they're undefined\n    // this.ictus\n    // this.accuteAccent\n    // this.braceStart\n    // this.braceEnd\n  }\n\n  setGlyph(ctxt, glyphCode) {\n    if (this.glyphVisualizer) this.glyphVisualizer.setGlyph(ctxt, glyphCode);\n    else this.glyphVisualizer = new GlyphVisualizer(ctxt, glyphCode);\n\n    this.glyphVisualizer.setStaffPosition(ctxt, this.staffPosition);\n\n    // assign glyphvisualizer metrics to this note\n    this.bounds.x = this.glyphVisualizer.bounds.x;\n    this.bounds.y = this.glyphVisualizer.bounds.y;\n    this.bounds.width = this.glyphVisualizer.bounds.width;\n    this.bounds.height = this.glyphVisualizer.bounds.height;\n\n    this.origin.x = this.glyphVisualizer.origin.x;\n    this.origin.y = this.glyphVisualizer.origin.y;\n  }\n\n  // a utility function for modifiers\n  shapeModifierMatches(shapeModifier) {\n    if (shapeModifier === NoteShapeModifiers.None)\n      return this.shapeModifier === NoteShapeModifiers.None;\n    else return this.shapeModifier & (shapeModifier !== 0);\n  }\n\n  draw(ctxt) {\n    this.glyphVisualizer.bounds.x = this.bounds.x;\n    this.glyphVisualizer.bounds.y = this.bounds.y;\n\n    this.glyphVisualizer.draw(ctxt);\n  }\n\n  createSvgNode(ctxt) {\n    this.glyphVisualizer.bounds.x = this.bounds.x;\n    this.glyphVisualizer.bounds.y = this.bounds.y;\n    this.svgNode = this.glyphVisualizer.createSvgNode(ctxt, this);\n    return this.svgNode;\n  }\n  createSvgTree(ctxt) {\n    this.glyphVisualizer.bounds.x = this.bounds.x;\n    this.glyphVisualizer.bounds.y = this.bounds.y;\n    return this.glyphVisualizer.createSvgTree(ctxt, this);\n  }\n\n  createSvgFragment(ctxt) {\n    this.glyphVisualizer.bounds.x = this.bounds.x;\n    this.glyphVisualizer.bounds.y = this.bounds.y;\n    return this.glyphVisualizer.createSvgFragment(ctxt, this);\n  }\n}\n\nexport class Clef extends ChantNotationElement {\n  constructor(staffPosition, octave, defaultAccidental = null) {\n    super();\n\n    this.isClef = true;\n    this.staffPosition = staffPosition;\n    this.octave = octave;\n    this.defaultAccidental = defaultAccidental;\n    this.activeAccidental = defaultAccidental;\n    this.keepWithNext = true;\n  }\n\n  resetAccidentals() {\n    this.activeAccidental = this.defaultAccidental;\n  }\n\n  pitchToStaffPosition(pitch) {}\n\n  performLayout(ctxt) {\n    ctxt.activeClef = this;\n\n    if (this.defaultAccidental) this.defaultAccidental.performLayout(ctxt);\n\n    super.performLayout(ctxt);\n  }\n\n  finishLayout(ctxt) {\n    // if we have a default accidental, then add a glyph for it now\n    if (this.defaultAccidental) {\n      var accidentalGlyph = this.defaultAccidental.createGlyphVisualizer(ctxt);\n      accidentalGlyph.bounds.x +=\n        this.visualizers[0].bounds.right() + ctxt.intraNeumeSpacing;\n      this.addVisualizer(accidentalGlyph);\n    }\n\n    super.finishLayout(ctxt);\n  }\n\n  static default() {\n    return __defaultDoClef;\n  }\n\n  clone() {\n    if (this.model) return this.model.clone();\n    let clone = new this.constructor(\n      this.staffPosition,\n      this.octave,\n      this.defaultAccidental\n    );\n    clone.sourceGabc = this.sourceGabc;\n    clone.sourceIndex = this.sourceIndex;\n    clone.elementIndex = this.elementIndex;\n    clone.model = this;\n    return clone;\n  }\n}\n\nexport class DoClef extends Clef {\n  constructor(staffPosition, octave, defaultAccidental = null) {\n    super(staffPosition, octave, defaultAccidental);\n\n    this.leadingSpace = 0.0;\n  }\n\n  pitchToStaffPosition(pitch) {\n    return (\n      (pitch.octave - this.octave) * 7 +\n      this.staffPosition +\n      Pitch.stepToStaffOffset(pitch.step) -\n      Pitch.stepToStaffOffset(Step.Do)\n    );\n  }\n\n  staffPositionToPitch(staffPosition) {\n    var offset = staffPosition - this.staffPosition;\n    var octaveOffset = Math.floor(offset / 7);\n\n    var step = Pitch.staffOffsetToStep(offset);\n\n    if (\n      this.activeAccidental &&\n      this.activeAccidental.staffPosition === staffPosition\n    )\n      step += this.activeAccidental.accidentalType;\n\n    return new Pitch(step, this.octave + octaveOffset);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var glyph = new GlyphVisualizer(ctxt, GlyphCode.DoClef);\n    glyph.setStaffPosition(ctxt, this.staffPosition);\n    this.addVisualizer(glyph);\n\n    this.finishLayout(ctxt);\n  }\n}\n\nvar __defaultDoClef = new DoClef(3, 2);\n\nexport class FaClef extends Clef {\n  constructor(staffPosition, octave, defaultAccidental = null) {\n    super(staffPosition, octave, defaultAccidental);\n\n    this.octave = octave;\n\n    this.leadingSpace = 0;\n  }\n\n  pitchToStaffPosition(pitch) {\n    return (\n      (pitch.octave - this.octave) * 7 +\n      this.staffPosition +\n      Pitch.stepToStaffOffset(pitch.step) -\n      Pitch.stepToStaffOffset(Step.Fa)\n    );\n  }\n\n  staffPositionToPitch(staffPosition) {\n    var offset = staffPosition - this.staffPosition + 3; // + 3 because it's a fa clef (3 == offset from Do)\n    var octaveOffset = Math.floor(offset / 7);\n\n    var step = Pitch.staffOffsetToStep(offset);\n\n    if (\n      this.activeAccidental &&\n      this.activeAccidental.staffPosition === staffPosition\n    )\n      step += this.activeAccidental.accidentalType;\n\n    return new Pitch(step, this.octave + octaveOffset);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var glyph = new GlyphVisualizer(ctxt, GlyphCode.FaClef);\n    glyph.setStaffPosition(ctxt, this.staffPosition);\n    this.addVisualizer(glyph);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * TextOnly\n */\nexport class TextOnly extends ChantNotationElement {\n  constructor(sourceIndex, sourceLength) {\n    super();\n    this.sourceIndex = sourceIndex;\n    this.sourceLength = sourceLength;\n    this.sourceGabc = \"\";\n    this.trailingSpace = 0;\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    // add an empty glyph as a placeholder\n    this.addVisualizer(new GlyphVisualizer(ctxt, GlyphCode.None));\n\n    this.origin.x = 0;\n    this.origin.y = 0;\n\n    this.finishLayout(ctxt);\n  }\n}\n\nexport class ChantLineBreak extends ChantNotationElement {\n  constructor(justify) {\n    super();\n    this.calculatedTrailingSpace = this.trailingSpace = 0;\n    this.justify = justify;\n  }\n\n  performLayout(ctxt) {\n    // reset the bounds before doing a layout\n    this.bounds = new Rect(0, 0, 0, 0);\n  }\n\n  clone() {\n    var lb = new ChantLineBreak();\n    lb.justify = this.justify;\n\n    return lb;\n  }\n}\n\n// a chant mapping is a lightweight format independent way of\n// tracking how a chant language (e.g., gabc) has been\n// mapped to exsurge notations.\nexport class ChantMapping {\n  // source can be any object type. in the case of gabc, source is a text\n  // string that maps to a gabc word (e.g.: \"no(g)bis(fg)\").\n  // notations is an array of ChantNotationElements\n  constructor(source, notations, sourceIndex) {\n    this.source = source;\n    this.notations = notations;\n    this.sourceIndex = sourceIndex;\n  }\n}\n\nconst __connectorSpan = new TextSpan(\" • \"),\n  __mergeAnnotationWithTextLeft = (...annotationSpans) =>\n    annotationSpans.reduce((result, spans) => {\n      if (result && result.length) {\n        if (spans && spans.length) return result.concat(__connectorSpan, spans);\n        else return result;\n      } else if (spans && spans.length) {\n        return spans;\n      }\n      return [];\n    });\n\n/*\n * Score, document\n */\nexport class ChantScore {\n  // mappings is an array of ChantMappings.\n  constructor(ctxt, mappings = [], useDropCap) {\n    this.mappings = mappings;\n\n    this.lines = [];\n    this.notes = [];\n    if (ctxt) this.titles = new Titles(ctxt, this);\n\n    this.startingClef = null;\n\n    this.useDropCap = useDropCap;\n    this.dropCap = null;\n\n    this.annotation = null;\n\n    this.compiled = false;\n\n    this.autoColoring = true;\n    this.needsLayout = true;\n\n    // valid after chant lines are created...\n    this.bounds = new Rect();\n\n    this.mergeAnnotationWithTextLeft = __mergeAnnotationWithTextLeft;\n\n    if (ctxt) this.updateNotations(ctxt);\n  }\n\n  /**\n   * Make a copy of the score, only including the specified lines\n   * @param  {number} startLine starting index\n   * @param  {number} endLine   ending index\n   * @return {ChantScore}           the partial score\n   */\n  copyLines(startLine, endLine) {\n    let result = new ChantScore();\n    result.lines = this.lines.slice(startLine, endLine);\n    result.bounds = this.bounds.clone();\n    let lastLine = result.lines.slice(-1)[0];\n    result.bounds.height = lastLine.bounds.bottom() - lastLine.origin.y;\n    if (startLine === 0) {\n      result.titles = this.titles;\n      result.dropCap = this.dropCap;\n      result.annotation = this.annotation;\n    }\n    return result;\n  }\n\n  updateSelection(selection) {\n    this.selection = selection;\n    const elementSelection = (selection && selection.element) || {\n      indices: []\n    };\n    const selectedIndices = elementSelection.indices;\n    let insertion = elementSelection.insertion;\n    if (\n      !insertion &&\n      selectedIndices.length === 1 &&\n      this.notes[selectedIndices[0]] instanceof TextOnly\n    ) {\n      // if there is only one selection, and its a text only, it should display as an insertion cursor:\n      insertion = { afterElementIndex: selectedIndices[0] };\n    }\n    // update the selected elements so that they can be given a .selected class when rendered\n    for (let i = 0; i < this.notes.length; ++i) {\n      let element = this.notes[i];\n      element.selected = selectedIndices.includes(i);\n    }\n    (\n      this.startingClef.model || this.startingClef\n    ).selected = selectedIndices.includes(-1);\n    for (let i = 0; i < this.lines.length; ++i) {\n      this.lines[i].insertionCursor = null;\n    }\n    // update the insertion cursor, so it can be drawn on the correct system\n    this.insertionElement = null;\n    let insertionLine = null;\n    if (insertion) {\n      if (typeof insertion.chantLine === \"number\") {\n        insertionLine = this.lines[insertion.chantLine];\n        this.insertionElement = insertionLine.startingClef;\n        insertionLine.insertionCursor = new InsertionCursor();\n      } else if (typeof insertion.afterElementIndex === \"number\") {\n        this.insertionElement = this.notes[insertion.afterElementIndex];\n        if (!this.insertionElement) {\n          insertionLine = this.lines[0];\n          this.insertionElement = insertionLine.startingClef;\n        } else if (this.insertionElement.neume) {\n          this.insertionElement = this.insertionElement.neume;\n        }\n        if (!insertionLine) {\n          insertionLine = this.insertionElement.line || this.lines[this.lines.length - 1];\n        }\n        insertionLine.insertionCursor = new InsertionCursor();\n      }\n    }\n  }\n\n  updateNotations(ctxt) {\n    var i, j, mapping, notation;\n\n    // flatten all mappings into one array for N(0) access to notations\n    this.notations = [];\n    this.notes = [];\n    this.hasLyrics = false;\n    this.hasAboveLinesText = false;\n    this.hasTranslations = false;\n    const elementSelection = (this.selection && this.selection.element) || {\n      indices: []\n    };\n    const selectedIndices = elementSelection.indices;\n    let nonNoteElementCount = 0;\n\n    // find the starting clef...\n    // start with a default clef in case the notations don't provide one.\n    this.startingClef = null;\n\n    for (i = 0; i < this.mappings.length; i++) {\n      mapping = this.mappings[i];\n      for (j = 0; j < mapping.notations.length; j++) {\n        notation = mapping.notations[j];\n        notation.score = this;\n        notation.mapping = mapping;\n\n        if (!this.startingClef) {\n          if (notation.isNeume) {\n            this.startingClef = Clef.default();\n          } else if (notation.isClef) {\n            this.startingClef = notation;\n            continue;\n          }\n        }\n\n        notation.notationIndex = this.notations.push(notation) - 1;\n        if (!this.hasLyrics && notation.hasLyrics()) this.hasLyrics = true;\n        if (!this.hasAboveLinesText && notation.alText)\n          this.hasAboveLinesText = true;\n        if (!this.hasTranslations && notation.translationText)\n          this.hasTranslations = true;\n\n        // Update this.notes and find element indices:\n        let elements = notation.notes || [notation];\n        for (let element of elements) {\n          let elementIndex = (element.elementIndex =\n            this.notes.push(element) - 1);\n          if (element instanceof Note) {\n            element.noteIndex = elementIndex - nonNoteElementCount;\n          } else {\n            ++nonNoteElementCount;\n          }\n          \n          element.selected = selectedIndices.includes(elementIndex);\n        }\n      }\n    }\n\n    // if we've reached this far and we *still* don't have a clef, then there aren't even\n    // any neumes in the score. still, set the default clef just for good measure\n    if (!this.startingClef) this.startingClef = Clef.default();\n    this.startingClef.elementIndex = -1;\n\n    // update drop cap\n    if (this.useDropCap) this.recreateDropCap(ctxt);\n    else this.dropCap = null;\n\n    this.needsLayout = true;\n  }\n\n  recreateDropCap(ctxt) {\n    this.dropCap = null;\n\n    // find the first notation with lyrics to use\n    for (var i = 0; i < this.notations.length; i++) {\n      if (\n        this.notations[i].hasLyrics() &&\n        this.notations[i].lyrics[0] !== null &&\n        this.notations[i].lyrics[0].spans &&\n        this.notations[i].lyrics[0].spans.length\n      ) {\n        let notation = this.notations[i],\n          lyrics = notation.lyrics[0];\n        if (this.useDropCap) {\n          this.dropCap = lyrics.generateDropCap(ctxt);\n        } else {\n          lyrics.dropCap = null;\n          lyrics.generateSpansFromText(ctxt, lyrics.originalText);\n        }\n        notation.needsLayout = true;\n        return;\n      }\n    }\n  }\n\n  /**\n   * Shared layout initialization method for performLayout() and performLayoutAsync()\n   * @param  {ChantContext} ctxt\n   */\n  initializeLayout(ctxt) {\n    // setup the context\n    ctxt.activeClef = this.startingClef;\n    ctxt.notations = this.notations;\n    ctxt.currNotationIndex = 0;\n\n    if (this.dropCap) this.dropCap.recalculateMetrics(ctxt);\n\n    if (this.annotation) this.annotation.recalculateMetrics(ctxt);\n  }\n\n  // this is the the synchronous version of performLayout that\n  // process everything without yielding to any other workers/threads.\n  // good for server side processing or very small chant pieces.\n  performLayout(ctxt, force) {\n    if (!force && this.needsLayout === false) return; // nothing to do here!\n\n    ctxt.updateHyphenWidth();\n\n    this.initializeLayout(ctxt);\n\n    for (let i = 0; i < this.notations.length; i++) {\n      let notation = this.notations[i];\n      if (force || notation.needsLayout) {\n        ctxt.currNotationIndex = i;\n        notation.performLayout(ctxt);\n      }\n    }\n\n    this.needsLayout = false;\n  }\n\n  // for web applications, probably performLayoutAsync would be more\n  // apppropriate that the above performLayout, since it will process\n  // the notations without locking up the UI thread.\n  performLayoutAsync(ctxt, finishedCallback) {\n    if (this.needsLayout === false) {\n      if (finishedCallback) setTimeout(() => finishedCallback(), 0);\n\n      return; // nothing to do here!\n    }\n\n    if (ctxt.onFontLoaded) {\n      ctxt.onFontLoaded.push(() =>\n        this.performLayoutAsync(ctxt, finishedCallback)\n      );\n      return;\n    }\n\n    // check for sane value of hyphen width:\n    ctxt.updateHyphenWidth();\n    if (\n      !ctxt.hyphenWidth ||\n      ctxt.hyphenWidth / ctxt.textStyles.lyric.size > 0.6\n    ) {\n      setTimeout(() => {\n        this.performLayoutAsync(ctxt, finishedCallback);\n      }, 100);\n      return;\n    }\n\n    this.initializeLayout(ctxt);\n\n    setTimeout(() => this.layoutElementsAsync(ctxt, 0, finishedCallback), 0);\n  }\n\n  layoutElementsAsync(ctxt, index, finishedCallback) {\n    if (index >= this.notations.length) {\n      this.needsLayout = false;\n\n      if (finishedCallback) setTimeout(() => finishedCallback(), 0);\n\n      return;\n    }\n\n    if (index === 0) ctxt.activeClef = this.startingClef;\n\n    var timeout = new Date().getTime() + 50; // process for fifty milliseconds\n    do {\n      var notation = this.notations[index];\n      if (notation.needsLayout) {\n        ctxt.currNotationIndex = index;\n        notation.performLayout(ctxt);\n      }\n\n      index++;\n    } while (index < this.notations.length && new Date().getTime() < timeout);\n\n    // schedule the next block of processing\n    setTimeout(\n      () => this.layoutElementsAsync(ctxt, index, finishedCallback),\n      0\n    );\n  }\n\n  layoutChantLines(ctxt, width, finishedCallback) {\n    this.lines = [];\n\n    if (this.mergeAnnotationWithTextLeft && this.annotation && !this.dropCap) {\n      let annotation = this.annotation,\n        annotationSpans = annotation.annotations\n          ? annotation.annotations.map((annotation) => annotation.spans)\n          : [annotation.spans];\n      this.overrideTextLeft = new TextLeftRight(ctxt, \"\", \"textLeft\");\n      if (ctxt.mapAnnotationSpansToTextLeft) {\n        annotationSpans = annotationSpans.map(ctxt.mapAnnotationSpansToTextLeft);\n      }\n      this.overrideTextLeft.spans = this.mergeAnnotationWithTextLeft(\n        ...annotationSpans,\n        this.titles.textLeft && this.titles.textLeft.spans\n      );\n    } else {\n      this.overrideTextLeft = null;\n    }\n\n    var y = width > 0 ? this.titles.layoutTitles(ctxt, width) : 0;\n    var currIndex = 0;\n\n    ctxt.activeClef = this.startingClef;\n\n    var spaceBetweenSystems = ctxt.staffInterval * ctxt.spaceBetweenSystems;\n\n    do {\n      var line = new ChantLine(this);\n\n      line.buildFromChantNotationIndex(ctxt, currIndex, width);\n      currIndex = line.notationsStartIndex + line.numNotationsOnLine;\n      line.performLayout(ctxt);\n      line.elementIndex = this.lines.length;\n      this.lines.push(line);\n\n      line.bounds.y = -line.bounds.y + y;\n      y += line.bounds.height + spaceBetweenSystems;\n    } while (currIndex < this.notations.length);\n\n    var lastLine = this.lines[this.lines.length - 1];\n\n    this.bounds.x = 0;\n    this.bounds.y = 0;\n    this.bounds.width = lastLine.bounds.width;\n    this.bounds.height = y - spaceBetweenSystems;\n\n    this.pages = [this];\n\n    if (this.selection) {\n      this.updateSelection(this.selection);\n    }\n\n    if (finishedCallback) finishedCallback(this);\n  }\n\n  paginate(height) {\n    if (!height) return;\n    this.pages = [];\n    let pageHeightOffset = 0,\n      startLineIndex = 0;\n    for (let i = 1; i < this.lines.length; ++i) {\n      let line = this.lines[i];\n      let pageHeight = line.bounds.bottom() - pageHeightOffset - line.origin.y;\n\n      if (pageHeight > height) {\n        // this line will be the first on the new page\n        this.pages.push(this.copyLines(startLineIndex, i));\n        startLineIndex = i;\n        pageHeightOffset = line.bounds.y - line.origin.y;\n        line.bounds.y = line.origin.y;\n      } else {\n        // not a new page yet...update the bounds:\n        line.bounds.y -= pageHeightOffset;\n      }\n    }\n    this.pages.push(this.copyLines(startLineIndex, this.lines.length));\n  }\n\n  draw(ctxt, scale = 1) {\n    ctxt.setCanvasSize(this.bounds.width, this.bounds.height, scale);\n\n    var canvasCtxt = ctxt.canvasCtxt;\n\n    canvasCtxt.clearRect(0, 0, ctxt.canvas.width, ctxt.canvas.height);\n\n    canvasCtxt.translate(this.bounds.x, this.bounds.y);\n\n    if (this.titles) this.titles.draw(ctxt);\n\n    for (var i = 0; i < this.lines.length; i++) this.lines[i].draw(ctxt);\n\n    canvasCtxt.translate(-this.bounds.x, -this.bounds.y);\n  }\n\n  getSvgProps(ctxt, zoom) {\n    let width =\n        typeof zoom === \"number\"\n          ? zoom * this.bounds.width\n          : zoom\n          ? undefined\n          : this.bounds.width,\n      height = zoom ? undefined : this.bounds.height;\n\n    return {\n      xmlns: \"http://www.w3.org/2000/svg\",\n      version: \"1.1\",\n      class: \"Exsurge ChantScore\" + (ctxt.editable ? \" EditableChantScore\" : \"\"),\n      width,\n      height,\n      viewBox: [0, 0, this.bounds.width, this.bounds.height].join(\" \")\n    };\n  }\n\n  createSvgNode(ctxt) {\n    // create defs section\n    var node = [ctxt.defsNode.cloneNode(true)];\n    node[0].appendChild(ctxt.createStyleNode());\n\n    if (this.titles) node.push(this.titles.createSvgNode(ctxt));\n\n    for (var i = 0; i < this.lines.length; i++)\n      node.push(this.lines[i].createSvgNode(ctxt));\n\n    node = QuickSvg.createNode(\"g\", {}, node);\n\n    node = QuickSvg.createNode(\"svg\", this.getSvgProps(ctxt), node);\n\n    node.source = this;\n    this.svg = node;\n\n    return node;\n  }\n\n  createSvgTree(ctxt, zoom) {\n    // create defs section\n    var node = [\n      QuickSvg.createSvgTree(\n        \"defs\",\n        {},\n        ...ctxt.makeDefs.map((makeDef) => makeDef.makeSvgTree()),\n        ctxt.createStyleTree()\n      )\n    ];\n\n    if (this.titles) node.push(this.titles.createSvgTree(ctxt));\n\n    for (var i = 0; i < this.lines.length; i++)\n      node.push(this.lines[i].createSvgTree(ctxt));\n\n    node = QuickSvg.createSvgTree(\"g\", {}, ...node);\n    let svgProps = this.getSvgProps(ctxt, zoom);\n    svgProps.source = this;\n    node = QuickSvg.createSvgTree(\"svg\", svgProps, node);\n\n    return node;\n  }\n\n  createSvg(ctxt) {\n    var fragment = \"\";\n\n    // create defs section\n    for (var def in ctxt.defs)\n      if (ctxt.defs.hasOwnProperty(def)) fragment += ctxt.defs[def];\n    fragment += ctxt.createStyle();\n\n    fragment = QuickSvg.createFragment(\"defs\", {}, fragment);\n\n    if (this.titles) fragment += this.titles.createSvgFragment(ctxt);\n\n    for (var i = 0; i < this.lines.length; i++)\n      fragment += this.lines[i].createSvgFragment(ctxt);\n\n    fragment = QuickSvg.createFragment(\"g\", {}, fragment);\n\n    fragment = QuickSvg.createFragment(\"svg\", this.getSvgProps(ctxt), fragment);\n\n    return fragment;\n  }\n\n  createSvgNodeForEachLine(ctxt) {\n    var node = [];\n\n    var top = 0;\n    for (var i = 0; i < this.lines.length; i++) {\n      var lineFragment = [\n        ctxt.defsNode.cloneNode(true),\n        this.lines[i].createSvgNode(ctxt, top)\n      ];\n      lineFragment[0].appendChild(ctxt.createStyleNode());\n      var height = this.lines[i].bounds.height + ctxt.staffInterval * 1.5;\n      lineFragment = QuickSvg.createNode(\"g\", {}, lineFragment);\n      lineFragment = QuickSvg.createNode(\n        \"svg\",\n        {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          version: \"1.1\",\n          class: \"Exsurge ChantScore\",\n          width: this.bounds.width,\n          height: height,\n          viewBox: [0, 0, this.bounds.width, height].join(\" \")\n        },\n        lineFragment\n      );\n      node.push(lineFragment);\n      top += height;\n    }\n    return node;\n  }\n\n  createSvgForEachLine(ctxt) {\n    var fragment = \"\",\n      fragmentDefs = \"\";\n\n    // create defs section\n    for (var def in ctxt.defs)\n      if (ctxt.defs.hasOwnProperty(def)) fragmentDefs += ctxt.defs[def];\n    fragmentDefs += ctxt.createStyle();\n\n    fragmentDefs = QuickSvg.createFragment(\"defs\", {}, fragmentDefs);\n    var top = 0;\n    for (var i = 0; i < this.lines.length; i++) {\n      var lineFragment =\n        fragmentDefs + this.lines[i].createSvgFragment(ctxt, top);\n      var height = this.lines[i].bounds.height + ctxt.staffInterval * 1.5;\n      lineFragment = QuickSvg.createFragment(\"g\", {}, lineFragment);\n      lineFragment = QuickSvg.createFragment(\n        \"svg\",\n        {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          version: \"1.1\",\n          \"xmlns:xlink\": \"http://www.w3.org/1999/xlink\",\n          class: \"Exsurge ChantScore\",\n          width: this.bounds.width,\n          height: height\n        },\n        lineFragment\n      );\n      fragment += lineFragment;\n      top += height;\n    }\n    return fragment;\n  }\n\n  unserializeFromJson(data, ctxt) {\n    this.autoColoring = data[\"auto-coloring\"];\n\n    if (data.annotation !== null && data.annotation !== \"\") {\n      // create the annotation\n      this.annotation = new Annotation(ctxt, data.annotation);\n    } else this.annotation = null;\n\n    var createDropCap = data[\"drop-cap\"] === \"auto\" ? true : false;\n\n    Gabc.parseChantNotations(data.notations, this, createDropCap);\n  }\n\n  serializeToJson() {\n    var data = {};\n\n    data[\"type\"] = \"score\";\n    data[\"auto-coloring\"] = true;\n\n    if (this.annotation !== null)\n      data.annotation = this.annotation.unsanitizedText;\n    else data.annotation = \"\";\n\n    return data;\n  }\n}\n\nexport class ChantDocument {\n  constructor() {\n    var defaults = {\n      layout: {\n        units: \"mm\",\n        \"default-font\": {\n          \"font-family\": \"Crimson\",\n          \"font-size\": 14\n        },\n        page: {\n          width: 8.5,\n          height: 11,\n          \"margin-left\": 0,\n          \"margin-top\": 0,\n          \"margin-right\": 0,\n          \"margin-bottom\": 0\n        }\n      },\n      scores: []\n    };\n\n    // default layout\n    this.copyLayout(this, defaults);\n\n    this.scores = defaults.scores;\n  }\n\n  copyLayout(to, from) {\n    to.layout = {\n      units: from.layout.units,\n      \"default-font\": {\n        \"font-family\": from.layout[\"default-font\"][\"font-family\"],\n        \"font-size\": from.layout[\"default-font\"][\"font-size\"]\n      },\n      page: {\n        width: from.layout.page.width,\n        height: from.layout.page.height,\n        \"margin-left\": from.layout.page[\"margin-left\"],\n        \"margin-top\": from.layout.page[\"margin-top\"],\n        \"margin-right\": from.layout.page[\"margin-right\"],\n        \"margin-bottom\": from.layout.page[\"margin-bottom\"]\n      }\n    };\n  }\n\n  unserializeFromJson(data) {\n    this.copyLayout(this, data);\n\n    this.scores = [];\n\n    // read in the scores\n    for (var i = 0; i < data.scores.length; i++) {\n      var score = new ChantScore();\n\n      score.unserializeFromJson(data.scores[i]);\n      this.scores.push(score);\n    }\n  }\n\n  serializeToJson() {\n    var data = {};\n\n    this.copyLayout(data, this);\n\n    data.scores = [];\n\n    // save scores...\n    for (var i = 0; i < this.scores.length; i++)\n      data.scores.push(this.scores[i].serializeToJson());\n\n    return data;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Exsurge.Chant.js","//\n// Author(s):\n// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n//\n// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\nimport { ChantLineBreak, NoteShape, TextOnly } from \"./Exsurge.Chant.js\";\nimport {\n  BraceAttachment, BracePoint, BraceShape, HorizontalEpisemaAlignment\n} from \"./Exsurge.Chant.Markings.js\";\nimport {\n  Custos,\n  DoubleBar,\n  FullBar\n} from \"./Exsurge.Chant.Signs.js\";\nimport { Point, Rect } from \"./Exsurge.Core.js\";\nimport {\n  ChantLayoutElement, CurlyBraceVisualizer, GlyphCode, Lyric,\n  LyricArray,\n  LyricType, MarkingPositionHint, QuickSvg, RoundBraceVisualizer\n} from \"./Exsurge.Drawing.js\";\nimport { Glyphs } from \"./Exsurge.Glyphs.js\";\n\n// a chant line represents one staff line on the page. ChantLines are created by the score\n// and laid out by the page\nexport class ChantLine extends ChantLayoutElement {\n  constructor(score) {\n    super();\n\n    this.score = score;\n\n    this.notationsStartIndex = 0;\n    this.numNotationsOnLine = 0;\n    this.notationBounds = null; // Rect\n\n    this.staffLeft = 0;\n    this.staffRight = 0;\n\n    this.startingClef = null; // necessary for the layout process\n    this.custos = null;\n\n    this.justify = true;\n\n    // these are markings that exist at the chant line level rather than at the neume level.\n    this.ledgerLines = [];\n    this.braces = [];\n\n    this.nextLine = null;\n    this.previousLine = null; // for layout assistance\n\n    this.lyricLineHeight = 0; // height of each text line\n    this.lyricLineBaseline = 0; // offsets from the top of the text line to the baseline\n    this.numLyricLines = 0; // maximum count of lyrics on the same syllable\n\n    // fixme: make these configurable values from the score\n    this.spaceAfterNotations = 0; // the space between the notation bounds and the first text track\n    this.spaceBetweenTextTracks = 0; // spacing between each text track\n\n    this.lastLyrics = [];\n  }\n\n  performLayout(ctxt) {\n    // start off with a rectangle that holds at least the four staff lines\n    this.notationBounds = new Rect(\n      this.staffLeft,\n      -(ctxt.staffLineWeight / 2 + 3 + ctxt.minSpaceAboveStaff) *\n        ctxt.staffInterval,\n      this.staffRight - this.staffLeft,\n      (ctxt.staffLineWeight + 6 + ctxt.minSpaceAboveStaff) * ctxt.staffInterval\n    );\n\n    // run through all the elements of the line and calculate the bounds of the notations,\n    // as well as the bounds of each text track we will use\n    var i;\n    var notations = this.score.notations;\n    var lastNeumeIndex =\n      this.extraTextOnlyIndex === null\n        ? this.notationsStartIndex + this.numNotationsOnLine\n        : this.extraTextOnlyIndex;\n    var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n    var notation = null;\n\n    this.notationBounds.union(this.startingClef.bounds);\n\n    // reset the lyric line offsets before we [re]calculate them now\n    this.lyricLineHeight = ctxt.textStyles.lyric.size * 1.1;\n    this.lyricLineBaseline = 0;\n    this.numLyricLines = 0;\n\n    this.altLineHeight = 0;\n    this.altLineBaseline = 0;\n    this.numAltLines = 0;\n\n    this.translationLineHeight = ctxt.textStyles.translation.size * 1.1;\n    this.translationLineBaseline = 0;\n    this.numTranslationLines = 0;\n\n    for (i = this.notationsStartIndex; i < lastNeumeIndex; i++) {\n      notation = notations[i];\n\n      this.notationBounds.union(notation.bounds);\n\n      // keep track of lyric line offsets\n      if (notation.lyrics.length && notation.lyrics[0].text) {\n        // if (notation.lyrics[0].bounds.height > this.lyricLineHeight)\n        //   this.lyricLineHeight = notation.lyrics[0].bounds.height;\n        if (notation.lyrics[0].origin.y > this.lyricLineBaseline)\n          this.lyricLineBaseline = notation.lyrics[0].origin.y;\n        if (notation.lyrics.length > this.numLyricLines)\n          this.numLyricLines = notation.lyrics.length;\n      }\n\n      if (notation.alText && this.numAltLines < notation.alText.length) {\n        if (notation.alText[0].bounds.height > this.altLineHeight)\n          this.altLineHeight = notation.alText[0].bounds.height;\n        if (notation.alText[0].origin.y > this.altLineBaseline)\n          this.altLineBaseline = notation.alText[0].origin.y;\n        if (notation.alText.length > this.numAltLines)\n          this.numAltLines = notation.alText.length;\n      }\n\n      if (\n        notation.translationText &&\n        notation.translationText[0] &&\n        notation.translationText[0].text\n      ) {\n        // if (\n        //   notation.translationText[0].bounds.height > this.translationLineHeight\n        // )\n        //   this.translationLineHeight =\n        //     notation.translationText[0].bounds.height;\n        if (notation.translationText[0].origin.y > this.translationLineBaseline)\n          this.translationLineBaseline = notation.translationText[0].origin.y;\n        if (notation.translationText.length > this.numTranslationLines)\n          this.numTranslationLines = notation.translationText.length;\n      }\n    }\n\n    if (this.custos) this.notationBounds.union(this.custos.bounds);\n\n    // add any braces to the notationBounds as well\n    for (i = 0; i < this.braces.length; i++)\n      this.notationBounds.union(this.braces[i].bounds);\n\n    // finalize the lyrics placement\n    var notationBoundsOffset =\n      this.notationBounds.bottom() +\n      ctxt.minSpaceBelowStaff * ctxt.staffInterval;\n    this.lyricLineBaseline += notationBoundsOffset;\n    this.translationLineBaseline += notationBoundsOffset;\n    this.altLineBaseline +=\n      this.notationBounds.y - this.altLineHeight - ctxt.staffInterval * 0.5;\n\n    for (i = this.notationsStartIndex; i < lastNeumeIndex; i++) {\n      notation = notations[i];\n      var offset = 0;\n      for (var j = 0; j < notation.lyrics.length; j++) {\n        notation.lyrics[j].bounds.y = offset + this.lyricLineBaseline;\n        offset += this.lyricLineHeight;\n      }\n\n      if (notation.translationText) {\n        for (j = 0; j < notation.translationText.length; j++) {\n          notation.translationText[j].bounds.y =\n            offset + this.translationLineBaseline;\n          offset += this.translationLineHeight;\n        }\n      }\n\n      if (notation.alText) {\n        offset = 0;\n        for (j = 0; j < notation.alText.length; j++) {\n          notation.alText[j].bounds.y = offset + this.altLineBaseline;\n          offset -= ctxt.textStyles.al.size * 1.1;\n        }\n      }\n    }\n\n    this.extraTextOnlyHeight = 0;\n    // handle placement of extra TextOnly elements:\n    if (ctxt.useExtraTextOnly) {\n      var extraTextOnlyLyricIndex = this.extraTextOnlyLyricIndex;\n      if (this.extraTextOnlyIndex === null) {\n        // even if extraTextOnlyIndex is null, there might be extra lines on the last lyric if it is TextOnly:\n        let lastNotation = notations[lastNeumeIndex - 1] || {};\n        if (lastNotation.constructor === ChantLineBreak)\n          lastNotation = notations[lastNeumeIndex - 2];\n        if (\n          lastNotation.constructor === TextOnly &&\n          lastNotation.lyrics.length === 1 &&\n          lastNotation.lyrics[0].bounds.height > this.lyricLineHeight\n        ) {\n          this.extraTextOnlyHeight = this.lyricLineHeight;\n        }\n      } else {\n        let lastLyrics = null;\n        let xOffset = 0;\n        offset = (this.numLyricLines - 1) * this.lyricLineHeight;\n        offset += this.numTranslationLines * this.translationLineHeight;\n        let extraLines = 0;\n        for (i = this.extraTextOnlyIndex; i < lastIndex; i++) {\n          notation = notations[i];\n          if (!notation.lyrics[extraTextOnlyLyricIndex]) continue;\n          lastLyrics = notation.lyrics[extraTextOnlyLyricIndex];\n          if (lastLyrics.lineWidth) {\n            xOffset = this.staffRight - lastLyrics.lineWidth;\n            offset += this.lyricLineHeight;\n            extraLines++;\n          }\n          extraLines += lastLyrics.numLines - 1;\n          lastLyrics.bounds.y = offset + this.lyricLineBaseline;\n          notation.bounds.x += xOffset;\n        }\n        this.extraTextOnlyHeight = this.lyricLineHeight * extraLines;\n      }\n    }\n\n    if (this.startingClef.hasLyrics()) {\n      offset = 0;\n      for (j = 0; j < this.startingClef.lyrics.length; j++) {\n        this.startingClef.lyrics[j].bounds.y = offset + this.lyricLineBaseline;\n        offset += this.lyricLineHeight;\n      }\n    }\n\n    // dropCap and the annotations\n    if (this.notationsStartIndex === 0) {\n      if (this.score.annotation !== null) {\n        // annotations use dominant-baseline to align text to the top\n        this.score.annotation.bounds.x = this.staffLeft / 2;\n        this.score.annotation.bounds.y = -ctxt.staffInterval * 3;\n        if (this.score.dropCap !== null) {\n          var lowestPossibleAnnotationY =\n            this.lyricLineBaseline -\n            this.score.annotation.bounds.height -\n            ctxt.staffInterval * ctxt.textStyles.annotation.padding -\n            this.score.dropCap.origin.y;\n          // if the annotation would overlap with the drop cap, move the annotation higher.\n          // otherwise, center the annotation in the vertical space between the top of the drop cap and the top of the staff.\n          if (lowestPossibleAnnotationY < this.score.annotation.bounds.y) {\n            this.score.annotation.bounds.y = lowestPossibleAnnotationY;\n          } else {\n            this.score.annotation.bounds.y =\n              (this.score.annotation.bounds.y + lowestPossibleAnnotationY) / 2;\n          }\n          if (this.score.annotation.bounds.y < this.notationBounds.y) {\n            this.notationBounds.y = this.score.annotation.bounds.y;\n            this.notationBounds.height +=\n              this.notationBounds.y - this.score.annotation.bounds.y;\n          }\n        }\n        this.score.annotation.bounds.y += this.score.annotation.origin.y;\n      }\n\n      if (this.score.dropCap !== null) {\n        // drop caps and annotations are drawn from their center, so aligning them\n        // horizontally is as easy as this.staffLeft / 2\n        this.score.dropCap.bounds.x = this.staffLeft / 2;\n        this.score.dropCap.bounds.y =\n          this.lyricLineBaseline - this.score.dropCap.origin.y;\n        this.notationBounds.union(this.score.dropCap.bounds);\n        this.score.dropCap.bounds.y = this.lyricLineBaseline;\n      }\n    }\n\n    if (this.numLyricLines > 0) {\n      // add up the lyric line heights to get the total height of the chant line\n      var lyricAndTextRect = new Rect(\n        0,\n        notationBoundsOffset,\n        0,\n        this.lyricLineHeight * this.numLyricLines +\n          this.extraTextOnlyHeight +\n          this.translationLineHeight * this.numTranslationLines\n      );\n      this.notationBounds.union(lyricAndTextRect);\n    }\n    if (this.numAltLines > 0) {\n      var altLineTextRect = new Rect(\n        0,\n        this.notationBounds.y -\n          this.altLineHeight -\n          0.5 * ctxt.staffInterval -\n          ctxt.textStyles.al.size * 1.1 * (this.numAltLines - 1),\n        0,\n        ctxt.textStyles.al.size * 1.1 * this.numAltLines\n      );\n      this.notationBounds.union(altLineTextRect);\n    }\n    // Ensure that there is at least minSpaceBelowStaff below the lowest staff line:\n    this.notationBounds.union(\n      new Rect(\n        0,\n        0,\n        0,\n        (3 + ctxt.staffLineWeight / 2 + ctxt.minSpaceBelowStaff) *\n          ctxt.staffInterval\n      )\n    );\n    var totalHeight = this.notationBounds.height;\n\n    this.bounds.x = 0;\n    this.bounds.y = this.notationBounds.y;\n    this.bounds.width = this.notationBounds.right();\n    this.bounds.height = totalHeight;\n\n    // the origin of the chant line's coordinate space is at the center line of the left extremity of the staff\n    this.origin = new Point(this.staffLeft, -this.notationBounds.y);\n  }\n\n  // TODO: remove if not necsessary\n  layoutInsertionCursor(ctxt) {\n    if (this.insertionCursor) {\n      // we have either a Notation to draw the cursor after, or the ChantLine itself when the cursor is the first thing on the line\n      this.insertionCursor.performLayout(ctxt);\n      this.insertionCursor.bounds.x =\n        this.score.insertionElement.bounds.right() +\n        ((this.score.insertionElement.trailingSpace &&\n          this.score.insertionElement.calculatedTrailingSpace) ||\n          0) /\n          2 -\n        this.insertionCursor.origin.x;\n    }\n    return this.insertionCursor;\n  }\n\n  draw(ctxt) {\n    var canvasCtxt = ctxt.canvasCtxt;\n\n    canvasCtxt.translate(this.bounds.x, this.bounds.y);\n\n    // draw the staff lines\n    var i,\n      x1 = this.staffLeft,\n      x2 = this.staffRight,\n      y;\n    canvasCtxt.lineWidth = ctxt.staffLineWeight;\n    canvasCtxt.strokeStyle = ctxt.staffLineColor;\n\n    for (i = -3; i <= 3; i += 2) {\n      y = ctxt.staffInterval * i;\n\n      canvasCtxt.beginPath();\n      canvasCtxt.moveTo(x1, y);\n      canvasCtxt.lineTo(x2, y);\n      canvasCtxt.stroke();\n    }\n\n    if (this.layoutInsertionCursor(ctxt)) {\n      this.insertionCursor.draw(ctxt);\n    }\n\n    // draw the ledger lines\n    for (i = 0; i < this.ledgerLines.length; i++) {\n      var ledgerLine = this.ledgerLines[i];\n      y = ctxt.calculateHeightFromStaffPosition(ledgerLine.staffPosition);\n\n      canvasCtxt.beginPath();\n      canvasCtxt.moveTo(ledgerLine.x1, y);\n      canvasCtxt.lineTo(ledgerLine.x2, y);\n      canvasCtxt.stroke();\n    }\n\n    // fixme: draw the braces\n\n    // draw the dropCap and the annotations\n    if (this.notationsStartIndex === 0) {\n      if (this.score.dropCap !== null) this.score.dropCap.draw(ctxt);\n\n      if (\n        this.score.annotation !== null &&\n        (!this.score.mergeAnnotationWithTextLeft || this.score.dropCap)\n      )\n        // only draw it if there is a dropCap or there is no mergeAnnotationWithTextLeft\n        this.score.annotation.draw(ctxt);\n    }\n\n    // draw the notations\n    var notations = this.score.notations;\n    var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\n    for (i = this.notationsStartIndex; i < lastIndex; i++)\n      notations[i].draw(ctxt);\n\n    this.startingClef.draw(ctxt);\n\n    if (this.custos) this.custos.draw(ctxt);\n\n    canvasCtxt.translate(-this.bounds.x, -this.bounds.y);\n  }\n\n  getInnerNodes(\n    ctxt,\n    top = 0,\n    functionNames = { quickSvg: \"createNode\", elements: \"createSvgNode\" }\n  ) {\n    var inner = [];\n\n    // add the chant lines\n    var i,\n      x1 = this.staffLeft,\n      x2 = this.staffRight;\n\n    if (ctxt.editable) {\n      inner.push(\n        QuickSvg[functionNames.quickSvg](\"rect\", {\n          key: \"insertion\",\n          x: x1,\n          y: ctxt.staffInterval * -3,\n          width: x2 - x1,\n          height: ctxt.staffInterval * 6,\n          fill: \"none\"\n        })\n      );\n    }\n\n    // create the staff lines\n    for (i = -3; i <= 3; i += 2) {\n      inner.push(\n        QuickSvg[functionNames.quickSvg](\"line\", {\n          key: i,\n          x1: x1,\n          y1: ctxt.staffInterval * i,\n          x2: x2,\n          y2: ctxt.staffInterval * i,\n          stroke: ctxt.staffLineColor,\n          \"stroke-width\": ctxt.staffLineWeight,\n          class: \"staffLine\"\n        })\n      );\n    }\n\n    inner = [\n      QuickSvg[functionNames.quickSvg](\"g\", { class: \"staffLines\" }, inner)\n    ];\n\n    if (this.layoutInsertionCursor(ctxt)) {\n      inner.push(this.insertionCursor[functionNames.elements](ctxt));\n    }\n\n    // create the ledger lines\n    for (i = 0; i < this.ledgerLines.length; i++) {\n      var ledgerLine = this.ledgerLines[i];\n      var y = ctxt.calculateHeightFromStaffPosition(ledgerLine.staffPosition);\n\n      inner.push(\n        QuickSvg[functionNames.quickSvg](\"line\", {\n          x1: ledgerLine.x1,\n          y1: y,\n          x2: ledgerLine.x2,\n          y2: y,\n          stroke: ctxt.staffLineColor,\n          \"stroke-width\": ctxt.staffLineWeight,\n          class: \"ledgerLine\"\n        })\n      );\n    }\n\n    // add any braces\n    for (i = 0; i < this.braces.length; i++)\n      inner.push(this.braces[i][functionNames.elements](ctxt));\n\n    // dropCap and the annotations\n    if (this.notationsStartIndex === 0) {\n      if (this.score.dropCap !== null)\n        inner.push(this.score.dropCap[functionNames.elements](ctxt));\n\n      if (\n        this.score.annotation !== null &&\n        (!this.score.mergeAnnotationWithTextLeft || this.score.dropCap)\n      )\n        // only draw it if there is a dropCap or there is no mergeAnnotationWithTextLeft\n        inner = inner.concat(\n          this.score.annotation[functionNames.elements](ctxt)\n        );\n    }\n\n    inner.push(this.startingClef[functionNames.elements](ctxt));\n\n    var notations = this.score.notations;\n    var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\n    // add all of the notations\n    for (i = this.notationsStartIndex; i < lastIndex; i++)\n      inner.push(notations[i][functionNames.elements](ctxt));\n\n    if (this.custos) inner.push(this.custos[functionNames.elements](ctxt));\n    return inner;\n  }\n\n  createSvgNode(ctxt, top = 0) {\n    let inner = this.getInnerNodes(ctxt, top, {\n      quickSvg: \"createNode\",\n      elements: \"createSvgNode\"\n    });\n\n    return QuickSvg.createNode(\n      \"g\",\n      {\n        class: \"chantLine\",\n        transform:\n          \"translate(\" + this.bounds.x + \",\" + (this.bounds.y - top) + \")\",\n        \"element-index\": this.elementIndex,\n        source: this\n      },\n      inner\n    );\n  }\n\n  createSvgTree(ctxt, top = 0) {\n    let inner = this.getInnerNodes(ctxt, top, {\n      quickSvg: \"createSvgTree\",\n      elements: \"createSvgTree\"\n    });\n\n    return QuickSvg.createSvgTree(\n      \"g\",\n      {\n        class: \"chantLine\",\n        transform:\n          \"translate(\" + this.bounds.x + \",\" + (this.bounds.y - top) + \")\",\n        \"element-index\": this.elementIndex\n      },\n      ...inner\n    );\n  }\n\n  createSvgFragment(ctxt, top = 0) {\n    var inner = \"\";\n\n    // add the chant lines\n    var i,\n      x1 = this.staffLeft,\n      x2 = this.staffRight;\n\n    // create the staff lines\n    for (i = -3; i <= 3; i += 2) {\n      inner += QuickSvg.createFragment(\"line\", {\n        x1: x1,\n        y1: ctxt.staffInterval * i,\n        x2: x2,\n        y2: ctxt.staffInterval * i,\n        stroke: ctxt.staffLineColor,\n        \"stroke-width\": ctxt.staffLineWeight,\n        class: \"staffLine\"\n      });\n    }\n\n    inner = QuickSvg.createFragment(\"g\", { class: \"staffLines\" }, inner);\n\n    if (this.layoutInsertionCursor(ctxt)) {\n      inner += this.insertionCursor.createSvgFragment(ctxt);\n    }\n\n    // create the ledger lines\n    for (i = 0; i < this.ledgerLines.length; i++) {\n      var ledgerLine = this.ledgerLines[i];\n      var y = ctxt.calculateHeightFromStaffPosition(ledgerLine.staffPosition);\n\n      inner += QuickSvg.createFragment(\"line\", {\n        x1: ledgerLine.x1,\n        y1: y,\n        x2: ledgerLine.x2,\n        y2: y,\n        stroke: ctxt.staffLineColor,\n        \"stroke-width\": ctxt.staffLineWeight,\n        class: \"ledgerLine\"\n      });\n    }\n\n    // add any braces\n    for (i = 0; i < this.braces.length; i++)\n      inner += this.braces[i].createSvgFragment(ctxt);\n\n    // dropCap and the annotations\n    if (this.notationsStartIndex === 0) {\n      if (this.score.dropCap !== null)\n        inner += this.score.dropCap.createSvgFragment(ctxt);\n\n      if (\n        this.score.annotation !== null &&\n        (!this.score.mergeAnnotationWithTextLeft || this.score.dropCap)\n      )\n        // only draw it if there is a dropCap or there is no mergeAnnotationWithTextLeft\n        inner += this.score.annotation.createSvgFragment(ctxt);\n    }\n\n    inner += this.startingClef.createSvgFragment(ctxt);\n\n    var notations = this.score.notations;\n    var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\n    // add all of the notations\n    for (i = this.notationsStartIndex; i < lastIndex; i++)\n      inner += notations[i].createSvgFragment(ctxt);\n\n    if (this.custos) inner += this.custos.createSvgFragment(ctxt);\n\n    return QuickSvg.createFragment(\n      \"g\",\n      {\n        class: \"chantLine\",\n        transform:\n          \"translate(\" + this.bounds.x + \",\" + (this.bounds.y - top) + \")\",\n        \"element-index\": this.elementIndex\n      },\n      inner\n    );\n  }\n\n  // code below based on code by: https://gist.github.com/alexhornbake\n  //\n  // optimized for braces that are only drawn horizontally.\n  // returns svg path string ready to insert into svg doc\n  generateCurlyBraceDrawable(ctxt, x1, x2, y, isAbove) {\n    var h;\n\n    if (isAbove) h = -ctxt.staffInterval / 2;\n    else h = ctxt.staffInterval / 2;\n\n    // and q factor, .5 is normal, higher q = more expressive bracket\n    var q = 0.6;\n\n    var len = x2 - x1;\n\n    //Calculate Control Points of path,\n    var qx1 = x1;\n    var qy1 = y + q * h;\n    var qx2 = x1 + 0.25 * len;\n    var qy2 = y + (1 - q) * h;\n    var tx1 = x1 + 0.5 * len;\n    var ty1 = y + h;\n    var qx3 = x2;\n    var qy3 = y + q * h;\n    var qx4 = x1 + 0.75 * len;\n    var qy4 = y + (1 - q) * h;\n    var d =\n      \"M \" +\n      x1 +\n      \" \" +\n      y +\n      \" Q \" +\n      qx1 +\n      \" \" +\n      qy1 +\n      \" \" +\n      qx2 +\n      \" \" +\n      qy2 +\n      \" T \" +\n      tx1 +\n      \" \" +\n      ty1 +\n      \" M \" +\n      x2 +\n      \" \" +\n      y +\n      \" Q \" +\n      qx3 +\n      \" \" +\n      qy3 +\n      \" \" +\n      qx4 +\n      \" \" +\n      qy4 +\n      \" T \" +\n      tx1 +\n      \" \" +\n      ty1;\n\n    return QuickSvg.createFragment(\"path\", {\n      d: d,\n      stroke: ctxt.neumeLineColor,\n      \"stroke-width\": ctxt.neumeLineWeight + \"px\",\n      fill: \"none\"\n    });\n  }\n\n  buildFromChantNotationIndex(ctxt, newElementStart, width) {\n    // todo: reset / clear the children we have in case they have data\n    var notations = this.score.notations,\n      beginningLyrics = null,\n      prev = null,\n      prevNeume = null,\n      prevLyrics = [];\n    var condensableSpaces = [];\n    this.notationsStartIndex = newElementStart;\n    this.numNotationsOnLine = 0;\n\n    this.staffLeft = 0;\n    this.paddingLeft = 0;\n\n    this.extraTextOnlyIndex = null;\n    this.extraTextOnlyLyricIndex = 0;\n\n    if (width > 0) this.staffRight = width;\n    else this.staffRight = Infinity; // no limit to staff size\n\n    // If this is the first chant line, then we have to make room for a\n    // drop cap and/or annotation, if present\n    if (this.notationsStartIndex === 0) {\n      var padding = 0;\n\n      if (this.score.dropCap !== null)\n        padding =\n          this.score.dropCap.bounds.width + this.score.dropCap.padding * 2;\n\n      if (\n        this.score.annotation !== null &&\n        (!this.score.mergeAnnotationWithTextLeft || this.score.dropCap)\n      )\n        padding = Math.max(\n          padding,\n          this.score.annotation.bounds.width + this.score.annotation.padding * 2\n        );\n\n      this.staffLeft += padding;\n      if (this.score.dropCap !== null)\n        this.paddingLeft = (padding - this.score.dropCap.bounds.width) / 2;\n    } else {\n      prev = notations[newElementStart - 1];\n      if (\n        prev.constructor === DoubleBar &&\n        prev.hasLyrics() &&\n        (prev.lyrics.length > 1 || !prev.lyrics[0].text.match(/^(i\\.?)+j\\.?/))\n      ) {\n        beginningLyrics = prev.lyrics.map(function(lyric) {\n          var newLyric = new Lyric(\n            ctxt,\n            lyric.originalText,\n            lyric.lyricType,\n            lyric.notation,\n            lyric.notations,\n            lyric.sourceIndex\n          );\n          newLyric.elidesToNext = lyric.elidesToNext;\n          // Hide the original lyric by setting its bounds.y to an extremely high number.\n          // If the chant is re-laid out, this value will be recalculated so that it won't stay hidden.\n          lyric.bounds.y = Number.MAX_SAFE_INTEGER;\n          return newLyric;\n        });\n        var minX = beginningLyrics\n          .map(function(l) {\n            return l.bounds.x;\n          })\n          .reduce(function(a, b) {\n            return a < b ? a : b;\n          });\n        beginningLyrics.forEach(function(l) {\n          l.bounds.x -= minX;\n        });\n      }\n    }\n\n    // set up the clef...\n    // if the first notation on the line is a starting clef, then we treat it a little differently...\n    // the clef becomes this line's starting clef and we skip over the clef in the notations array\n    if (notations.length && notations[newElementStart].isClef) {\n      ctxt.activeClef = notations[newElementStart];\n      newElementStart++;\n      this.notationsStartIndex++;\n    }\n\n    // make a copy for this line to use at the beginning\n    this.startingClef = ctxt.activeClef.clone();\n    this.startingClef.performLayout(ctxt);\n    this.startingClef.bounds.x = this.staffLeft;\n\n    var curr = this.startingClef;\n\n    if (beginningLyrics) {\n      LyricArray.setNotation(beginningLyrics, curr);\n    }\n\n    // estimate how much space we have available to us\n    var rightNotationBoundary =\n      this.staffRight - Glyphs.CustosLong.bounds.width * ctxt.glyphScaling; // possible custos on the line\n    var lastTranslationTextWithEndNeume = null;\n\n    // iterate through the notations, fittng what we can on this line\n    var i,\n      j,\n      lastNotationIndex = notations.length - 1;\n\n    if (curr.hasLyrics()) LyricArray.mergeIn(this.lastLyrics, curr.lyrics);\n\n    // if we already have a start brace on the context, we must be continuing it from the previous system.\n    if (ctxt.lastStartBrace && !ctxt.lastStartBrace.note) {\n      ctxt.lastStartBrace.note = this.startingClef;\n    }\n    var lastLyricsBeforeTextOnly;\n    var textOnlyStartIndex;\n\n    for (i = newElementStart; i <= lastNotationIndex; i++) {\n      prev = curr;\n      if (curr.constructor !== TextOnly) prevNeume = curr;\n\n      curr = notations[i];\n\n      var actualRightBoundary;\n      if (\n        i === lastNotationIndex ||\n        curr.constructor === Custos ||\n        (prev.constructor === Custos && curr.isDivider) ||\n        (curr.constructor === ChantLineBreak &&\n          prevNeume.constructor === Custos)\n      ) {\n        // on the last notation of the score, we don't need a custos or trailing space, so we use staffRight as the\n        // right boundary.\n        // Also, if the current notation is a divider and the previous was a custos, we don't need extra space\n        // because if the following notation won't fit, we can switch the order and use the custos as the end-of-the-line custos\n        // Ditto in the case of the current element being a chant line break and the previous neume a custos, because that custos will become our end-of-line custos\n        actualRightBoundary = this.staffRight;\n      } else if (i === lastNotationIndex - 1) {\n        // on the penultimate notation, make sure there is at least enough room for whichever takes up less space,\n        // between the final notation and a custos:\n        actualRightBoundary = Math.max(\n          rightNotationBoundary,\n          this.staffRight - notations[lastNotationIndex].bounds.width\n        );\n      } else {\n        // Otherwise, we use rightNotationBoundary, which leaves room for a custos...\n        actualRightBoundary = rightNotationBoundary;\n      }\n\n      // First check if we're already beyond the rightNotationBoundary (due to condensing that hasn't yet happened) and have a good element to end with\n      // but if we have 2 or fewer elements, or if the current element is a line break or a custos, we'll go ahead and try for them anyway.\n      var forceBreak =\n        !curr.isDivider &&\n        curr.constructor !== ChantLineBreak &&\n        curr.constructor !== Custos &&\n        !(\n          curr.constructor === TextOnly &&\n          curr.hasLyrics() &&\n          /^(?:[*†]|i+j\\.?)$/.test(curr.lyrics[0].text)\n        ) &&\n        lastNotationIndex - i > 1 &&\n        !prevNeume.keepWithNext &&\n        prevNeume.bounds.right() >= rightNotationBoundary;\n\n      // also force a break if we've run into extra TextOnly elements, but the current notation is not a TextOnly and has lyrics\n      forceBreak =\n        forceBreak ||\n        (this.extraTextOnlyIndex !== null &&\n          curr.constructor !== TextOnly &&\n          curr.constructor !== ChantLineBreak &&\n          curr.constructor !== Custos &&\n          curr.hasLyrics());\n\n      if (curr instanceof TextOnly && prev === prevNeume) {\n        lastLyricsBeforeTextOnly = this.lastLyrics.slice();\n        textOnlyStartIndex = i;\n      }\n      if (\n        curr instanceof TextOnly &&\n        notations[textOnlyStartIndex] &&\n        !notations[textOnlyStartIndex].hasLyrics()\n      ) {\n        // we want textOnlyStartIndex to be the first TextOnly that actually has lyrics,\n        // so if the current \"textOnlyStart\" element does not have lyrics, and we have another textOnly\n        // that does have lyrics, we will use it instead\n        textOnlyStartIndex = i;\n      }\n\n      if (curr.hasLyrics() && curr.lyrics[0].needsLayout) {\n        curr.lyrics[0].recalculateMetrics(ctxt);\n      }\n\n      // try to fit the curr element on this line.\n      // if it doesn't fit, we finish up here.\n      var fitsOnLine =\n        !forceBreak &&\n        this.positionNotationElement(\n          ctxt,\n          this.lastLyrics,\n          prevNeume,\n          curr,\n          actualRightBoundary,\n          this.extraTextOnlyIndex ? [] : condensableSpaces // no spaces are condensable once we are on extra text only lyrics\n        );\n      var candidateForExtraTextOnlyLine =\n        ctxt.useExtraTextOnly &&\n        curr.constructor === TextOnly &&\n        LyricArray.hasOnlyOneLyric(curr.lyrics) &&\n        (fitsOnLine === false || this.extraTextOnlyIndex !== null);\n      var extraTextOnlyLyricIndex;\n      if (candidateForExtraTextOnlyLine && this.extraTextOnlyIndex === null) {\n        // check to make sure there is enough text to put on the text only line:\n        extraTextOnlyLyricIndex = LyricArray.indexOfLyric(curr.lyrics);\n        if (textOnlyStartIndex === i) {\n          var currentLyric = notations[i].lyrics[extraTextOnlyLyricIndex].text;\n          if (currentLyric.length <= 1) {\n            var nextNotation = notations[i + 1];\n            candidateForExtraTextOnlyLine =\n              nextNotation &&\n              nextNotation.constructor === TextOnly &&\n              nextNotation.lyrics[extraTextOnlyLyricIndex] &&\n              nextNotation.lyrics[extraTextOnlyLyricIndex].text.length > 0;\n          }\n        }\n      }\n      if (candidateForExtraTextOnlyLine) {\n        // a special case for TextOnly elements that don't fit on the line: since they don't have neumes associated with them, we can place this\n        // and any additional TextOnly elements just below the current lyric lines, but we can only do this if the TextOnly elements have only one\n        // line of lyrics associated with them.\n        var firstOnLine;\n        extraTextOnlyLyricIndex = this.extraTextOnlyLyricIndex;\n        if (\n          this.extraTextOnlyIndex === null &&\n          notations[textOnlyStartIndex].lyrics.length\n        ) {\n          if (\n            textOnlyStartIndex === this.notationsStartIndex ||\n            !ctxt.startExtraTextOnlyFromFirst\n          ) {\n            textOnlyStartIndex = i;\n            let lastNotationWithLyrics = notations\n              .slice(this.notationsStartIndex, i)\n              .reverse()\n              .find(notation => notation.hasLyrics());\n            lastLyricsBeforeTextOnly =\n              (lastNotationWithLyrics &&\n                lastNotationWithLyrics.lyrics.slice()) ||\n              [];\n          }\n          // go back to the first in this string of consecutive TextOnly elements.\n          this.extraTextOnlyIndex = textOnlyStartIndex;\n          extraTextOnlyLyricIndex = this.extraTextOnlyLyricIndex = LyricArray.indexOfLyric(\n            curr.lyrics\n          );\n          this.lastLyricsBeforeTextOnly = lastLyricsBeforeTextOnly;\n          this.lastLyrics = [];\n          i = textOnlyStartIndex - 1;\n          this.numNotationsOnLine =\n            textOnlyStartIndex - this.notationsStartIndex;\n          continue;\n        }\n        delete curr.lyrics[extraTextOnlyLyricIndex].lineWidth;\n        if (!fitsOnLine || i === this.extraTextOnlyIndex) {\n          curr.bounds.x = curr.lyrics[extraTextOnlyLyricIndex].origin.x;\n          let lastLyricRight = ctxt.startExtraTextOnlyFromFirst\n            ? LyricArray.getRight(this.lastLyrics) +\n              (ctxt.minLyricWordSpacing || 0)\n            : 0;\n          curr.lyrics[extraTextOnlyLyricIndex].setMaxWidth(\n            ctxt,\n            this.staffRight,\n            this.staffRight - lastLyricRight\n          );\n          firstOnLine = curr;\n        }\n        if (firstOnLine)\n          firstOnLine.lyrics[extraTextOnlyLyricIndex].lineWidth = curr.lyrics[\n            extraTextOnlyLyricIndex\n          ].getRight();\n      } else if (fitsOnLine === false) {\n        const isTextOnlyBeforeDivider = (i) => {\n          const curr = notations[i];\n          if (curr.constructor !== TextOnly) return false;\n          const firstDivider = notations.slice(i + 1).findIndex(notation => notation.isDivider);\n          if (firstDivider < 0) return false;\n          return notations.slice(i + 1, i + 1 + firstDivider).every(notation => notation.constructor === TextOnly);\n        }\n        // first check for elements that cannot begin a system: dividers and custodes\n        while (\n          this.numNotationsOnLine > 1 &&\n          (curr.isDivider || curr.constructor === Custos || isTextOnlyBeforeDivider(i))\n        ) {\n          curr = notations[--i];\n          this.numNotationsOnLine--;\n          if (this.lastLyricsBeforeTextOnly && isTextOnlyBeforeDivider(i)) {\n            delete this.lastLyricsBeforeTextOnly;\n          }\n        }\n\n        if (lastTranslationTextWithEndNeume) {\n          // console.info(notations[i - 1], lastTranslationTextWithEndNeume);\n          // TODO?: need to go back to before the last translation text start:\n        }\n\n        // check if the prev elements want to be kept with this one\n        for (j = i - 1; j > this.notationsStartIndex; j--) {\n          var cne = notations[j];\n          curr = notations[j + 1];\n\n          // curr is the first notation on the next line\n          // cne is the last notation on this line\n\n          if (cne.firstWithNoWidth) {\n            this.numNotationsOnLine--;\n            continue;\n          }\n\n          // don't let a line break occur in the middle of a translation\n          if (lastTranslationTextWithEndNeume) {\n            this.numNotationsOnLine--;\n            if (cne === lastTranslationTextWithEndNeume) {\n              lastTranslationTextWithEndNeume = null;\n            }\n            continue;\n          }\n\n          // force any notations starting with a quilisma or inclinatum (diamond) to be kept with the previous notation:\n          if (\n            curr &&\n            curr.notes &&\n            (curr.notes[0].shape === NoteShape.Quilisma ||\n              curr.notes[0].shape === NoteShape.Inclinatum)\n          ) {\n            this.numNotationsOnLine--;\n            continue;\n          }\n\n          // if the line break is allowed (cne.allowLineBreakBeforeNext), keep this number of notations around so we can check during justification\n          // whether there would be too much space introduced between\n          if (cne.keepWithNext === true) {\n            if (cne.allowLineBreakBeforeNext && !this.maxNumNotationsOnLine)\n              this.maxNumNotationsOnLine = this.numNotationsOnLine;\n            this.numNotationsOnLine--;\n          } else break;\n        }\n        if (this.extraTextOnlyIndex && (this.notationsStartIndex + this.numNotationsOnLine) <= this.extraTextOnlyIndex) {\n          // we've cut back to before the extra text only index, so we have to remove it:\n          this.extraTextOnlyIndex = null;\n        }\n\n        // if for some reason not a single notation can fit on the line, we'd better put it on anyway, to avoid an infinite loop:\n        if (this.numNotationsOnLine === 0) this.numNotationsOnLine = 1;\n\n        // determine the neumes we can space apart, if we do end up justifying\n        curr = this.findNeumesToJustify(prevLyrics);\n\n        this.lastLyrics = prevLyrics;\n        if (this.maxNumNotationsOnLine) {\n          // Check whether we should squeeze some extra notations on the line to avoid too much space after justification:\n          // Check how much space we would have without the extra notations\n          var extraSpace = this.getWhitespaceOnRight(ctxt);\n          if (\n            extraSpace / this.toJustify.length >\n            ctxt.staffInterval * ctxt.maxExtraSpaceInStaffIntervals\n          ) {\n            LyricArray.mergeInArray(\n              prevLyrics,\n              notations.slice(\n                this.notationsStartIndex + this.numNotationsOnLine,\n                this.notationsStartIndex + this.maxNumNotationsOnLine\n              )\n            );\n            this.numNotationsOnLine = this.maxNumNotationsOnLine;\n            delete this.maxNumNotationsOnLine;\n          }\n        }\n\n        // if the next line begins with a fresh word, than there can be extra space between the last notation on this line and the custos:\n        let next = this.score.notations[\n          this.extraTextOnlyIndex === null\n            ? this.notationsStartIndex + this.numNotationsOnLine\n            : this.extraTextOnlyIndex\n        ];\n        if (\n          next &&\n          next.hasLyrics() &&\n          (next.lyrics[0].lyricType === LyricType.BeginningSyllable ||\n            next.lyrics[0].lyricType === LyricType.SingleSyllable)\n        ) {\n          this.toJustify.push(this.custos);\n        }\n\n        if (\n          j >= 1 &&\n          notations[j].isDivider &&\n          notations[j - 1].constructor === Custos\n        ) {\n          // reverse the order: put the divider first, and end the line with the custos.\n          prevLyrics = [];\n          for (i = j - 2; i >= this.notationsStartIndex; i--) {\n            if (notations[i].hasLyrics()) {\n              LyricArray.mergeIn(prevLyrics, notations[i].lyrics);\n              break;\n            }\n          }\n          // remove the custos and divider from the condensable spaces list, before adding the divider back, when repositioning it.\n          condensableSpaces.sum -= condensableSpaces.pop().condensable;\n          condensableSpaces.sum -= condensableSpaces.pop().condensable;\n          this.positionNotationElement(\n            ctxt,\n            prevLyrics,\n            notations[j - 2],\n            notations[j],\n            this.staffRight,\n            condensableSpaces\n          );\n          this.custos = notations[j - 1];\n          this.custos.bounds.x =\n            this.staffRight -\n            this.custos.bounds.width -\n            this.custos.leadingSpace;\n        }\n\n        // we are at the end of the line!\n        break;\n      }\n\n      if (curr.hasLyrics()) LyricArray.mergeIn(this.lastLyrics, curr.lyrics);\n\n      if (\n        lastTranslationTextWithEndNeume &&\n        curr === lastTranslationTextWithEndNeume.translationText[0].endNeume\n      ) {\n        lastTranslationTextWithEndNeume = null;\n      } else if (\n        curr.translationText &&\n        curr.translationText.length &&\n        curr.translationText[0].endNeume\n      ) {\n        lastTranslationTextWithEndNeume = curr;\n      }\n\n      curr.line = this;\n      this.numNotationsOnLine++;\n\n      if (curr.isClef) ctxt.activeClef = curr;\n\n      // line breaks are a special case indicating to stop processing here\n      if (curr.constructor === ChantLineBreak && width > 0) {\n        this.justify =\n          curr.justify ||\n          this.extraTextOnlyIndex !== null ||\n          this.getWhitespaceOnRight(ctxt) < 0;\n        if (this.justify) this.findNeumesToJustify(prevLyrics);\n        break;\n      }\n\n      if (curr.constructor === Custos) {\n        this.custos = curr;\n      } else if (curr.isNeume) {\n        this.custos = null;\n      }\n    }\n\n    var lastIndex = this.notationsStartIndex + this.numNotationsOnLine - 1;\n    var last = notations[lastIndex] || {};\n    while (\n      lastIndex > 0 &&\n      (last.constructor === ChantLineBreak ||\n        last.constructor === Custos ||\n        last.constructor === TextOnly)\n    ) {\n      last = notations[--lastIndex];\n    }\n    var isLastLine =\n      this.notationsStartIndex + this.numNotationsOnLine === notations.length;\n    if (\n      (this.justify && this.extraTextOnlyIndex !== null) ||\n      (width > 0 && isLastLine)\n    ) {\n      // this is the last chant line, or it has extra TextOnly elements at the end\n      if (!this.toJustify) this.findNeumesToJustify(prevLyrics);\n      this.justify =\n        (!isLastLine || last.isDivider) &&\n        this.getWhitespaceOnRight(ctxt) / (this.toJustify.length || 1) <=\n          ctxt.staffInterval * ctxt.maxExtraSpaceInStaffIntervals;\n    }\n\n    if (!this.custos) {\n      // create the automatic custos at the end of the line if there are neumes left in the notations\n      for (\n        i = this.notationsStartIndex + this.numNotationsOnLine;\n        i < notations.length;\n        i++\n      ) {\n        var notation = notations[i];\n\n        if (notation.isNeume) {\n          this.custos = new Custos(true);\n          ctxt.currNotationIndex = i - 1; // make sure the context knows where the custos is\n          this.custos.performLayout(ctxt);\n\n          if (this.justify) {\n            // Put the custos at the very end of the line\n            this.custos.bounds.x =\n              this.staffRight -\n              this.custos.bounds.width -\n              this.custos.leadingSpace;\n          } else {\n            this.custos.bounds.x =\n              prevNeume.bounds.right() + prevNeume.calculatedTrailingSpace;\n          }\n          // nothing more to see here...\n          break;\n        }\n      }\n    }\n\n    if (this.lastLyricsBeforeTextOnly) {\n      this.lastLyrics = this.lastLyricsBeforeTextOnly;\n      delete this.lastLyricsBeforeTextOnly;\n    }\n\n    // find the final lyric and mark it as connecting if needed.\n    if (width > 0) {\n      var whitespace = this.getWhitespaceOnRight();\n      var rightEdge = this.staffRight;\n      if (whitespace < 0) {\n        rightEdge -= whitespace;\n      }\n    }\n    i = 0;\n    while (this.lastLyrics && this.lastLyrics[i]) {\n      let lyrics = this.lastLyrics[i];\n      if (lyrics.allowsConnector()) {\n        lyrics.setNeedsConnector(true, 0);\n        if (width > 0 && ctxt.minLyricWordSpacing < ctxt.hyphenWidth) {\n          whitespace = rightEdge - lyrics.getRight();\n          // shrink the hyphen if we are already out of whitespace or if we would be if we used a regular hyphen:\n          if (whitespace < 0) {\n            var minHyphenWidth = Math.max(\n              ctxt.hyphenWidth + whitespace,\n              this.lastLyrics.length > 1\n                ? ctxt.intraNeumeSpacing\n                : ctxt.minLyricWordSpacing\n            );\n            // we might not need to shift the syllable, but we do want to shrink the hyphen...\n            lyrics.setConnectorWidth(minHyphenWidth);\n          }\n        }\n      }\n      ++i;\n    }\n\n    // if the provided width is less than zero, then set the width of the line\n    // based on the last notation\n    if (width <= 0) {\n      this.staffRight = notations[\n        this.notationsStartIndex + this.numNotationsOnLine - 1\n      ].bounds.right();\n      this.justify = false;\n    }\n\n    // Justify the line if we need to\n    this.justifyElements(ctxt, this.justify, condensableSpaces);\n\n    this.centerDividers();\n\n    this.finishLayout(ctxt);\n  }\n\n  centerDividers() {\n    var lastIndex =\n        this.extraTextOnlyIndex === null\n          ? this.notationsStartIndex + this.numNotationsOnLine\n          : this.extraTextOnlyIndex,\n      curr;\n    for (var i = this.notationsStartIndex; i < lastIndex; i++) {\n      curr = this.score.notations[i];\n\n      if (curr && curr.isDivider) {\n        var j = 1;\n        var prev = this.score.notations[i - 1];\n        var next =\n          i + 1 === lastIndex ? this.custos : this.score.notations[i + 1];\n        if (prev === next && next === this.custos) {\n          prev = this.score.notations[i - 2];\n          // force custos to right edge in this case, since it is a custos that exists\n          // regardless of line break, and would normally be before the double bar, but in this case it ends the line:\n          next.bounds.x = this.staffRight - next.bounds.width;\n        }\n        if (prev && next) {\n          //if (prev instanceof TextOnly || next instanceof TextOnly) continue;\n          var oldBoundsX = curr.bounds.x;\n          var barWidth = curr.bounds.width;\n          var leftPoint =\n              prev instanceof TextOnly && prev.hasLyrics()\n                ? prev.lyrics[0].getRight()\n                : prev.bounds.right(),\n            rightPoint =\n              next instanceof TextOnly && next.hasLyrics()\n                ? next.lyrics[0].getLeft()\n                : next.bounds.x;\n          if (prev instanceof TextOnly) {\n            let prev = this.score.notations.slice(this.notationsStartIndex, i).reverse().find(notation => !(notation instanceof TextOnly));\n            leftPoint = prev ? prev.bounds.right() : 0;\n          }\n          if (leftPoint) {\n            curr.bounds.x = (leftPoint + rightPoint - barWidth) / 2;\n          }\n          if (curr.hasLyrics()) {\n            var offset = oldBoundsX - curr.bounds.x;\n            for (j = curr.lyrics.length - 1; j >= 0; j--) {\n              curr.lyrics[j].bounds.x += offset;\n              curr.lyrics[j].needsLayout = true;\n            }\n          }\n        } else if (\n          i === lastIndex - 1 &&\n          this.justify &&\n          (curr.constructor === DoubleBar || curr.constructor === FullBar)\n        ) {\n          curr.bounds.x = this.staffRight - curr.bounds.width;\n        }\n      }\n    }\n  }\n\n  findNeumesToJustify(prevLyrics) {\n    this.toJustify = [];\n    var prev,\n      curr = null,\n      next = null,\n      nextOrCurr = null,\n      lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n    for (var i = this.notationsStartIndex; i < lastIndex; i++) {\n      prev = nextOrCurr;\n      curr = this.score.notations[i];\n      next = curr.isAccidental && this.score.notations[++i];\n      nextOrCurr = next || curr;\n      var hasLyrics = nextOrCurr.hasLyrics();\n\n      if (!curr || !prev) continue;\n\n      if (\n        this.extraTextOnlyIndex !== null &&\n        i >= this.extraTextOnlyIndex &&\n        curr.constructor === TextOnly\n      )\n        continue;\n\n      if (prev !== null) {\n        LyricArray.mergeIn(prevLyrics, prev.lyrics);\n        if (prev.keepWithNext === true) continue;\n      }\n\n      if (\n        !curr.isDivider &&\n        prevLyrics.length &&\n        prevLyrics[0].allowsConnector() &&\n        hasLyrics\n      )\n        continue;\n\n      if (nextOrCurr.constructor === ChantLineBreak) continue;\n\n      if (nextOrCurr === this.custos && !hasLyrics) continue;\n\n      if (i === 0 && this.score.useDropCap && hasLyrics) continue;\n\n      // otherwise, we can add space before this element\n      this.toJustify.push(curr);\n    }\n    if (nextOrCurr !== null) LyricArray.mergeIn(prevLyrics, nextOrCurr.lyrics);\n    return nextOrCurr;\n  }\n\n  getWhitespaceOnRight(ctxt) {\n    var notations = this.score.notations;\n    var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n    var last = notations[lastIndex - 1];\n    if (this.extraTextOnlyIndex !== null && last.constructor === TextOnly) {\n      lastIndex = this.extraTextOnlyIndex;\n      last = notations[lastIndex - 1];\n    }\n    var lastRightNeume = last\n      ? last.bounds.right() + last.calculatedTrailingSpace\n      : 0;\n    var lastLyrics = this.lastLyricsBeforeTextOnly || this.lastLyrics;\n    var lastRightLyric = lastLyrics.length\n      ? LyricArray.getRight(lastLyrics)\n      : 0;\n\n    if (this.custos) {\n      lastRightNeume += this.custos.bounds.width + this.custos.leadingSpace;\n      if (this.custos.hasLyrics()) {\n        lastRightLyric = LyricArray.getRight(this.custos.lyrics);\n      }\n    } else if (ctxt && lastIndex < notations.length) {\n      lastRightNeume += Glyphs.CustosLong.bounds.width * ctxt.glyphScaling;\n    }\n    return this.staffRight - Math.max(lastRightLyric, lastRightNeume);\n  }\n\n  justifyElements(ctxt, doJustify, condensableSpaces) {\n    var i;\n    var toJustify = this.toJustify || [];\n    var notations = this.score.notations;\n    var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\n    // if it wasn't an ideal line break, and the last note is further from the custos than it would have been from its next punctum,\n    // move the custos over.\n    // We do this first so that if it opens up any new whitespace, that gets accounted for when we do the justification\n    var lastNotation =\n      notations[this.notationsStartIndex + this.numNotationsOnLine - 1];\n    var extraSpaceBeforeCustos =\n      this.staffRight < Infinity &&\n      this.custos &&\n      lastNotation.keepWithNext &&\n      this.custos.bounds.x -\n        lastNotation.bounds.right() -\n        lastNotation.calculatedTrailingSpace;\n    if (extraSpaceBeforeCustos > 0) {\n      // first, shrink the hyphen(s) if applicable, to move the neumes closer to the custos:\n      i = 0;\n      while (this.lastLyrics && this.lastLyrics[i]) {\n        let lyrics = this.lastLyrics[i];\n        if (lyrics.allowsConnector()) {\n          var connectorWidth = lyrics.getConnectorWidth();\n          if (ctxt.minLyricWordSpacing < connectorWidth) {\n            var minHyphenWidth = Math.max(\n              connectorWidth - extraSpaceBeforeCustos,\n              this.lastLyrics.length > 1\n                ? ctxt.intraNeumeSpacing\n                : ctxt.minLyricWordSpacing\n            );\n            // we might not need to shift the syllable, but we do want to shrink the hyphen...\n            lyrics.setConnectorWidth(minHyphenWidth);\n          }\n        }\n        ++i;\n      }\n      this.custos.bounds.x =\n        lastNotation.bounds.right() + lastNotation.calculatedTrailingSpace;\n    }\n\n    // first step of justification is to determine how much space we have to use up\n    var extraSpace = this.getWhitespaceOnRight();\n\n    if (\n      Math.abs(extraSpace) < 0.5 ||\n      (extraSpace > 0 && ((doJustify && toJustify.length === 0) || !doJustify))\n    )\n      return;\n\n    this.condensableSpaces = condensableSpaces;\n\n    var curr, prev;\n    var offset = 0;\n    var increment = extraSpace / toJustify.length;\n    var multiplier = 0;\n    var toJustifyIndex = 0;\n    if (extraSpace < 0) {\n      toJustify = condensableSpaces.filter(s => s.condensable > 0);\n      multiplier = extraSpace / condensableSpaces.sum;\n      increment = 0;\n    }\n    var nextToJustify = toJustify[toJustifyIndex++];\n    var incrementOffsetAtNextChance = false;\n    for (i = this.notationsStartIndex; i < lastIndex; i++) {\n      prev = curr;\n      curr = notations[i];\n\n      if (\n        this.extraTextOnlyIndex !== null &&\n        i >= this.extraTextOnlyIndex &&\n        curr.constructor === TextOnly\n      ) {\n        continue;\n      }\n\n      if (!multiplier && curr === this.custos) {\n        if (curr.hasLyrics()) {\n          curr.bounds.x = Math.min(\n            curr.bounds.x +\n              (this.staffRight - LyricArray.getRight(curr.lyrics)),\n            this.staffRight - curr.bounds.width\n          );\n          offset += increment;\n        } else {\n          curr.bounds.x = Math.min(\n            curr.bounds.x + offset,\n            this.staffRight - curr.bounds.width\n          );\n        }\n        continue;\n      }\n\n      if (multiplier) {\n        if (nextToJustify && nextToJustify.notation === curr) {\n          offset += multiplier * nextToJustify.condensable;\n          nextToJustify = toJustify[toJustifyIndex++];\n        }\n      } else if (nextToJustify === curr) {\n        if (prev.hasNoWidth) {\n          incrementOffsetAtNextChance = true;\n        } else {\n          offset += increment;\n        }\n        nextToJustify = toJustify[toJustifyIndex++];\n      } else if (incrementOffsetAtNextChance && !prev.hasNoWidth) {\n        incrementOffsetAtNextChance = false;\n        offset += increment;\n      }\n\n      curr.bounds.x += offset;\n    }\n\n    if (extraSpaceBeforeCustos > 0) {\n      this.custos.bounds.x =\n        lastNotation.bounds.right() + lastNotation.calculatedTrailingSpace;\n    }\n  }\n\n  handleEndBrace(ctxt, note, i) {\n    var startBrace = ctxt.lastStartBrace;\n    if (!startBrace) return;\n    // calculate the y value of the brace by iterating over all notations\n    // under/over the brace.\n    var y;\n    var k = startBrace.notationIndex;\n    var notations = this.score.notations;\n    var dy = ctxt.intraNeumeSpacing / 2; // some safe space between brace and notes.\n    var startNote = startBrace.note;\n\n    if (startBrace.isAbove) {\n      y = Math.min(\n        ctxt.calculateHeightFromStaffPosition(4),\n        ...[startNote, note]\n          .concat(notations.slice(k, i + 1))\n          .map(n => n.bounds.y - dy)\n      );\n    } else {\n      y = Math.max(\n        ctxt.calculateHeightFromStaffPosition(-4),\n        ...[startNote, note]\n          .concat(notations.slice(k, i + 1))\n          .map(n => n.bounds.bottom() + dy)\n      );\n    }\n\n    var addAcuteAccent = false;\n\n    if (startBrace.shape === BraceShape.RoundBrace) {\n      this.braces.push(\n        new RoundBraceVisualizer(\n          ctxt,\n          startBrace.getAttachmentX(startNote),\n          note.braceEnd.getAttachmentX(note),\n          y,\n          startBrace.isAbove\n        )\n      );\n    } else {\n      if (startBrace.shape === BraceShape.AccentedCurlyBrace)\n        addAcuteAccent = true;\n\n      this.braces.push(\n        new CurlyBraceVisualizer(\n          ctxt,\n          startBrace.getAttachmentX(startNote),\n          note.braceEnd.getAttachmentX(note),\n          y,\n          startBrace.isAbove,\n          addAcuteAccent\n        )\n      );\n    }\n\n    delete ctxt.lastStartBrace;\n  }\n\n  finishLayout(ctxt) {\n    this.ledgerLines = []; // clear any existing ledger lines\n\n    var notations = this.score.notations;\n    var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\n    // an element needs to have a staffPosition property, as well as the standard\n    // bounds property. so it could be a note, or it could be a custos\n    // offsetX can be used to add to the position info for the element,\n    // useful in the case of notes.\n    var processElementForLedgerLine = (\n      element,\n      endElem = element,\n      staffPosition = element.staffPosition,\n      offsetX = element.neume ? element.neume.bounds.x : 0\n    ) => {\n      // do we need a ledger line for this note?\n\n      if (staffPosition >= 5 || staffPosition <= -5) {\n        var x1 = offsetX + element.bounds.x - ctxt.intraNeumeSpacing;\n        var x2 =\n          offsetX +\n          endElem.bounds.x +\n          endElem.bounds.width +\n          ctxt.intraNeumeSpacing;\n\n        // round the staffPosition to the nearest line\n        if (staffPosition > 0)\n          staffPosition = staffPosition - ((staffPosition - 1) % 2);\n        else staffPosition = staffPosition - ((staffPosition + 1) % 2);\n\n        // if we have a ledger line close by, then average out the distance between the two\n        var minLedgerSeparation = ctxt.staffInterval * ctxt.minLedgerSeparation;\n\n        if (\n          this.ledgerLines.length > 0 &&\n          this.ledgerLines[this.ledgerLines.length - 1].x2 +\n            minLedgerSeparation >=\n            x1\n        ) {\n          // average out the distance\n          var half =\n            (x1 - this.ledgerLines[this.ledgerLines.length - 1].x2) / 2;\n          this.ledgerLines[this.ledgerLines.length - 1].x2 += half;\n          x1 -= half;\n        }\n\n        // never let a ledger line extend past the staff width\n        if (x2 > this.staffRight) x2 = this.staffRight;\n\n        // finally, add the ledger line\n        this.ledgerLines.push({\n          x1: x1,\n          x2: x2,\n          staffPosition: staffPosition\n        });\n      }\n    };\n\n    var episemata = []; // keep track of episemata in case we can connect some\n    var startBrace = null;\n    var minY = Number.MAX_VALUE,\n      maxY = Number.MIN_VALUE; // for braces\n\n    var positionNonLyricText = (text, neume, rightX) => {\n      text.setMaxWidth(ctxt, this.staffRight);\n      //text.bounds.x = neume.hasLyrics()? Math.min(...neume.lyrics.map(l => l.bounds.x)) : 0;\n      text.bounds.x = 0;\n      if (rightX)\n        text.bounds.x = (text.bounds.x + rightX - text.bounds.width) / 2;\n      var beyondStaffRight =\n        neume.bounds.x + text.bounds.right() - this.staffRight;\n      if (beyondStaffRight > 0) {\n        text.bounds.x -= beyondStaffRight;\n      }\n      if (neume.bounds.x + text.bounds.x < 0) {\n        text.bounds.x = -neume.bounds.x;\n      }\n    };\n\n    // make a final pass over all of the notes to add any necessary\n    // ledger lines and to smooth out episemata\n    for (var i = this.notationsStartIndex; i < lastIndex; i++) {\n      var neume = notations[i];\n\n      minY = Math.min(minY, neume.bounds.y);\n      maxY = Math.max(maxY, neume.bounds.bottom());\n\n      if (neume.constructor === Custos) {\n        processElementForLedgerLine(neume);\n        continue;\n      }\n\n      // if the AboveLinesText would extend beyond the right edge of the staff, right align it instead\n      if (neume.alText) {\n        for (var j = 0; j < neume.alText.length; j++) {\n          positionNonLyricText(neume.alText[j], neume);\n        }\n      }\n\n      // set up horizontal position of translations\n      if (neume.translationText) {\n        for (j = 0; j < neume.translationText.length; j++) {\n          var text = neume.translationText[j];\n          if (text.endNeume) {\n            var rightX = text.endNeume.hasLyrics()\n              ? text.endNeume.bounds.x +\n                Math.max(...text.endNeume.lyrics.map(l => l.bounds.right()))\n              : text.endNeume.bounds.right();\n            rightX -= neume.bounds.x;\n            positionNonLyricText(text, neume, rightX);\n          } else {\n            positionNonLyricText(text, neume);\n          }\n        }\n      }\n\n      // if it's not a neume then just skip here\n      if (!neume.isNeume) continue;\n\n      for (j = 0; j < neume.ledgerLines.length; j++) {\n        var ll = neume.ledgerLines[j];\n        processElementForLedgerLine(ll.element, ll.endElem, ll.staffPosition);\n      }\n\n      for (j = 0; j < neume.notes.length; j++) {\n        var k,\n          note = neume.notes[j];\n\n        // blend episemata as we're able\n        if (note.episemata.length === 0) episemata = [];\n        for (k = 0; k < note.episemata.length; k++) {\n          var episema = note.episemata[k];\n\n          var spaceBetweenEpisemata = 0;\n\n          // calculate the distance between the last episemata and this one...\n          // lots of code for a simple: currEpisemata.left - prevEpisemata.right\n          if (episemata.length > 0)\n            spaceBetweenEpisemata =\n              neume.bounds.x +\n              episema.bounds.x -\n              (episemata[episemata.length - 1].note.neume.bounds.x +\n                episemata[episemata.length - 1].bounds.right());\n\n          // we try to blend the episema if we're able.\n          if (\n            episemata.length === 0 ||\n            episemata[episemata.length - 1].positionHint !==\n              episema.positionHint ||\n            episemata[episemata.length - 1].terminating === true ||\n            episemata[episemata.length - 1].alignment ===\n              HorizontalEpisemaAlignment.Left ||\n            episemata[episemata.length - 1].alignment ===\n              HorizontalEpisemaAlignment.Center ||\n            episema.alignment === HorizontalEpisemaAlignment.Right ||\n            episema.alignment === HorizontalEpisemaAlignment.Center ||\n            (spaceBetweenEpisemata > ctxt.intraNeumeSpacing * 2 &&\n              note.glyphVisualizer.glyphCode !== GlyphCode.None)\n          ) {\n            // start a new set of episemata to potentially blend\n            episemata = [episema];\n          } else {\n            // blend all previous with this one\n            var newY;\n\n            if (episema.positionHint === MarkingPositionHint.Below)\n              newY = Math.max(\n                episema.bounds.y,\n                episemata[episemata.length - 1].bounds.y\n              );\n            else\n              newY = Math.min(\n                episema.bounds.y,\n                episemata[episemata.length - 1].bounds.y\n              );\n\n            if (episema.bounds.y !== newY) episema.bounds.y = newY;\n            else {\n              for (var l = 0; l < episemata.length; l++)\n                episemata[l].bounds.y = newY;\n            }\n\n            // extend the last episema to meet the new one\n            var newWidth =\n              neume.bounds.x +\n              episema.bounds.x -\n              (episemata[episemata.length - 1].note.neume.bounds.x +\n                episemata[episemata.length - 1].bounds.x);\n            if (newWidth < 0) {\n              newWidth *= -1;\n              episemata[episemata.length - 1].bounds.x -= newWidth;\n            }\n            episemata[episemata.length - 1].bounds.width = newWidth;\n\n            episemata.push(episema);\n          }\n        }\n\n        if (note.braceEnd) this.handleEndBrace(ctxt, note, i);\n\n        if (note.braceStart) {\n          ctxt.lastStartBrace = startBrace = note.braceStart;\n          startBrace.notationIndex = i;\n        }\n      }\n    }\n\n    // if we still have an active brace, that means it spands two chant lines!\n    if (startBrace !== null) {\n      if (this.custos) {\n        // if the next end brace is on the first note following the line break, simply use it with the custos\n        // Do the same if there is only an accidental between\n        // otherwise, make a new end brace to work for this one, and a new start brace for the next line.\n        var nextNotation = notations[lastIndex];\n        var nextNote = nextNotation.notes && nextNotation.notes[0];\n        var nextNotationButOne = notations[lastIndex + 1];\n        var nextNoteButOne =\n          nextNotationButOne &&\n          nextNotationButOne.notes &&\n          nextNotationButOne.notes[0];\n        var braceEnd =\n          (nextNote && nextNote.braceEnd) ||\n          (nextNotation.isAccidental &&\n            nextNoteButOne &&\n            nextNoteButOne.braceEnd);\n        if (braceEnd) {\n          this.custos.braceEnd = braceEnd;\n          this.handleEndBrace(ctxt, this.custos, i);\n        } else {\n          this.braceStart = startBrace;\n          this.custos.braceEnd = new BracePoint(\n            this.custos,\n            startBrace.isAbove,\n            startBrace.shape,\n            BraceAttachment.Right\n          );\n          this.handleEndBrace(ctxt, this.custos, i - 1);\n          ctxt.lastStartBrace = new BracePoint(\n            null,\n            startBrace.isAbove,\n            startBrace.shape,\n            BraceAttachment.Left\n          );\n          ctxt.lastStartBrace.notationIndex = i;\n        }\n      }\n    }\n\n    // don't forget to also include the final custos, which may need a ledger line too\n    if (this.custos) processElementForLedgerLine(this.custos);\n  }\n\n  // this is where the real core of positioning neumes takes place\n  // returns true if positioning was able to fit the neume before rightNotationBoundary.\n  // returns false if cannot fit before given right margin.\n  // fixme: if this returns false, shouldn't we set the connectors on prev to be activated?!\n  positionNotationElement(\n    ctxt,\n    prevLyrics,\n    prev,\n    curr,\n    rightNotationBoundary,\n    condensableSpaces = []\n  ) {\n    if (!condensableSpaces.hasOwnProperty(\"sum\")) condensableSpaces.sum = 0;\n    var i,\n      space = { notation: curr },\n      fixedX = false;\n\n    // To begin we just place the current notation right after the previous,\n    // irrespective of lyrics.\n    // But if the previous neume was part of a polyphonic \"no width\" group and the current is not, or is of a separate group,\n    // we force it to have the same x as the previous group.\n    if (\n      (!curr.hasNoWidth || curr.firstWithNoWidth === curr) &&\n      prev.firstWithNoWidth\n    ) {\n      curr.bounds.x = prev.firstWithNoWidth.bounds.x;\n      fixedX = true;\n    } else {\n      curr.bounds.x = prev.bounds.right();\n    }\n\n    if (\n      (curr.constructor === TextOnly && this.extraTextOnlyIndex === null) ||\n      (!curr.hasLyrics() && prev.calculatedTrailingSpace < 0)\n    ) {\n      // We transfer over the trailing space from the previous neume if the current neume is text only,\n      // so that the text only neume has a better chance at not needing a connector.\n      curr.calculatedTrailingSpace = prev.calculatedTrailingSpace;\n      if (curr.hasLyrics())\n        curr.calculatedTrailingSpace -= curr.lyrics[0].bounds.width;\n      if (curr.constructor === TextOnly && curr.lyrics.length === 1) {\n        curr.lyrics[0].setMaxWidth(\n          ctxt,\n          this.staffRight,\n          this.staffRight -\n            LyricArray.getRight(prevLyrics) -\n            ctxt.minLyricWordSpacing\n        );\n      }\n    } else if (!fixedX) {\n      curr.bounds.x += prev.calculatedTrailingSpace;\n    }\n\n    if (\n      curr.hasLyrics() &&\n      !prev.isDivider &&\n      !prev.isAccidental &&\n      this.numNotationsOnLine > 0 &&\n      (curr.lyrics[0].lyricType === LyricType.SingleSyllable ||\n        curr.lyrics[0].lyricType === LyricType.BeginningSyllable)\n    ) {\n      curr.bounds.x += ctxt.intraNeumeSpacing * ctxt.interVerbalMultiplier;\n    }\n    if (curr.hasNoWidth || fixedX) {\n      space.total = space.condensable = 0;\n    } else if (\n      this.extraTextOnlyIndex !== null &&\n      curr.constructor === TextOnly\n    ) {\n      curr.bounds.x = 0;\n      space.total = space.condensable = 0;\n    } else {\n      space.total = curr.bounds.x - prev.bounds.right();\n      space.condensable = space.total * ctxt.condensingTolerance;\n    }\n\n    // if the previous notation has no lyrics, then we simply make sure the\n    // current notation with lyrics is in the bounds of the line\n    if (prevLyrics.length === 0) {\n      var maxRight = curr.bounds.right() + curr.calculatedTrailingSpace;\n\n      // if the lyric left is negative, then offset the neume appropriately\n      for (i = 0; i < curr.lyrics.length; i++) {\n        let currLyric = curr.lyrics[i];\n        // we hope for the best!\n        // but always use a connector if the lyric has original text that was all used up for the drop cap.\n        let needsConnector =\n          currLyric.allowsConnector() &&\n          currLyric.dropCap &&\n          currLyric.originalText &&\n          !currLyric.text;\n        currLyric.setNeedsConnector(needsConnector);\n        let minLeft = this.staffLeft - this.paddingLeft;\n\n        if (currLyric.getLeft() < minLeft)\n          curr.bounds.x -= currLyric.getLeft() - minLeft;\n\n        space.condensable = Math.min(\n          space.condensable,\n          currLyric.getLeft() - minLeft\n        );\n        maxRight = Math.max(maxRight, currLyric.getRight());\n      }\n\n      if (\n        maxRight >\n        rightNotationBoundary + condensableSpaces.sum + space.condensable\n      )\n        return false;\n      condensableSpaces.push(space);\n      condensableSpaces.sum += space.condensable;\n      return true;\n    } else {\n      if (curr.firstOfSyllable && prevLyrics.length && !curr.hasLyrics()) {\n        curr.bounds.x = Math.max(curr.bounds.x, prevLyrics[0].getRight());\n        space.total = curr.bounds.x - prev.bounds.right();\n        space.condensable = space.total * ctxt.condensingTolerance;\n      }\n    }\n\n    // if the curr notation has no lyrics, then simply check whether there is enough room\n    if (curr.hasLyrics() === false) {\n      if (\n        curr.bounds.right() + curr.calculatedTrailingSpace >\n        rightNotationBoundary + condensableSpaces.sum + space.condensable\n      )\n        return false;\n      condensableSpaces.push(space);\n      condensableSpaces.sum += space.condensable;\n      return true;\n    }\n\n    // if we have multiple lyrics on the current or the previous notation,\n    // we will have to run several passes over each set of lyrics:\n\n    // on the first pass, we will check the absolute left-most placement of the new syllables\n    // we will make additional passes until everything is stable\n    do {\n      var hasShifted = false;\n      var atLeastOneWithoutConnector = false;\n      for (i = 0; i < curr.lyrics.length; i++) {\n        if (!curr.lyrics[i].originalText) continue;\n        var prevLyricRight = 0;\n        let condensableSpacesSincePrevLyric = [];\n        let condensableSpaceSincePrevLyric = null;\n        if (i < prevLyrics.length && prevLyrics[i]) {\n          prevLyricRight = prevLyrics[i].getRight();\n          let notationI = condensableSpaces\n            .map(s => s.notation)\n            .lastIndexOf(prevLyrics[i].notation);\n          if (notationI >= 0) {\n            condensableSpacesSincePrevLyric = condensableSpaces.slice(\n              notationI + 1\n            );\n            condensableSpacesSincePrevLyric.sum = condensableSpacesSincePrevLyric\n              .map(s => s.condensable)\n              .reduce((a, b) => a + b, 0);\n          } else {\n            condensableSpacesSincePrevLyric.sum = 0;\n          }\n        }\n\n        curr.lyrics[i].setNeedsConnector(false); // we hope for the best!\n        var currLyricLeft = curr.lyrics[i].getLeft();\n        if (!prevLyrics[i] || prevLyrics[i].allowsConnector() === false) {\n          // No connector needed, but include space between words if necessary!\n          let extraSpace = currLyricLeft - prevLyricRight - ctxt.minLyricWordSpacing;\n          if (extraSpace < 0) {\n            // push the current element over a bit.\n            let shift =\n              prevLyricRight + ctxt.minLyricWordSpacing - currLyricLeft;\n            curr.bounds.x += shift;\n            condensableSpaceSincePrevLyric = 0;\n            hasShifted = shift > 0.5;\n          } else {\n            condensableSpaceSincePrevLyric = extraSpace;\n          }\n        } else {\n          // we may need a connector yet...\n          if (\n            prevLyricRight + 0.1 >\n            currLyricLeft -\n              condensableSpacesSincePrevLyric.sum -\n              space.condensable\n          ) {\n            // in this case, the lyric elements actually overlap.\n            // so nope, no connector needed. instead, we just place the lyrics together\n            // fixme: for better text layout, we could actually use the kerning values\n            // between the prev and curr lyric elements!\n            let shift = prevLyricRight - currLyricLeft;\n            if (shift < -0.1) {\n              // in this case, the spacing needs to be condensed in the neumes since the last lyric...\n              let multiplier =\n                shift /\n                (condensableSpacesSincePrevLyric.sum + space.condensable);\n              let offset = 0;\n              condensableSpacesSincePrevLyric.forEach(s => {\n                offset += multiplier * s.condensable;\n                s.notation.bounds.x += offset;\n              });\n            }\n            curr.bounds.x += shift;\n            condensableSpaceSincePrevLyric = 0;\n            atLeastOneWithoutConnector = true;\n            hasShifted = shift > 0.5;\n          } else {\n            // bummer, looks like we couldn't merge the syllables together. Better add a connector...\n            if (ctxt.minLyricWordSpacing < ctxt.hyphenWidth) {\n              var spaceBetweenSyls = currLyricLeft - prevLyricRight;\n              if (spaceBetweenSyls < ctxt.hyphenWidth) {\n                var minHyphenWidth =\n                  prevLyrics.length > 1\n                    ? ctxt.intraNeumeSpacing\n                    : ctxt.minLyricWordSpacing;\n                // we might not need to shift the syllable, but we do want to shrink the hyphen...\n                prevLyrics[i].setConnectorWidth(\n                  Math.max(minHyphenWidth, spaceBetweenSyls)\n                );\n              }\n            }\n            prevLyrics[i].setNeedsConnector(true);\n            prevLyricRight = prevLyrics[i].getRight();\n\n            if (prevLyricRight + 0.1 > currLyricLeft) {\n              let shift = prevLyricRight - currLyricLeft;\n              curr.bounds.x += shift;\n              condensableSpaceSincePrevLyric = 0;\n              hasShifted = shift > 0.5;\n            } else {\n              condensableSpaceSincePrevLyric = currLyricLeft - prevLyricRight;\n            }\n          }\n        }\n\n        if (condensableSpaceSincePrevLyric !== null) {\n          if (\n            condensableSpaceSincePrevLyric <\n            condensableSpacesSincePrevLyric.sum + space.condensable\n          ) {\n            // reduce condensable space so that lyrics retain at least the width of a space character between words:\n            let multiplier = condensableSpaceSincePrevLyric / (condensableSpacesSincePrevLyric.sum + space.condensable);\n            space.condensable *= multiplier;\n            if (condensableSpacesSincePrevLyric.sum) {\n              condensableSpacesSincePrevLyric.forEach(space => {\n                space.condensable *= multiplier;\n              });\n              condensableSpaces.sum = condensableSpaces\n                .map(s => s.condensable)\n                .reduce((a, b) => a + b, 0);\n            }\n          }\n        }\n      }\n    } while (\n      curr.lyrics.length > 1 &&\n      hasShifted &&\n      atLeastOneWithoutConnector\n    );\n\n    for (i = Math.min(curr.lyrics.length, prevLyrics.length) - 1; i >= 0; i--) {\n      let pLyrics = prevLyrics[i];\n      if (pLyrics.needsConnector && pLyrics.connectorWidth) {\n        currLyricLeft = curr.lyrics[i].getLeft();\n        prevLyricRight = pLyrics.getRight() - pLyrics.connectorWidth;\n        spaceBetweenSyls = currLyricLeft - prevLyricRight;\n        if (spaceBetweenSyls >= ctxt.hyphenWidth) spaceBetweenSyls = 0;\n        pLyrics.setConnectorWidth(spaceBetweenSyls);\n      }\n    }\n\n    if (\n      curr.bounds.right() + curr.calculatedTrailingSpace <\n        rightNotationBoundary + condensableSpaces.sum + space.condensable &&\n      LyricArray.getRight(curr.lyrics, true) <=\n        this.staffRight + condensableSpaces.sum + space.condensable\n    ) {\n      if (prev.isAccidental) {\n        // move the previous accidental up next to the current note:\n        let shift =\n          curr.bounds.x -\n          prev.bounds.width -\n          prev.calculatedTrailingSpace -\n          prev.bounds.x;\n        prev.bounds.x += shift;\n        if (Math.abs(shift) > 0.1) {\n          let lastCondensable = condensableSpaces[condensableSpaces.length - 1];\n          condensableSpaces.sum -= lastCondensable.condensable;\n          lastCondensable.condensable = 0;\n        }\n      }\n      condensableSpaces.push(space);\n      condensableSpaces.sum += space.condensable;\n      return true;\n    }\n\n    // if we made it this far, then the element won't fit on this line.\n    return false;\n  }\n\n  /**\n   * Find the notation closest to x without going past it\n   * @param {number} x\n   */\n  bisectNotationAtX(x, useMidpoint = true) {\n    let minIndex = -1,\n      maxIndex = Math.min(this.numNotationsOnLine, Infinity),\n      curIndex = minIndex + ((maxIndex - minIndex) >> 1),\n      notations = this.score.notations.slice(\n        this.notationsStartIndex,\n        this.notationsStartIndex + this.numNotationsOnLine\n      );\n\n    while (minIndex < curIndex) {\n      let notation = notations[curIndex];\n      let notationX = notation.bounds.x;\n      if (notationX > x) {\n        maxIndex = curIndex;\n      } else {\n        minIndex = curIndex;\n      }\n      curIndex = minIndex + ((maxIndex - minIndex) >> 1);\n    }\n    let notation = notations[curIndex];\n    if (\n      useMidpoint &&\n      notation &&\n      notation.bounds.width === 0 &&\n      curIndex + 1 < notations.length\n    ) {\n      let nextNotation = notations[curIndex + 1],\n        closenessToLeft = x - notation.bounds.x,\n        closenessToRight = nextNotation.bounds.x - x;\n      if (nextNotation.bounds.width === 0 && closenessToRight < closenessToLeft)\n        ++curIndex;\n    }\n    return notations[curIndex];\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Exsurge.Chant.ChantLine.js","//\n// Author(s):\n// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n//\n// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\nimport { NoteShape } from \"./Exsurge.Chant.js\";\nimport {\n  ChantLayoutElement,\n  GlyphCode,\n  GlyphVisualizer,\n  MarkingPositionHint,\n  QuickSvg\n} from \"./Exsurge.Drawing.js\";\n\nexport class Accent extends GlyphVisualizer {\n  constructor(ctxt, note, glyphCode = GlyphCode.AcuteAccent) {\n    super(ctxt, glyphCode);\n    this.note = note;\n    this.positionHint = MarkingPositionHint.Above;\n  }\n\n  performLayout(ctxt) {\n    this.bounds.x = this.note.bounds.x + this.bounds.width / 2; // center on the note itself\n\n    // this puts the acute accent either over the staff lines, or over the note if the\n    // note is above the staff lines\n    this.setStaffPosition(ctxt, Math.max(this.note.staffPosition + 1, 4));\n  }\n}\n\n// for positioning markings on notes\nexport var HorizontalEpisemaAlignment = {\n  Default: 0,\n  Left: 1,\n  Center: 2,\n  Right: 3\n};\n\n/*\n * HorizontalEpisema\n *\n * A horizontal episema marking is it's own visualizer (that is, it implements createSvgFragment)\n */\nexport class HorizontalEpisema extends ChantLayoutElement {\n  constructor(note) {\n    super();\n\n    this.note = note;\n\n    this.positionHint = MarkingPositionHint.Default;\n    this.terminating = false; // indicates if this episema should terminate itself or not\n    this.alignment = HorizontalEpisemaAlignment.Default;\n  }\n\n  performLayout(ctxt) {\n    // following logic helps to keep the episemata away from staff lines if they get too close\n\n    var y = 0,\n      step;\n    var minDistanceAway = ctxt.staffInterval * 0.25; // min distance from neume\n    var glyphCode = this.note.glyphVisualizer.glyphCode;\n    var ledgerLine = this.note.neume.ledgerLines[0] || {};\n    var punctumInclinatumShorten = false;\n\n    if (glyphCode === GlyphCode.PunctumInclinatum) {\n      let notes = this.note.neume.notes,\n        index = notes.indexOf(this.note),\n        prevNote = notes[index - 1];\n      if (\n        prevNote &&\n        prevNote.glyphVisualizer.glyphCode === GlyphCode.PunctumInclinatum &&\n        prevNote.staffPosition - this.note.staffPosition === 1\n      ) {\n        punctumInclinatumShorten = true;\n      }\n    }\n\n    if (this.positionHint === MarkingPositionHint.Below) {\n      y = this.note.bounds.bottom() + minDistanceAway; // the highest the line could be at\n      if (glyphCode === GlyphCode.None)\n        // correction for episema under the second note of a porrectus\n        y += ctxt.staffInterval / 2;\n      step = Math.ceil(y / ctxt.staffInterval);\n      // if there's enough space, center the episema between the punctum and the next staff line\n      if (step % 2 === 0) {\n        step = (step + 3 / 4 + (y - minDistanceAway) / ctxt.staffInterval) / 2;\n      } else {\n        // otherwise, find nearest acceptable third between staff lines (or staff line)\n        step = (Math.ceil((1.5 * y) / ctxt.staffInterval - 0.5) * 2 + 1) / 3;\n\n        // if it's an odd step, that means we're on a staff line,\n        // so we shift to between the staff line\n        if (Math.abs(step) % 2 === 1) {\n          if (Math.abs(step) < 4 || ledgerLine.staffPosition === -step) {\n            step += 2 / 3;\n          } else {\n            // no ledger line, but we don't want the episema to be at exactly the same height the ledger line would occupy:\n            step += 1 / 3;\n          }\n        }\n      }\n    } else {\n      y = this.note.bounds.y - minDistanceAway; // the lowest the line could be at\n      step = Math.floor(y / ctxt.staffInterval);\n      // if there's enough space, center the episema between the punctum and the next staff line\n      if (step % 2 === 0) {\n        step = (step - 3 / 4 + (y + minDistanceAway) / ctxt.staffInterval) / 2;\n      } else {\n        // otherwise, find nearest acceptable third between staff lines (or staff line)\n        step = (Math.floor((1.5 * y) / ctxt.staffInterval - 0.5) * 2 + 1) / 3;\n\n        // find nearest acceptable third between staff lines (or staff line)\n        if (Math.abs(step) % 2 === 1) {\n          // if it was a staff line, we need to adjust\n          if (Math.abs(step) < 4 || ledgerLine.staffPosition === -step) {\n            step -= 2 / 3;\n          } else {\n            // no ledger line, but we don't want the episema to be at exactly the same height the ledger line would occupy:\n            step -= 1 / 3;\n          }\n        }\n      }\n    }\n\n    y = step * ctxt.staffInterval;\n\n    var width = this.note.bounds.width;\n    var x = this.note.bounds.x;\n\n    // The porrectus requires special handling of the note width,\n    // otherwise the width is just that of the note itself\n    if (\n      glyphCode === GlyphCode.Porrectus1 ||\n      glyphCode === GlyphCode.Porrectus2 ||\n      glyphCode === GlyphCode.Porrectus3 ||\n      glyphCode === GlyphCode.Porrectus4\n    )\n      width = ctxt.staffInterval;\n    else if (glyphCode === GlyphCode.None) {\n      width = ctxt.staffInterval;\n      x -= width;\n    } else if (punctumInclinatumShorten) {\n      width *= 2 / 3;\n      x += 0.5 * width;\n    } else if (glyphCode === GlyphCode.PunctumInclinatumLiquescent) {\n      width *= 2 / 3;\n      x += 0.25 * width;\n    }\n\n    // also, the position hint can affect the x/width of the episema\n    if (this.alignment === HorizontalEpisemaAlignment.Left) {\n      width *= 0.8;\n    } else if (this.alignment === HorizontalEpisemaAlignment.Center) {\n      x += width * 0.1;\n      width *= 0.8;\n    } else if (this.alignment === HorizontalEpisemaAlignment.Right) {\n      x += width * 0.2;\n      width *= 0.8;\n    }\n\n    this.bounds.x = x;\n    this.bounds.y = y - ctxt.episemaLineWeight / 2;\n    this.bounds.width = width;\n    this.bounds.height = ctxt.episemaLineWeight;\n\n    this.origin.x = 0;\n    this.origin.y = 0;\n  }\n\n  draw(ctxt) {\n    var canvasCtxt = ctxt.canvasCtxt;\n\n    canvasCtxt.fillStyle = ctxt.neumeLineColor;\n\n    canvasCtxt.fillRect(\n      this.bounds.x,\n      this.bounds.y,\n      this.bounds.width,\n      this.bounds.height\n    );\n  }\n\n  getSvgProps(ctxt) {\n    return {\n      x: this.bounds.x,\n      y: this.bounds.y,\n      width: this.bounds.width,\n      height: this.bounds.height,\n      fill: ctxt.neumeLineColor,\n      class: \"horizontalEpisema\"\n    };\n  }\n\n  createSvgNode(ctxt) {\n    return QuickSvg.createNode(\"rect\", this.getSvgProps(ctxt));\n  }\n  createSvgTree(ctxt) {\n    return QuickSvg.createSvgTree(\"rect\", this.getSvgProps(ctxt));\n  }\n\n  createSvgFragment(ctxt) {\n    return QuickSvg.createFragment(\"rect\", this.getSvgProps(ctxt));\n  }\n}\n\n/*\n * Ictus\n */\nexport class Ictus extends GlyphVisualizer {\n  constructor(ctxt, note) {\n    super(ctxt, GlyphCode.VerticalEpisemaAbove);\n    this.note = note;\n    this.positionHint = MarkingPositionHint.Default;\n  }\n\n  performLayout(ctxt) {\n    var glyphCode = this.note.glyphVisualizer.glyphCode;\n    // we have to place the ictus further from the note in some cases to avoid a collision with an episema on the same note:\n    var positionHint = this.positionHint || MarkingPositionHint.Below;\n    var staffPosition =\n      this.note.staffPosition +\n      (positionHint === MarkingPositionHint.Above ? 1 : -1);\n    var collisionWithEpisema =\n      this.note.episemata.length > 0 &&\n      (this.note.episemata[0].positionHint || MarkingPositionHint.Above) ===\n        positionHint;\n    var horizontalOffset;\n    var verticalOffset = 1;\n    var shortOffset = -0.2;\n    var extraOffset = 0;\n    var collisionWithStaffLine =\n      staffPosition % 2 &&\n      (Math.abs(staffPosition) < 4 ||\n        (this.note.neume.ledgerLines[0] || {}).staffPosition === staffPosition);\n\n    // The porrectus requires special handling of the note width,\n    // otherwise the width is just that of the note itself\n    if (\n      glyphCode === GlyphCode.Porrectus1 ||\n      glyphCode === GlyphCode.Porrectus2 ||\n      glyphCode === GlyphCode.Porrectus3 ||\n      glyphCode === GlyphCode.Porrectus4\n    )\n      horizontalOffset = ctxt.staffInterval / 2;\n    else if (glyphCode === GlyphCode.None) {\n      horizontalOffset = -ctxt.staffInterval / 2;\n    } else {\n      horizontalOffset = this.note.bounds.width / 2;\n      if (\n        glyphCode === GlyphCode.PunctumInclinatum &&\n        !collisionWithStaffLine &&\n        !collisionWithEpisema\n      ) {\n        extraOffset = 0.3;\n      }\n    }\n\n    if (this.positionHint === MarkingPositionHint.Above) {\n      glyphCode = GlyphCode.VerticalEpisemaAbove;\n      verticalOffset *= -1;\n    } else {\n      glyphCode = GlyphCode.VerticalEpisemaBelow;\n    }\n    if (collisionWithEpisema) {\n      extraOffset = 0.4;\n    }\n    verticalOffset *=\n      ctxt.staffInterval *\n      (extraOffset + (collisionWithStaffLine ? 0.3 : shortOffset));\n\n    this.setGlyph(ctxt, glyphCode);\n    this.setStaffPosition(ctxt, staffPosition);\n\n    this.bounds.x = this.note.bounds.x + horizontalOffset - this.origin.x;\n    this.bounds.y += verticalOffset;\n  }\n}\n\n/*\n * Mora\n */\nexport class Mora extends GlyphVisualizer {\n  constructor(ctxt, note) {\n    super(ctxt, GlyphCode.Mora);\n    this.note = note;\n    this.positionHint = MarkingPositionHint.Default;\n    this.horizontalOffset = ctxt.staffInterval / 2 + this.origin.x;\n  }\n\n  performLayout(ctxt) {\n    this.setGlyph(ctxt, this.glyphCode);\n    this.horizontalOffset = ctxt.staffInterval / 2 + this.origin.x;\n    var staffPosition = this.note.staffPosition;\n\n    this.setStaffPosition(ctxt, staffPosition);\n\n    var verticalOffset = 0;\n    // First, we need to find the next note in the neume.\n    var noteIndex = this.note.neume.notes.indexOf(this.note);\n    var nextNote;\n    if (noteIndex >= 0) {\n      ++noteIndex;\n      if (this.note.neume.notes.length > noteIndex) {\n        nextNote = this.note.neume.notes[noteIndex];\n        if (\n          nextNote.morae &&\n          nextNote.morae.length &&\n          this.note.neume.notes.length === noteIndex + 1\n        ) {\n          // this note is the second to last in its neume, and the last note also has a mora\n          this.horizontalOffset +=\n            nextNote.bounds.right() - this.note.bounds.right();\n        } else if (nextNote.bounds.right() > this.note.bounds.right()) {\n          // center the dot over the following note.\n          this.horizontalOffset =\n            (nextNote.bounds.right() -\n              this.note.bounds.right() -\n              this.bounds.right()) /\n            2;\n        } else {\n          nextNote = null;\n        }\n      } else if (this.note.neume.notes.length === noteIndex) {\n        // this note is the last in its neume:\n        if (this.note.neume.trailingSpace === 0) {\n          // if this was the last note in its neume, we only care about the next note if there is no trailing space at the end of this neume.\n          var notationIndex = this.note.neume.score.notations.indexOf(\n            this.note.neume\n          );\n          if (notationIndex >= 0) {\n            var nextNotation = this.note.neume.score.notations[\n              notationIndex + 1\n            ];\n            if (nextNotation && nextNotation.notes) {\n              nextNote = nextNotation.notes[0];\n            }\n          }\n        } else if (this.note.shape !== NoteShape.Inclinatum) {\n          this.note.neume.calculatedTrailingSpace += this.origin.x;\n        }\n      }\n    }\n\n    if (this.positionHint === MarkingPositionHint.Above) {\n      if (staffPosition % 2 === 0) verticalOffset -= ctxt.staffInterval * 1.75;\n      else verticalOffset -= ctxt.staffInterval * 0.75;\n    } else if (this.positionHint === MarkingPositionHint.Below) {\n      if (staffPosition % 2 === 0) verticalOffset += ctxt.staffInterval * 1.75;\n      else verticalOffset += ctxt.staffInterval * 0.75;\n    } else {\n      if (staffPosition % 2 === 0) {\n        // if the note is in a space and followed by a note on the line below, we often want to move the mora dot up slightly so that it is centered\n        // between the top of the note's space and the top of the following note.\n        if (nextNote && nextNote.staffPosition === staffPosition - 1) {\n          verticalOffset -= ctxt.staffInterval * 0.25;\n        }\n      } else {\n        verticalOffset -= ctxt.staffInterval * 0.75;\n      }\n    }\n    this.bounds.x = this.horizontalOffset + this.note.bounds.right();\n    this.bounds.y += verticalOffset;\n  }\n}\n\n// indicates the shape of the brace\nexport var BraceShape = {\n  RoundBrace: 0,\n  CurlyBrace: 1,\n  AccentedCurlyBrace: 2\n};\n\n// indicates how the brace is alignerd to the note to which it's connected\nexport var BraceAttachment = {\n  Left: 0,\n  Right: 1\n};\n\nexport class BracePoint extends ChantLayoutElement {\n  constructor(note, isAbove, shape, attachment) {\n    super();\n\n    this.note = note;\n    this.isAbove = isAbove;\n    this.shape = shape;\n    this.attachment = attachment;\n  }\n\n  getAttachmentX(note) {\n    if (!note) note = this.note;\n    if (this.attachment === BraceAttachment.Left)\n      return (note.neume ? note.neume.bounds.x : 0) + note.bounds.x;\n    else return (note.neume ? note.neume.bounds.x : 0) + note.bounds.right();\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Exsurge.Chant.Markings.js","//\n// Author(s):\n// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n//\n// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\nimport { Step } from \"./Exsurge.Core.js\";\nimport {\n  ChantNotationElement, DividerLineVisualizer, GlyphCode,\n  GlyphVisualizer\n} from \"./Exsurge.Drawing.js\";\n\n/*\n *\n */\nexport class Custos extends ChantNotationElement {\n  // if auto is true, then the custos will automatically try to determine it's height based on\n  // subsequent notations\n  constructor(auto = false) {\n    super();\n    this.auto = auto;\n    this.staffPosition = 0; // default sane value\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    if (this.auto) {\n      var neume = ctxt.findNextNeume();\n\n      if (neume)\n        this.staffPosition = ctxt.activeClef.pitchToStaffPosition(\n          neume.notes[0].pitch\n        );\n\n      // in case there was a weird fa/do clef change, let's sanitize the staffPosition by making sure it is\n      // within reasonable bounds\n      while (this.staffPosition < -6) this.staffPosition += 7;\n\n      while (this.staffPosition > 6) this.staffPosition -= 7;\n    }\n\n    var glyph = new GlyphVisualizer(\n      ctxt,\n      Custos.getGlyphCode(this.staffPosition)\n    );\n    glyph.setStaffPosition(ctxt, this.staffPosition);\n    this.addVisualizer(glyph);\n\n    this.finishLayout(ctxt);\n  }\n\n  // called when layout has changed and our dependencies are no longer good\n  resetDependencies() {\n    // we only need to resolve new dependencies if we're an automatic custos\n    if (this.auto) this.needsLayout = true;\n  }\n\n  static getGlyphCode(staffPosition) {\n    if (staffPosition <= 2) {\n      // ascending custodes\n      if (Math.abs(staffPosition) % 2 === 1) return GlyphCode.CustosLong;\n      else return GlyphCode.CustosShort;\n    } else {\n      // descending custodes\n      if (Math.abs(staffPosition) % 2 === 1) return GlyphCode.CustosDescLong;\n      else return GlyphCode.CustosDescShort;\n    }\n  }\n}\n\n/*\n * Divider\n */\nexport class Divider extends ChantNotationElement {\n  constructor() {\n    super();\n\n    this.isDivider = true;\n    this.resetsAccidentals = true;\n  }\n}\n\n/*\n * QuarterBar\n */\nexport class QuarterBar extends Divider {\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n    this.addVisualizer(new DividerLineVisualizer(ctxt, 2, 4, this));\n\n    this.origin.x = this.bounds.width / 2;\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * HalfBar\n */\nexport class HalfBar extends Divider {\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    this.addVisualizer(new DividerLineVisualizer(ctxt, -2, 2, this));\n\n    this.origin.x = this.bounds.width / 2;\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * FullBar\n */\nexport class FullBar extends Divider {\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    this.addVisualizer(new DividerLineVisualizer(ctxt, -3, 3, this));\n\n    this.origin.x = this.bounds.width / 2;\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Insertion Cursor\n */\nexport class InsertionCursor extends Divider {\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    this.addVisualizer(new DividerLineVisualizer(ctxt, -4, 4));\n\n    this.origin.x = this.bounds.width / 2;\n    this.bounds.width = 0;\n    this.bounds.height = 0;\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * DominicanBar\n */\nexport class DominicanBar extends Divider {\n  constructor(staffPosition) {\n    super();\n    staffPosition--;\n    var parity = staffPosition % 2;\n\n    this.staffPosition = staffPosition - 2 * parity;\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n    this.addVisualizer(\n      new DividerLineVisualizer(\n        ctxt,\n        this.staffPosition - 3,\n        this.staffPosition,\n        this\n      )\n    );\n\n    this.origin.x = this.bounds.width / 2;\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * DoubleBar\n */\nexport class DoubleBar extends Divider {\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var line0 = new DividerLineVisualizer(ctxt, -3, 3, this);\n    line0.bounds.x = 0;\n    this.addVisualizer(line0);\n\n    var line1 = new DividerLineVisualizer(ctxt, -3, 3, this);\n    line1.bounds.x = ctxt.intraNeumeSpacing * 2 - line1.bounds.width;\n    this.addVisualizer(line1);\n\n    this.origin.x = this.bounds.width / 2;\n\n    this.finishLayout(ctxt);\n  }\n}\n\nexport const AccidentalType = {\n  Flat: -1,\n  Natural: 0,\n  Sharp: 1\n};\n\n/*\n * Accidental\n */\nexport class Accidental extends ChantNotationElement {\n  constructor(staffPosition, accidentalType) {\n    super();\n    this.isAccidental = true;\n    this.keepWithNext = true; // accidentals should always stay connected...\n\n    this.staffPosition = staffPosition;\n    this.accidentalType = accidentalType;\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    this.addVisualizer(this.createGlyphVisualizer(ctxt));\n\n    this.finishLayout(ctxt);\n  }\n\n  // creation of the glyph visualizer is refactored out or performLayout\n  // so that clefs can use the same logic for their accidental glyph\n  createGlyphVisualizer(ctxt) {\n    var glyphCode = GlyphCode.Flat;\n\n    switch (this.accidentalType) {\n      case AccidentalType.Natural:\n        glyphCode = GlyphCode.Natural;\n        break;\n      case AccidentalType.Sharp:\n        glyphCode = GlyphCode.Sharp;\n        break;\n      default:\n        glyphCode = GlyphCode.Flat;\n        break;\n    }\n\n    var glyph = new GlyphVisualizer(ctxt, glyphCode);\n    glyph.setStaffPosition(ctxt, this.staffPosition);\n\n    return glyph;\n  }\n\n  adjustStep(step) {\n    switch (this.accidentalType) {\n      case AccidentalType.Flat:\n        if (step === Step.Ti) return Step.Te;\n        if (step === Step.Mi) return Step.Me;\n        break;\n      case AccidentalType.Sharp:\n        if (step === Step.Do) return Step.Du;\n        if (step === Step.Fa) return Step.Fu;\n        break;\n      case AccidentalType.Natural:\n        if (step === Step.Te) return Step.Ti;\n        if (step === Step.Me) return Step.Mi;\n        if (step === Step.Du) return Step.Do;\n        if (step === Step.Fu) return Step.Fa;\n        break;\n    }\n\n    // no adjustment needed\n    return step;\n  }\n\n  applyToPitch(pitch) {\n    // no adjusment needed\n    if (this.pitch.octave !== pitch.octave) return;\n\n    pitch.step = this.adjustStep(pitch.step);\n  }\n}\n\n/*\n * Virgula\n */\nexport class Virgula extends Divider {\n  constructor() {\n    super();\n\n    // unlike other dividers a virgula does not reset accidentals\n    this.resetsAccidentals = false;\n\n    // the staff position of the virgula is customizable, so that it\n    // can be placed on different lines (top or bottom) depending on the\n    // notation tradition of what is being notated (e.g., Benedictine has it\n    //  on top line, Norbertine at the bottom)\n    this.staffPosition = 3;\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var glyph = new GlyphVisualizer(ctxt, GlyphCode.Virgula);\n    glyph.setStaffPosition(ctxt, this.staffPosition);\n\n    this.addVisualizer(glyph);\n\n    this.origin.x = this.bounds.width / 2;\n\n    this.finishLayout(ctxt);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Exsurge.Chant.Signs.js","//\n// Author(s):\n// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n//\n// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\nimport {\n  Units,\n  Pitch,\n  Point,\n  Rect,\n  Margins,\n  Size,\n  Step\n} from \"./Exsurge.Core.js\";\nimport {\n  MarkingPositionHint,\n  LyricType,\n  Lyric,\n  LyricArray,\n  AboveLinesText,\n  ChoralSign,\n  TranslationText,\n  DefaultTrailingSpace,\n  GlyphCode\n} from \"./Exsurge.Drawing.js\";\nimport {\n  Note,\n  LiquescentType,\n  NoteShape,\n  NoteShapeModifiers,\n  ChantMapping,\n  ChantScore,\n  ChantDocument,\n  Clef,\n  DoClef,\n  FaClef,\n  TextOnly,\n  ChantLineBreak\n} from \"./Exsurge.Chant.js\";\nimport * as Markings from \"./Exsurge.Chant.Markings.js\";\nimport * as Signs from \"./Exsurge.Chant.Signs.js\";\nimport * as Neumes from \"./Exsurge.Chant.Neumes.js\";\n\n// reusable reg exps\nvar __syllablesRegex = /(?=\\S)((?:<v>[\\s\\S]*<\\/v>|[^(])*)(?:\\(?([^)]*)\\)?)?/g\nvar __altTranslationRegex = /<alt>(.*?)<\\/alt>|\\[(alt:)?(.*?)\\]/g;\n\nvar __notationsRegex = /z0|z|Z|::|:|[,;][1-6]?|`|[cf][1-4]|cb[1-4]|\\/+| |\\!|-?[a-mA-M][oOwWvVrRsxy#~\\+><_\\.'012345]*(?:\\[[^\\]]*\\]?)*|\\{([^}]+)\\}?/g;\nvar __notationsRegex_group_insideBraces = 1;\n\nvar __bracketedCommandRegex = /^([a-z]+):(.*)/;\n\n// for the brace string inside of [ and ] in notation data\n// the capturing groups are:\n//  1. o or u, to indicate over or under\n//  2. b, cb, or cba, to indicate the brace type\n//  3. 0 or 1 to indicate the attachment point\n//  4. { or } to indicate opening/closing (this group will be null if the metric version is used)\n//  5. a float indicating the millimeter length of the brace (not supported yet)\nvar __braceSpecRegex = /([ou])(b|cb|cba):([01])(?:([{}])|;(\\d*(?:\\.\\d+)?)mm)/;\n\nconst TrailingSpaceForAccidental = ctxt =>\n  ctxt.intraNeumeSpacing * ctxt.accidentalSpaceMultiplier;\nconst TrailingSpaceMultiple = multiplier => ctxt =>\n  ctxt.intraNeumeSpacing * multiplier;\n\nconst regexHeaderEnd = /(?:^|\\n)%%\\s?\\n/;\nconst regexHeaderLine = /^([\\w-_.]+):\\s*((?:[^;\\r\\n]|;[ \\t])*)(?:;|$)/i;\nconst regexHeaderComment = /^%.*/;\nexport class GabcHeader {\n  static getLength(gabc) {\n    let match = gabc.match(regexHeaderEnd);\n    return match ? match.index + match[0].length : 0;\n  }\n\n  constructor(text) {\n    if (typeof text !== \"string\") text = \"\";\n    this.comments = [];\n    this.cValues = {};\n    this.original = \"\";\n    let match = text.match(regexHeaderEnd);\n    if (match) {\n      let txtHeader = (this.original = text.slice(\n        0,\n        match.index + match[0].length\n      ));\n      var lines = txtHeader.split(/\\r?\\n/g);\n      for (var i = 0; i < lines.length; ++i) {\n        let line = lines[i],\n          match = regexHeaderLine.exec(line);\n        if (match) {\n          var key = match[1].replace(/-([a-z])/g, function(a, letter) {\n            return letter.toUpperCase();\n          });\n          if (this[match[1]]) {\n            var arrayName = match[1] + \"Array\";\n            if (!this[arrayName]) {\n              this[arrayName] = [this[match[1]]];\n            }\n            this[arrayName].push(match[2]);\n          } else {\n            this[match[1]] = match[2];\n          }\n          if (key !== match[1]) this[key] = this[match[1]];\n        } else if ((match = regexHeaderComment.exec(line))) {\n          if (line !== \"%%\") {\n            match = regexHeaderLine.exec(line.slice(1));\n            if (match) {\n              let key = match[1].replace(/-([a-z])/g, function(a, letter) {\n                return letter.toUpperCase();\n              });\n              this.cValues[match[1]] = match[2];\n              if (key !== match[1]) this.cValues[key] = match[2];\n            } else {\n              this.comments[i] = line;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  toString() {\n    var result = [];\n    for (let key in this) {\n      if (\n        typeof this[key] !== \"string\" ||\n        /^(length|original|comments|cValues)$/.test(key)\n      ) {\n        continue;\n      }\n      var alternateKey = key.replace(/[A-Z]/g, function(letter) {\n        return \"-\" + letter.toLowerCase();\n      });\n      if (alternateKey !== key && alternateKey in this) continue;\n      var array = this[key + \"Array\"];\n      if (array) {\n        for (var i = 0; i < array.length; ++i) {\n          result.push(key + \": \" + array[i] + \";\");\n        }\n      } else {\n        result.push(key + \": \" + this[key] + \";\");\n      }\n    }\n    for (let key in this.cValues) {\n      if (key.length === 0 || !this.cValues.hasOwnProperty(key)) continue;\n      result.push(\"%\" + key + \": \" + this.cValues[key] + \";\");\n    }\n    for (let i in this.comments) {\n      if (!this.comments.hasOwnProperty(i)) continue;\n      try {\n        result.splice(i, 0, this.comments[i]);\n      } catch (e) {\n        console.warn(e);\n      }\n    }\n    return result.join(\"\\n\") + \"\\n%%\\n\";\n  }\n}\n\nvar elementCountForNotations = items =>\n  items.reduce((sum, item) => sum + (item.notes ? item.notes.length : 1), 0);\n\nexport class Gabc {\n  // takes gabc source code (without the header info) and returns an array\n  // of ChantMappings describing the chant. A chant score can then be created\n  // fron the chant mappings and later updated via updateMappings() if need\n  // be...\n  static createMappingsFromSource(ctxt, gabcSource) {\n    var headerLength = GabcHeader.getLength(gabcSource);\n    gabcSource = gabcSource.slice(headerLength);\n    var words = this.splitWords(gabcSource);\n\n    // set the default clef\n    ctxt.activeClef = Clef.default();\n\n    var mappings = this.createMappingsFromWords(\n      ctxt,\n      words,\n      clef => (ctxt.activeClef = clef)\n    );\n\n    // always set the last notation to have a trailingSpace of 0. This makes layout for the last chant line simpler\n    if (\n      mappings.length > 0 &&\n      mappings[mappings.length - 1].notations.length > 0\n    )\n      mappings[mappings.length - 1].notations[\n        mappings[mappings.length - 1].notations.length - 1\n      ].trailingSpace = 0;\n\n    return mappings;\n  }\n\n  // A simple general purpose diff algorithm adapted here for comparing\n  // an array of existing mappings with an updated list of gabc words.\n  // note before is an array of mappings, and after is an array of strings\n  // (gabc words).\n  //\n  // This is definitely not the most effecient diff algorithm, but for our\n  // limited needs and source size it seems to work just fine...\n  //\n  // code is adapted from: https://github.com/paulgb/simplediff\n  //\n  // Returns:\n  //   A list of pairs, with the first part of the pair being one of three\n  //   strings ('-', '+', '=') and the second part being a list of values from\n  //   the original before and/or after lists. The first part of the pair\n  //   corresponds to whether the list of values is a deletion, insertion, or\n  //   unchanged, respectively.\n  static diffDescriptorsAndNewWords(before, after) {\n    // Create a map from before values to their indices\n    var oldIndexMap = {},\n      i;\n    for (i = 0; i < before.length; i++) {\n      oldIndexMap[before[i].source] = oldIndexMap[before[i].source] || [];\n      oldIndexMap[before[i].source].push(i);\n    }\n\n    var overlap = [],\n      startOld,\n      startNew,\n      subLength,\n      inew;\n\n    startOld = startNew = subLength = 0;\n\n    for (inew = 0; inew < after.length; inew++) {\n      var _overlap = [];\n      oldIndexMap[after[inew]] = oldIndexMap[after[inew]] || [];\n      for (i = 0; i < oldIndexMap[after[inew]].length; i++) {\n        var iold = oldIndexMap[after[inew]][i];\n        // now we are considering all values of val such that\n        // `before[iold] == after[inew]`\n        _overlap[iold] = ((iold && overlap[iold - 1]) || 0) + 1;\n        if (_overlap[iold] > subLength) {\n          // this is the largest substring seen so far, so store its indices\n          subLength = _overlap[iold];\n          startOld = iold - subLength + 1;\n          startNew = inew - subLength + 1;\n        }\n      }\n      overlap = _overlap;\n    }\n\n    if (subLength === 0) {\n      // If no common substring is found, we return an insert and delete...\n      var result = [];\n\n      if (before.length) result.push([\"-\", before]);\n\n      if (after.length) result.push([\"+\", after]);\n\n      return result;\n    }\n\n    // ...otherwise, the common substring is unchanged and we recursively\n    // diff the text before and after that substring\n    return [].concat(\n      this.diffDescriptorsAndNewWords(\n        before.slice(0, startOld),\n        after.slice(0, startNew)\n      ),\n      [[\"=\", after.slice(startNew, startNew + subLength)]],\n      this.diffDescriptorsAndNewWords(\n        before.slice(startOld + subLength),\n        after.slice(startNew + subLength)\n      )\n    );\n  }\n\n  // this function essentially performs and applies a rudimentary diff between a\n  // previously parsed set of mappings and between a new gabc source text.\n  // the mappings array passed in is changed in place to be updated from the\n  // new source\n  static updateMappingsFromSource(\n    ctxt,\n    mappings,\n    newGabcSource,\n    insertionIndex = null,\n    oldInsertionIndex = null\n  ) {\n    var headerLength = GabcHeader.getLength(newGabcSource);\n    newGabcSource = newGabcSource.slice(headerLength);\n    // always remove the last old mapping since it's spacing/trailingSpace is handled specially\n    mappings.pop();\n\n    if (insertionIndex === null) {\n      insertionIndex = NaN;\n    }\n    if (oldInsertionIndex === null) {\n      oldInsertionIndex = NaN;\n    }\n\n    var newWords = this.splitWords(newGabcSource);\n\n    var results = this.diffDescriptorsAndNewWords(mappings, newWords);\n\n    var index = 0,\n      j,\n      k,\n      l,\n      sourceIndex = 0,\n      wordLength = 0,\n      mapping,\n      elementIndex = 0;\n\n    ctxt.activeClef = Clef.default();\n\n    // apply the results to the mappings, marking notations that need to be processed\n    var lastTranslationNeumes = [];\n    for (var i = 0; i < results.length; i++) {\n      var resultCode = results[i][0];\n      var resultValues = results[i][1];\n\n      if (index > 0)\n        sourceIndex =\n          mappings[index - 1].sourceIndex +\n          mappings[index - 1].source.length +\n          1;\n      if (resultCode === \"=\") {\n        var sourceIndexDiff = sourceIndex - mappings[index].sourceIndex;\n        // skip over ones that haven't changed, but updating the clef and source\n        // index (and pitch in case clef or accidentals have changed) as we go\n        for (j = 0; j < resultValues.length; j++, index++) {\n          mapping = mappings[index];\n          if (\n            elementIndex === 0 &&\n            mapping.notations.length &&\n            mapping.notations[0].isClef\n          ) {\n            // the first clef doesn't get kept as a notation:\n            elementIndex = -1;\n          }\n          if (\n            insertionIndex >= elementIndex ||\n            oldInsertionIndex >= elementIndex\n          ) {\n            // check if the insertion index is within this mapping:\n            let elementCount = elementCountForNotations(mapping.notations);\n            if (\n              (insertionIndex >= elementIndex &&\n                insertionIndex < elementIndex + elementCount) ||\n              (oldInsertionIndex >= elementIndex &&\n                oldInsertionIndex < elementIndex + elementCount)\n            ) {\n              // re-do this mapping:\n              // TODO: check sourceIndex\n              let sourceIndex = mapping.sourceIndex + sourceIndexDiff;\n              mapping = this.createMappingFromWord(\n                ctxt,\n                resultValues[j],\n                sourceIndex,\n                lastTranslationNeumes,\n                insertionIndex - elementIndex\n              );\n              mappings.splice(index, 1, mapping);\n\n              elementIndex += elementCount;\n              continue;\n            }\n            elementIndex += elementCount;\n          }\n          mapping.sourceIndex += sourceIndexDiff;\n          for (k = 0; k < mapping.notations.length; k++) {\n            var curNotation = mapping.notations[k];\n            var prevIsAccidental =\n              mapping.notations[k - 1] && mapping.notations[k - 1].isAccidental;\n            // notify the notation that its dependencies are no longer valid\n            curNotation.resetDependencies();\n\n            if (curNotation.isClef) {\n              ctxt.activeClef = mappings[index].notations[k];\n            }\n\n            if (curNotation.isAccidental) {\n              ctxt.activeClef.activeAccidental = curNotation;\n            } else if (\n              curNotation.resetsAccidentals ||\n              (!prevIsAccidental &&\n                curNotation.hasLyrics() &&\n                curNotation.lyrics[0].lyricType <= LyricType.BeginningSyllable)\n            ) {\n              ctxt.activeClef.resetAccidentals();\n            }\n\n            // update source index, pitch, and automatic braces\n            if (curNotation.notes) {\n              for (l = 0; l < curNotation.notes.length; ++l) {\n                let note = curNotation.notes[l];\n                note.sourceIndex += sourceIndexDiff;\n                note.pitch = ctxt.activeClef.staffPositionToPitch(\n                  note.staffPosition\n                );\n                if (note.braceEnd && note.braceEnd.automatic)\n                  delete note.braceEnd;\n                if (this.needToEndBrace && !note.braceStart && !note.braceEnd) {\n                  note.braceEnd = new Markings.BracePoint(\n                    note,\n                    this.needToEndBrace.isAbove,\n                    this.needToEndBrace.shape,\n                    this.needToEndBrace.attachment ===\n                    Markings.BraceAttachment.Left\n                      ? Markings.BraceAttachment.Right\n                      : Markings.BraceAttachment.Left\n                  );\n                  note.braceEnd.automatic = true;\n                  delete this.needToEndBrace;\n                } else if (note.braceStart && note.braceStart.automatic) {\n                  this.needToEndBrace = note.braceStart;\n                }\n              }\n            }\n            if (curNotation.translationText) {\n              for (l = 0; l < curNotation.translationText.length; ++l) {\n                let transText = curNotation.translationText[l];\n                delete transText.endNeume;\n                curNotation.translationText[l].sourceIndex += sourceIndexDiff;\n                if (\n                  transText.textAnchor === \"end\" &&\n                  lastTranslationNeumes[0]\n                ) {\n                  let lastTranslationText =\n                    lastTranslationNeumes[0].translationText[l];\n                  if (lastTranslationText)\n                    lastTranslationText.endNeume = curNotation;\n                }\n              }\n              lastTranslationNeumes[0] = curNotation;\n            }\n            if (sourceIndexDiff) {\n              if (typeof curNotation.sourceIndex === \"number\") {\n                curNotation.sourceIndex += sourceIndexDiff;\n              }\n              for (l = 0; l < curNotation.lyrics.length; ++l) {\n                curNotation.lyrics[l].sourceIndex += sourceIndexDiff;\n              }\n              if (curNotation.alText) {\n                for (l = 0; l < curNotation.alText.length; ++l) {\n                  curNotation.alText[l].sourceIndex += sourceIndexDiff;\n                }\n              }\n            }\n          }\n        }\n      } else if (resultCode === \"-\") {\n        // delete elements that no longer exist, but first notify all\n        // elements of the change\n        mappings.splice(index, resultValues.length);\n      } else if (resultCode === \"+\") {\n        // insert new ones\n        for (j = 0; j < resultValues.length; j++) {\n          wordLength = resultValues[j].length + 1;\n          mapping = this.createMappingFromWord(\n            ctxt,\n            resultValues[j],\n            sourceIndex,\n            lastTranslationNeumes,\n            insertionIndex - elementIndex\n          );\n\n          if (\n            elementIndex === 0 &&\n            mapping.notations.length &&\n            mapping.notations[0].isClef\n          ) {\n            // the first clef doesn't get kept as a notation:\n            elementIndex = -1;\n            let elementCount = elementCountForNotations(mapping.notations);\n            if (insertionIndex < elementCount) {\n              // re-do the first mapping, because it was broken up incorrectly, due to the presence of the initial clef\n              mapping = this.createMappingFromWord(\n                ctxt,\n                resultValues[j],\n                sourceIndex,\n                lastTranslationNeumes,\n                insertionIndex - elementIndex\n              );\n            }\n          }\n\n          for (k = 0; k < mapping.notations.length; k++) {\n            let curNotation = mapping.notations[k];\n            elementIndex += curNotation.notes ? curNotation.notes.length : 1;\n            if (curNotation.isClef) {\n              ctxt.activeClef = mapping.notations[k];\n            }\n          }\n\n          mappings.splice(index++, 0, mapping);\n          sourceIndex += wordLength;\n        }\n      }\n    }\n\n    // always set the last notation to have a trailingSpace of 0. This makes layout for the last chant line simpler\n    if (\n      mappings.length > 0 &&\n      mappings[mappings.length - 1].notations.length > 0\n    )\n      mappings[mappings.length - 1].notations[\n        mappings[mappings.length - 1].notations.length - 1\n      ].trailingSpace = 0;\n\n    return headerLength;\n  }\n\n  // takes an array of gabc words (like that returned by splitWords below)\n  // and returns an array of ChantMapping objects, one for each word.\n  static createMappingsFromWords(ctxt, words) {\n    var mappings = [];\n    var sourceIndex = 0,\n      wordLength = 0,\n      lastTranslationNeumes = [];\n\n    for (var i = 0; i < words.length; i++) {\n      sourceIndex += wordLength;\n      wordLength = words[i].length + 1;\n      var word = words[i].trim();\n\n      if (word === \"\") continue;\n\n      var mapping = this.createMappingFromWord(\n        ctxt,\n        word,\n        sourceIndex,\n        lastTranslationNeumes\n      );\n\n      if (mapping) mappings.push(mapping);\n    }\n\n    return mappings;\n  }\n\n  // takes a gabc word (like those returned by splitWords below) and returns\n  // a ChantMapping object that contains the gabc word source text as well\n  // as the generated notations.\n  static createMappingFromWord(\n    ctxt,\n    word,\n    sourceIndex,\n    lastTranslationNeumes,\n    insertionIndex\n  ) {\n    var matches = [];\n    var notations = [];\n    var currSyllable = 0;\n\n    while ((match = __syllablesRegex.exec(word))) matches.push(match);\n\n    for (var j = 0; j < matches.length; j++) {\n      var match = matches[j];\n\n      var lyricText = match[1].replace(/~/g, \" \");\n      var alText = [];\n      var translationText = [];\n      var notationData = match[2];\n\n      // new words reset the accidentals, per the Solesmes style (see LU xviij)\n      // but we need to also make sure that there _is_ a word and that it has notes associated with it.\n      if (\n        currSyllable === 0 &&\n        /[a-z]/i.test(lyricText) &&\n        /[a-m]/i.test(notationData)\n      )\n        ctxt.activeClef.resetAccidentals();\n\n      var items = this.parseNotations(\n        ctxt,\n        notationData,\n        sourceIndex + match.index + match[1].length + 1,\n        insertionIndex\n      );\n\n      if (items.length === 0) continue;\n\n      if (insertionIndex >= 0)\n        insertionIndex -= elementCountForNotations(items);\n\n      items[0].firstOfSyllable = !!lyricText;\n      items[0].firstOfParentheses = true;\n      notations.push(...items);\n\n      // add the lyrics and/or alText to the first notation that makes sense...\n      var notationWithLyrics = null;\n      for (var i = 0; i < items.length; i++) {\n        var cne = items[i];\n\n        if (cne.isAccidental && i + 1 < items.length) continue;\n\n        notationWithLyrics = cne;\n        break;\n      }\n\n      var m = __altTranslationRegex.exec();\n      let indexOffset = 0;\n      while ((m = __altTranslationRegex.exec(lyricText))) {\n        let index = m.index;\n        lyricText =\n          lyricText.slice(0, index) + lyricText.slice(index + m[0].length);\n        index += sourceIndex + indexOffset + 1;\n        if (typeof m[1] === \"string\") {\n          let elem = new AboveLinesText(\n            ctxt,\n            m[1],\n            notationWithLyrics,\n            index + 4\n          );\n          elem.alIndex = alText.push(elem) - 1;\n        } else if (typeof m[2] === \"string\") {\n          let elem = new AboveLinesText(\n            ctxt,\n            m[3],\n            notationWithLyrics,\n            index + m[2].length\n          );\n          elem.alIndex = alText.push(elem) - 1;\n        } else {\n          let elem = new TranslationText(ctxt, m[3], notationWithLyrics, index);\n          elem.translationIndex = translationText.push(elem) - 1;\n        }\n        indexOffset += m[0].length;\n        __altTranslationRegex.exec();\n      }\n      if (lyricText === \"\" && alText.length === 0) continue;\n\n      if (notationWithLyrics === null)\n        return new ChantMapping(word, notations, sourceIndex);\n\n      if (alText.length) notationWithLyrics.alText = alText;\n\n      if (translationText.length) {\n        notationWithLyrics.translationText = translationText;\n        for (i = 0; i < translationText.length; ++i) {\n          let transText = translationText[i];\n          if (transText.textAnchor === \"end\" && lastTranslationNeumes[0]) {\n            let lastTranslationText =\n              lastTranslationNeumes[0].translationText[i];\n            if (lastTranslationText)\n              lastTranslationText.endNeume = notationWithLyrics;\n          }\n        }\n        lastTranslationNeumes[0] = notationWithLyrics;\n      }\n\n      if (lyricText === \"\") continue;\n\n      var proposedLyricType;\n\n      // if it's not a neume or a TextOnly notation, then make the lyrics a directive\n      if (!cne.isNeume && cne.constructor !== TextOnly)\n        proposedLyricType = LyricType.Directive;\n      // otherwise trye to guess the lyricType for the first lyric anyway\n      else if (currSyllable === 0 && j === matches.length - 1)\n        proposedLyricType = LyricType.SingleSyllable;\n      else if (currSyllable === 0 && j < matches.length - 1)\n        proposedLyricType = LyricType.BeginningSyllable;\n      else if (j === matches.length - 1)\n        proposedLyricType = LyricType.EndingSyllable;\n      else proposedLyricType = LyricType.MiddleSyllable;\n\n      currSyllable++;\n\n      var lyrics = this.createSyllableLyrics(\n        ctxt,\n        lyricText,\n        proposedLyricType,\n        notationWithLyrics,\n        items,\n        sourceIndex + match.index\n      );\n\n      if (lyrics === null || lyrics.length === 0) continue;\n\n      notationWithLyrics.lyrics = lyrics;\n    }\n\n    return new ChantMapping(word, notations, sourceIndex);\n  }\n\n  // returns an array of lyrics (an array because each syllable can have multiple lyrics)\n  static createSyllableLyrics(\n    ctxt,\n    text,\n    proposedLyricType,\n    notation,\n    notations,\n    sourceIndex\n  ) {\n    var lyrics = [];\n\n    // an extension to gabc: multiple lyrics per syllable can be separated by a |\n    var lyricTexts = text.split(\"|\");\n\n    for (var i = 0; i < lyricTexts.length; i++) {\n      var lyricText = lyricTexts[i];\n\n      if (i > 0) {\n        if (lyricText.match(/\\s$/)) {\n          lyricText = lyricText.replace(/s+$/, \"\");\n          proposedLyricType = LyricType.EndingSyllable;\n        } else {\n          proposedLyricType = LyricType.MiddleSyllable;\n        }\n      }\n\n      // gabc allows lyrics to indicate the centering part of the text by\n      // using braces to indicate how to center the lyric. So a lyric can\n      // look like \"f{i}re\" or \"{fenced}\" to center on the i or on the entire\n      // word, respectively. Here we determine if the lyric should be spaced\n      // manually with this method of using braces.\n      var centerStartIndex = lyricText.indexOf(\"{\");\n      var centerLength = 0;\n\n      if (centerStartIndex >= 0) {\n        let indexClosingBracket = lyricText.indexOf(\"}\");\n\n        if (\n          indexClosingBracket >= 0 &&\n          indexClosingBracket > centerStartIndex\n        ) {\n          centerLength = indexClosingBracket - centerStartIndex - 1;\n\n          // strip out the brackets...is this better than string.replace?\n          lyricText =\n            lyricText.substring(0, centerStartIndex) +\n            lyricText.substring(centerStartIndex + 1, indexClosingBracket) +\n            lyricText.substring(indexClosingBracket + 1, lyricText.length);\n        } else centerStartIndex = -1; // if there's no closing bracket, don't enable centering\n      }\n\n      var lyric = this.makeLyric(\n        ctxt,\n        lyricText,\n        proposedLyricType,\n        notation,\n        notations,\n        sourceIndex\n      );\n\n      if (centerStartIndex) {\n        // update indices in case there had been any tags, etc.\n        let textIndex = 0,\n          centerEndIndex = -1;\n        for (let span of lyric.spans) {\n          if (\n            centerStartIndex >= span.sourceIndex &&\n            centerStartIndex < span.sourceIndex + span.text.length\n          ) {\n            centerStartIndex += textIndex - span.sourceIndex;\n            centerEndIndex = centerStartIndex + centerLength;\n          } else if (\n            centerEndIndex >= 0 &&\n            centerEndIndex >= span.sourceIndex &&\n            centerEndIndex < span.sourceIndex + span.text.length\n          ) {\n            centerEndIndex += textIndex - span.sourceIndex;\n            break;\n          }\n          textIndex += span.text.length;\n        }\n      }\n\n      // if we have manual lyric centering, then set it now\n      if (centerStartIndex >= 0) {\n        lyric.centerStartIndex = centerStartIndex;\n        lyric.centerLength = centerLength;\n      }\n\n      lyric.lyricIndex = lyrics.push(lyric) - 1;\n      sourceIndex += lyricText.length + 1;\n    }\n    notation.lyrics = lyrics;\n    return lyrics;\n  }\n\n  static makeLyric(ctxt, text, lyricType, notation, notations, sourceIndex) {\n    var elides = false;\n    var forceConnector = false;\n    if (text.length > 1) {\n      if (text[text.length - 1] === \"-\") {\n        forceConnector = true;\n        if (lyricType === LyricType.EndingSyllable)\n          lyricType = LyricType.MiddleSyllable;\n        else if (lyricType === LyricType.SingleSyllable)\n          lyricType = LyricType.BeginningSyllable;\n\n        text = text.slice(0, -1);\n      } else if (text[text.length - 1] === \" \") {\n        if (lyricType === LyricType.MiddleSyllable)\n          lyricType = LyricType.EndingSyllable;\n        else if (lyricType === LyricType.BeginningSyllable)\n          lyricType = LyricType.SingleSyllable;\n\n        text = text.slice(0, -1);\n      } else if (/<\\/i>$/.test(text)) {\n        // must be an elision\n        elides = true;\n      }\n    }\n\n    if (text.match(/^(?:[*†]+|i+j|\\d+)\\.?$/)) lyricType = LyricType.Directive;\n\n    var lyric = new Lyric(\n      ctxt,\n      text,\n      lyricType,\n      notation,\n      notations,\n      sourceIndex\n    );\n    lyric.elidesToNext = elides;\n    if (forceConnector) lyric.setForceConnector(true);\n\n    return lyric;\n  }\n\n  // takes a string of gabc notations and creates exsurge objects out of them.\n  // returns an array of notations.\n  static parseNotations(ctxt, data, sourceIndex, insertionIndex) {\n    // if there is no data, then this must be a text only object\n    if (!data) return [new TextOnly(sourceIndex, 0)];\n\n    var baseSourceIndex = sourceIndex;\n    var sourceLength = 0;\n    var notations = [];\n    var notes = [];\n    var trailingSpace = DefaultTrailingSpace;\n\n    var addToLastSourceGabc = gabc => {\n      if (notes.length > 0) {\n        notes[notes.length - 1].sourceGabc += gabc;\n      }\n    };\n    var addNotation = notation => {\n      // first, if we have any notes left over, we create a neume out of them\n      if (notes.length > 0) {\n        // create neume(s)\n        var neumes = this.createNeumesFromNotes(ctxt, notes, trailingSpace);\n        for (var i = 0; i < neumes.length; i++) notations.push(neumes[i]);\n\n        notes = [];\n      }\n\n      // reset the trailing space\n      trailingSpace = DefaultTrailingSpace;\n\n      // then, if we're passed a notation, let's add it\n      // also, perform chant logic here\n      if (notation !== null) {\n        let prevNotation = notations[notations.length - 1];\n        notation.sourceIndex = sourceIndex;\n        notation.sourceGabc = match[0];\n        if (notation.isClef) {\n          ctxt.activeClef = notation;\n          if (\n            prevNotation &&\n            prevNotation.trailingSpace.isDefault &&\n            prevNotation.isDivider\n          ) {\n            prevNotation.trailingSpace = TrailingSpaceForAccidental;\n          }\n        } else if (notation.isAccidental) {\n          ctxt.activeClef.activeAccidental = notation;\n        } else if (\n          notation.trailingSpace.isDefault &&\n          notation instanceof Signs.Custos\n        ) {\n          notation.trailingSpace = TrailingSpaceForAccidental;\n        } else if (notation.resetsAccidentals)\n          ctxt.activeClef.resetAccidentals();\n\n        notations.push(notation);\n      }\n    };\n\n    var regex = new RegExp(__notationsRegex.source, \"g\");\n    var match;\n\n    while ((match = regex.exec(data))) {\n      sourceIndex = baseSourceIndex + match.index;\n      sourceLength = match[0].length;\n      var atom = match[0];\n\n      // handle the clefs and dividers here\n      switch (atom) {\n        case \",\":\n          addNotation(new Signs.QuarterBar());\n          break;\n        case \"`\":\n          addNotation(new Signs.Virgula());\n          break;\n        case \";\":\n          addNotation(new Signs.HalfBar());\n          break;\n        case \";1\":\n        case \";2\":\n        case \";3\":\n        case \";4\":\n        case \";5\":\n        case \";6\":\n        case \",1\":\n        case \",2\":\n        case \",3\":\n        case \",4\":\n        case \",5\":\n        case \",6\":\n          addNotation(new Signs.DominicanBar(parseInt(atom[1], 10)));\n          break;\n        case \":\":\n          addNotation(new Signs.FullBar());\n          break;\n        case \"::\":\n          addNotation(new Signs.DoubleBar());\n          break;\n        // other gregorio dividers are not supported yet\n\n        case \"c1\":\n          addNotation((ctxt.activeClef = new DoClef(-3, 2)));\n          break;\n\n        case \"c2\":\n          addNotation((ctxt.activeClef = new DoClef(-1, 2)));\n          break;\n\n        case \"c3\":\n          addNotation((ctxt.activeClef = new DoClef(1, 2)));\n          break;\n\n        case \"c4\":\n          addNotation((ctxt.activeClef = new DoClef(3, 2)));\n          break;\n\n        case \"f1\":\n          addNotation((ctxt.activeClef = new FaClef(-3, 2)));\n          break;\n\n        case \"f2\":\n          addNotation((ctxt.activeClef = new FaClef(-1, 2)));\n          break;\n\n        case \"f3\":\n          addNotation((ctxt.activeClef = new FaClef(1, 2)));\n          break;\n\n        case \"f4\":\n          addNotation((ctxt.activeClef = new FaClef(3, 2)));\n          break;\n\n        case \"cb1\":\n          addNotation(\n            (ctxt.activeClef = new DoClef(\n              -3,\n              2,\n              new Signs.Accidental(-4, Signs.AccidentalType.Flat)\n            ))\n          );\n          break;\n\n        case \"cb2\":\n          addNotation(\n            (ctxt.activeClef = new DoClef(\n              -1,\n              2,\n              new Signs.Accidental(-2, Signs.AccidentalType.Flat)\n            ))\n          );\n          break;\n\n        case \"cb3\":\n          addNotation(\n            (ctxt.activeClef = new DoClef(\n              1,\n              2,\n              new Signs.Accidental(0, Signs.AccidentalType.Flat)\n            ))\n          );\n          break;\n\n        case \"cb4\":\n          addNotation(\n            (ctxt.activeClef = new DoClef(\n              3,\n              2,\n              new Signs.Accidental(2, Signs.AccidentalType.Flat)\n            ))\n          );\n          break;\n\n        case \"z\":\n          addNotation(new ChantLineBreak(true));\n          break;\n        case \"Z\":\n          addNotation(new ChantLineBreak(false));\n          break;\n        case \"z0\":\n          addNotation(new Signs.Custos(true));\n          break;\n\n        // spacing indicators\n        case \"!\":\n          trailingSpace = 0;\n          addToLastSourceGabc(atom);\n          addNotation(null);\n          break;\n        case \" \":\n          // fixme: is this correct? logically what is the difference in gabc\n          // between putting a space between notes vs putting '//' between notes?\n          trailingSpace = TrailingSpaceMultiple(2);\n          addToLastSourceGabc(atom);\n          addNotation(null);\n          break;\n\n        default:\n          // might be a number of slashes, a custos, might be an accidental, or might be a note\n          if (atom[0] === \"/\") {\n            trailingSpace = TrailingSpaceMultiple(atom.length);\n            addToLastSourceGabc(atom);\n            addNotation(null);\n          } else if (atom.length > 1 && atom[1] === \"+\") {\n            // custos\n            var custos = new Signs.Custos();\n\n            custos.staffPosition = this.gabcHeightToExsurgeHeight(atom[0]);\n\n            addNotation(custos);\n          } else if (atom.length > 1 && /[xy#]/.test(atom[1])) {\n            var accidentalType;\n\n            switch (atom[1]) {\n              case \"y\":\n                accidentalType = Signs.AccidentalType.Natural;\n                break;\n              case \"#\":\n                accidentalType = Signs.AccidentalType.Sharp;\n                break;\n              default:\n                accidentalType = Signs.AccidentalType.Flat;\n                break;\n            }\n\n            var noteArray = [];\n            this.createNoteFromData(\n              ctxt,\n              ctxt.activeClef,\n              atom,\n              noteArray,\n              sourceIndex\n            );\n            var accidental = new Signs.Accidental(\n              noteArray[0].staffPosition,\n              accidentalType\n            );\n            accidental.pitch = this.gabcHeightToExsurgePitch(\n              ctxt.activeClef,\n              atom[0]\n            );\n            accidental.sourceIndex = sourceIndex;\n            accidental.sourceLength = sourceLength;\n            accidental.trailingSpace = TrailingSpaceForAccidental;\n\n            ctxt.activeClef.activeAccidental = accidental;\n\n            addNotation(accidental);\n          } else if (atom.length > 1 && atom[0] === \"{\") {\n            trailingSpace = 0;\n            addNotation(null);\n            let bracketedNotations = this.parseNotations(\n              ctxt,\n              match[__notationsRegex_group_insideBraces],\n              sourceIndex + 1\n            );\n            // Set the width of these notations to 0\n            bracketedNotations.forEach(neume => {\n              neume.hasNoWidth = true;\n              neume.firstWithNoWidth = bracketedNotations[0];\n            });\n            notations.push(...bracketedNotations);\n          } else {\n            // looks like it's a note\n            if (insertionIndex === -1) {\n              trailingSpace = TrailingSpaceMultiple(1);\n              addNotation(null);\n            }\n            this.createNoteFromData(\n              ctxt,\n              ctxt.activeClef,\n              atom,\n              notes,\n              sourceIndex\n            );\n            --insertionIndex;\n          }\n          break;\n      }\n    }\n\n    // finish up any remaining notes we have left\n    addNotation(null);\n\n    return notations;\n  }\n\n  static createNeumesFromNotes(ctxt, notes, finalTrailingSpace) {\n    var neumes = [];\n    var firstNoteIndex = 0;\n    var currNoteIndex = 0;\n\n    // here we use a simple finite state machine to create the neumes from the notes\n    // createNeume is helper function which returns the next state after a neume is created\n    // (unknownState). Each state object has a neume() function and a handle() function.\n    // neume() allows us to create the neume of the state in the event that we run out\n    // of notes. handle() gives the state an opportunity to examine the currNote and\n    // determine what to do...either transition to a different neume/state, or\n    // continue building the neume of that state. handle() returns the next state\n\n    var createNeume = function(neume, includeCurrNote, includePrevNote = true) {\n      // add the notes to the neume\n      var lastNoteIndex;\n      if (includeCurrNote) lastNoteIndex = currNoteIndex;\n      else if (includePrevNote) lastNoteIndex = currNoteIndex - 1;\n      else lastNoteIndex = currNoteIndex - 2;\n\n      if (lastNoteIndex < 0) return;\n\n      while (firstNoteIndex <= lastNoteIndex) {\n        let note = notes[firstNoteIndex++];\n        neume.addNote(note);\n        if (note.alText) {\n          if (!neume.alText) neume.alText = [];\n          neume.alText.push(note.alText);\n          note.alText.noteIndex = firstNoteIndex - 1;\n        }\n      }\n\n      neumes.push(neume);\n\n      if (includeCurrNote === false) {\n        currNoteIndex--;\n\n        if (includePrevNote === false) currNoteIndex--;\n\n        neume.keepWithNext = true;\n        if (notes[currNoteIndex + 1].shape === NoteShape.Quilisma)\n          neume.trailingSpace = 0;\n        else {\n          neume.trailingSpace = TrailingSpaceMultiple(1);\n          neume.allowLineBreakBeforeNext = true;\n        }\n      }\n\n      return unknownState;\n    };\n\n    var unknownState = {\n      neume: function() {\n        return new Neumes.Punctum();\n      },\n      handle: function(currNote, prevNote) {\n        if (currNote.shape === NoteShape.Virga) return virgaState;\n        else if (currNote.shape === NoteShape.Stropha) return apostrophaState;\n        else if (currNote.shape === NoteShape.Oriscus) return oriscusState;\n        else if (currNote.shape === NoteShape.Inclinatum)\n          return punctaInclinataState;\n        else if (currNote.shapeModifiers & NoteShapeModifiers.Cavum)\n          return createNeume(new Neumes.Punctum(), true);\n        else return punctumState;\n      }\n    };\n\n    var punctumState = {\n      neume: function() {\n        return new Neumes.Punctum();\n      },\n      handle: function(currNote, prevNote, notesRemaining) {\n        if (currNote.shape || prevNote.liquescent === LiquescentType.Small) {\n          var neume = new Neumes.Punctum();\n          var state = createNeume(neume, false);\n          // if the current note is on a space within the staff AND the previous note is on the line below AND the previous note has a mora,\n          // then we went the trailing space at its default of intraNeumeSpacing to prevent the dot from running up into the current note.\n          // Otherwise, we want no trailing space.\n          if (\n            currNote.staffPosition > prevNote.staffPosition &&\n            (currNote.staffPosition % 2 === 1 ||\n              prevNote.staffPosition !== currNote.staffPosition - 1 ||\n              !prevNote.morae ||\n              prevNote.morae.length === 0)\n          )\n            neume.trailingSpace = 0;\n          return state;\n        }\n\n        if (currNote.staffPosition > prevNote.staffPosition) {\n          if (currNote.ictus)\n            currNote.ictus.positionHint = MarkingPositionHint.Above;\n          return podatusState;\n        } else if (currNote.staffPosition < prevNote.staffPosition) {\n          if (prevNote.ictus)\n            prevNote.ictus.positionHint = MarkingPositionHint.Above;\n          if (currNote.shape === NoteShape.Inclinatum) return climacusState;\n          else if (prevNote.staffPosition - currNote.staffPosition <= 4) {\n            return clivisState;\n          }\n        } else if (!prevNote.morae || !prevNote.morae.length) {\n          return distrophaState;\n        }\n        return createNeume(new Neumes.Punctum(), false);\n      }\n    };\n\n    var punctaInclinataState = {\n      neume: function() {\n        return new Neumes.PunctaInclinata();\n      },\n      handle: function() {\n        if (currNote.shape !== NoteShape.Inclinatum)\n          return createNeume(new Neumes.PunctaInclinata(), false);\n        else return punctaInclinataState;\n      }\n    };\n\n    var oriscusState = {\n      neume: function() {\n        return new Neumes.Oriscus();\n      },\n      handle: function(currNote, prevNote) {\n        if (currNote.shape === NoteShape.Default) {\n          if (currNote.staffPosition > prevNote.staffPosition) {\n            prevNote.shapeModifiers |= NoteShapeModifiers.Ascending;\n            return createNeume(new Neumes.PesQuassus(), true);\n          } else if (currNote.staffPosition < prevNote.staffPosition) {\n            prevNote.shapeModifiers |= NoteShapeModifiers.Descending;\n            return createNeume(new Neumes.Clivis(), true);\n          }\n        }\n        // stand alone oriscus\n        var neume = new Neumes.Oriscus(),\n          state = createNeume(neume, false);\n        // if the current note is on a space within the staff AND the previous note is on the line below AND the previous note has a mora,\n        // then we went the trailing space at its default of intraNeumeSpacing to prevent the dot from running up into the current note.\n        // Otherwise, we want no trailing space.\n        if (\n          currNote.staffPosition > prevNote.staffPosition &&\n          (currNote.staffPosition % 2 === 1 ||\n            prevNote.staffPosition !== currNote.staffPosition - 1 ||\n            !prevNote.morae ||\n            prevNote.morae.length === 0)\n        )\n          neume.trailingSpace = 0;\n        return state;\n      }\n    };\n\n    var podatusState = {\n      neume: function() {\n        return new Neumes.Podatus();\n      },\n      handle: function(currNote, prevNote) {\n        if (currNote.staffPosition > prevNote.staffPosition) {\n          if (currNote.ictus)\n            currNote.ictus.positionHint = MarkingPositionHint.Above;\n          if (prevNote.ictus)\n            prevNote.ictus.positionHint = MarkingPositionHint.Below;\n\n          if (prevNote.shape === NoteShape.Oriscus) return salicusState;\n          else return scandicusState;\n        } else if (currNote.staffPosition < prevNote.staffPosition) {\n          if (currNote.shape === NoteShape.Inclinatum)\n            return pesSubpunctisState;\n          else return torculusState;\n        } else return createNeume(new Neumes.Podatus(), false);\n      }\n    };\n\n    var clivisState = {\n      neume: function() {\n        return new Neumes.Clivis();\n      },\n      handle: function(currNote, prevNote) {\n        if (\n          currNote.shape === NoteShape.Default &&\n          currNote.staffPosition > prevNote.staffPosition\n        ) {\n          if (currNote.ictus)\n            currNote.ictus.positionHint = MarkingPositionHint.Above;\n          return porrectusState;\n        } else return createNeume(new Neumes.Clivis(), false);\n      }\n    };\n\n    var climacusState = {\n      neume: function() {\n        return new Neumes.Climacus();\n      },\n      handle: function(currNote, prevNote) {\n        if (currNote.shape !== NoteShape.Inclinatum)\n          return createNeume(new Neumes.Climacus(), false);\n        else return state;\n      }\n    };\n\n    var porrectusState = {\n      neume: function() {\n        return new Neumes.Porrectus();\n      },\n      handle: function(currNote, prevNote) {\n        if (\n          currNote.shape === NoteShape.Default &&\n          currNote.staffPosition < prevNote.staffPosition\n        )\n          return createNeume(new Neumes.PorrectusFlexus(), true);\n        else return createNeume(new Neumes.Porrectus(), false);\n      }\n    };\n\n    var pesSubpunctisState = {\n      neume: function() {\n        return new Neumes.PesSubpunctis();\n      },\n      handle: function(currNote, prevNote) {\n        if (currNote.shape !== NoteShape.Inclinatum)\n          return createNeume(new Neumes.PesSubpunctis(), false);\n        else return state;\n      }\n    };\n\n    var salicusState = {\n      neume: function() {\n        return new Neumes.Salicus();\n      },\n      handle: function(currNote, prevNote) {\n        if (currNote.staffPosition < prevNote.staffPosition)\n          return salicusFlexusState;\n        else return createNeume(new Neumes.Salicus(), false);\n      }\n    };\n\n    var salicusFlexusState = {\n      neume: function() {\n        return new Neumes.SalicusFlexus();\n      },\n      handle: function(currNote, prevNote) {\n        return createNeume(new Neumes.SalicusFlexus(), false);\n      }\n    };\n\n    var scandicusState = {\n      neume: function() {\n        return new Neumes.Scandicus();\n      },\n      handle: function(currNote, prevNote) {\n        if (\n          prevNote.shape === NoteShape.Virga &&\n          currNote.shape === NoteShape.Inclinatum &&\n          currNote.staffPosition < prevNote.staffPosition\n        ) {\n          // if we get here, then it seems we have a podatus, now being followed by a climacus\n          // rather than a scandicus. react accordingly\n          return createNeume(new Neumes.Podatus(), false, false);\n        } else if (\n          currNote.shape === NoteShape.Default &&\n          currNote.staffPosition < prevNote.staffPosition\n        )\n          return scandicusFlexusState;\n        else return createNeume(new Neumes.Scandicus(), false);\n      }\n    };\n\n    var scandicusFlexusState = {\n      neume: function() {\n        return new Neumes.ScandicusFlexus();\n      },\n      handle: function(currNote, prevNote) {\n        return createNeume(new Neumes.ScandicusFlexus(), false);\n      }\n    };\n\n    var virgaState = {\n      neume: function() {\n        return new Neumes.Virga();\n      },\n      handle: function(currNote, prevNote) {\n        if (\n          currNote.shape === NoteShape.Inclinatum &&\n          currNote.staffPosition < prevNote.staffPosition\n        )\n          return climacusState;\n        else if (\n          currNote.shape === NoteShape.Virga &&\n          currNote.staffPosition === prevNote.staffPosition\n        )\n          return bivirgaState;\n        else return createNeume(new Neumes.Virga(), false);\n      }\n    };\n\n    var bivirgaState = {\n      neume: function() {\n        return new Neumes.Bivirga();\n      },\n      handle: function(currNote, prevNote) {\n        if (\n          currNote.shape === NoteShape.Virga &&\n          currNote.staffPosition === prevNote.staffPosition\n        )\n          return createNeume(new Neumes.Trivirga(), true);\n        else return createNeume(new Neumes.Bivirga(), false);\n      }\n    };\n\n    var apostrophaState = {\n      neume: function() {\n        return new Neumes.Apostropha();\n      },\n      handle: function(currNote, prevNote) {\n        if (currNote.staffPosition === prevNote.staffPosition)\n          return distrophaState;\n        else return createNeume(new Neumes.Apostropha(), false);\n      }\n    };\n\n    var distrophaState = {\n      neume: function() {\n        return new Neumes.Distropha();\n      },\n      handle: function(currNote, prevNote) {\n        if (currNote.staffPosition === prevNote.staffPosition) {\n          if (prevNote.morae && prevNote.morae.length) {\n            return createNeume(new Neumes.Distropha(), false);\n          } else {\n            return tristrophaState;\n          }\n        } else return createNeume(new Neumes.Apostropha(), false, false);\n      }\n    };\n\n    var tristrophaState = {\n      neume: function() {\n        return new Neumes.Tristropha();\n      },\n      handle: function(currNote, prevNote) {\n        // we only create a tristropha when the note run ends after three\n        // and the neume() function of this state is called. Otherwise\n        // we always interpret the third note to belong to the next sequence\n        // of notes.\n        //\n        // fixme: gabc allows any number of punctum/stropha in succession...\n        // is this a valid neume type? Or is it just multiple *stropha neumes\n        // in succession? Should we simplify the apostropha/distropha/\n        // tristropha classes to a generic stropha neume that can have 1 or\n        // more successive notes?\n        return createNeume(new Neumes.Distropha(), false, false);\n      }\n    };\n\n    var torculusState = {\n      neume: function() {\n        return new Neumes.Torculus();\n      },\n      handle: function(currNote, prevNote) {\n        if (\n          currNote.shape === NoteShape.Default &&\n          currNote.staffPosition > prevNote.staffPosition\n        ) {\n          let prevNoteButOne = notes[currNoteIndex - 2];\n          if (\n            prevNoteButOne &&\n            prevNoteButOne.staffPosition - prevNote.staffPosition <= 4\n          ) {\n            if (currNote.ictus)\n              currNote.ictus.positionHint = MarkingPositionHint.Above;\n            return torculusResupinusState;\n          }\n        }\n        return createNeume(new Neumes.Torculus(), false);\n      }\n    };\n\n    var torculusResupinusState = {\n      neume: function() {\n        return new Neumes.TorculusResupinus();\n      },\n      handle: function(currNote, prevNote) {\n        if (\n          currNote.shape === NoteShape.Default &&\n          currNote.staffPosition < prevNote.staffPosition\n        )\n          return createNeume(new Neumes.TorculusResupinusFlexus(), true);\n        else return createNeume(new Neumes.TorculusResupinus(), false);\n      }\n    };\n\n    var state = unknownState;\n\n    while (currNoteIndex < notes.length) {\n      var prevNote = currNoteIndex > 0 ? notes[currNoteIndex - 1] : null;\n      var currNote = notes[currNoteIndex];\n\n      state = state.handle(\n        currNote,\n        prevNote,\n        notes.length - 1 - currNoteIndex\n      );\n\n      // if we are on the last note, then try to create a neume if we need to.\n      if (currNoteIndex === notes.length - 1 && state !== unknownState)\n        createNeume(state.neume(), true);\n\n      currNoteIndex++;\n    }\n\n    if (neumes.length > 0) {\n      if (!finalTrailingSpace.isDefault) {\n        neumes[neumes.length - 1].trailingSpace = finalTrailingSpace;\n        neumes[neumes.length - 1].keepWithNext = true;\n\n        if (finalTrailingSpace > 0)\n          neumes[neumes.length - 1].allowLineBreakBeforeNext = neumes[\n            neumes.length - 1\n          ].keepWithNext = true;\n      }\n    }\n\n    return neumes;\n  }\n\n  // appends any notes created to the notes array argument\n  static createNoteFromData(ctxt, clef, data, notes, sourceIndex) {\n    var note = new Note();\n    note.sourceIndex = sourceIndex;\n    note.sourceGabc = data;\n\n    if (data.length < 1) throw \"Invalid note data: \" + data;\n\n    if (data[0] === \"-\") {\n      // liquescent initio debilis\n      note.liquescent = LiquescentType.InitioDebilis;\n      data = data.substring(1);\n    }\n\n    if (data.length < 1) throw \"Invalid note data: \" + data;\n\n    // the next char is always the pitch\n    var pitch = this.gabcHeightToExsurgePitch(clef, data[0]);\n\n    if (data[0] === data[0].toUpperCase()) note.shape = NoteShape.Inclinatum;\n\n    note.staffPosition = this.gabcHeightToExsurgeHeight(data[0]);\n    note.pitch = pitch;\n\n    var mark;\n\n    var episemaNoteIndex = notes.length;\n    var episemaNote = note;\n\n    // process the modifiers\n    for (var i = 1; i < data.length; i++) {\n      var c = data[i];\n      var lookahead = \"\\0\";\n\n      var haveLookahead = i + 1 < data.length;\n      if (haveLookahead) lookahead = data[i + 1];\n\n      switch (c) {\n        // rhythmic markings\n        case \".\":\n          mark = null;\n\n          // gabc supports putting up to two morae on each note, by repeating the\n          // period. here, we check to see if we've already created a mora for the\n          // note, and if so, we simply force the second one to have an Above\n          // position hint. if a user decides to try to put position indicators\n          // on the double morae (such as 1 or 2), then really the behavior is\n          // not defined by gabc, so it's on the user to figure it out.\n          if (note.morae.length > 0 && notes.length) {\n            var previousNote = notes.slice(-1)[0];\n            var previousMora = note.morae.slice(-1)[0];\n            previousMora.note = previousNote;\n          }\n\n          mark = new Markings.Mora(ctxt, note);\n          if (haveLookahead && lookahead === \"1\")\n            mark.positionHint = MarkingPositionHint.Above;\n          else if (haveLookahead && lookahead === \"0\")\n            mark.positionHint = MarkingPositionHint.Below;\n\n          note.morae.push(mark);\n          break;\n\n        case \"_\":\n          var episemaHadModifier = false;\n\n          mark = new Markings.HorizontalEpisema(episemaNote);\n          while (haveLookahead) {\n            if (lookahead === \"0\")\n              mark.positionHint = MarkingPositionHint.Below;\n            else if (lookahead === \"1\")\n              mark.positionHint = MarkingPositionHint.Above;\n            else if (lookahead === \"2\") mark.terminating = true;\n            // episema terminates\n            else if (lookahead === \"3\")\n              mark.alignment = Markings.HorizontalEpisemaAlignment.Left;\n            else if (lookahead === \"4\")\n              mark.alignment = Markings.HorizontalEpisemaAlignment.Center;\n            else if (lookahead === \"5\")\n              mark.alignment = Markings.HorizontalEpisemaAlignment.Right;\n            else break;\n\n            // the gabc definition for episemata is so convoluted...\n            // - double underscores create episemata over multiple notes.\n            // - unless the _ has a 0, 1, 3, 4, or 5 modifier, which means\n            //   another underscore puts a second episema on the same note\n            // - (when there's a 2 lookahead, then this is treated as an\n            //   unmodified underscore, so another underscore would be\n            //   added to previous notes\n            if (\n              mark.alignment !== Markings.HorizontalEpisemaAlignment.Default &&\n              mark.positionHint !== MarkingPositionHint.Below\n            )\n              episemaHadModifier = true;\n\n            i++;\n            haveLookahead = i + 1 < data.length;\n\n            if (haveLookahead) lookahead = data[i + 1];\n          }\n\n          // since gabc allows consecutive underscores which is a shortcut to\n          // apply the episemata to previous notes, we keep track of that here\n          // in order to add the new episema to the correct note.\n\n          if (episemaNote) episemaNote.episemata.push(mark);\n\n          if (episemaNote === note && episemaHadModifier) episemaNote = note;\n          else if (episemaNoteIndex >= 0 && notes.length > 0)\n            episemaNote = notes[--episemaNoteIndex];\n\n          break;\n\n        case \"'\":\n          mark = new Markings.Ictus(ctxt, note);\n          if (haveLookahead && lookahead === \"1\")\n            mark.positionHint = MarkingPositionHint.Above;\n          else if (haveLookahead && lookahead === \"0\")\n            mark.positionHint = MarkingPositionHint.Below;\n          else if (note.shape === NoteShape.Virga)\n            // ictus on a virga goes above by default:\n            mark.positionHint = MarkingPositionHint.Above;\n\n          note.ictus = mark;\n          break;\n\n        //note shapes\n        case \"r\":\n          if (haveLookahead && /^[0-5]$/.test(lookahead)) {\n            switch (lookahead) {\n              case \"0\":\n                note.shapeModifiers |= NoteShapeModifiers.Cavum;\n                note.shapeModifiers |= NoteShapeModifiers.Linea;\n                break;\n              case \"1\":\n                note.accent = new Markings.Accent(\n                  ctxt,\n                  note,\n                  GlyphCode.AcuteAccent\n                );\n                break;\n              case \"2\":\n                note.accent = new Markings.Accent(\n                  ctxt,\n                  note,\n                  GlyphCode.GraveAccent\n                );\n                break;\n              case \"3\":\n                note.accent = new Markings.Accent(ctxt, note, GlyphCode.Circle);\n                break;\n              case \"4\":\n                note.accent = new Markings.Accent(\n                  ctxt,\n                  note,\n                  GlyphCode.Semicircle\n                );\n                break;\n              case \"5\":\n                note.accent = new Markings.Accent(\n                  ctxt,\n                  note,\n                  GlyphCode.ReversedSemicircle\n                );\n                break;\n              default:\n            }\n            i++;\n          } else note.shapeModifiers |= NoteShapeModifiers.Cavum;\n          break;\n        \n        case \"R\":\n          note.shapeModifiers |= NoteShapeModifiers.Linea;\n          break;\n\n        case \"s\":\n          if (note.shape === NoteShape.Stropha) {\n            // if we're already a stropha, that means this is gabc's\n            // quick stropha feature (e.g., gsss). create a new note\n            let newNote = new Note();\n            newNote.sourceIndex = sourceIndex + i;\n            newNote.sourceGabc = \"s\";\n            newNote.staffPosition = note.staffPosition;\n            newNote.pitch = note.pitch;\n            notes.push(note);\n            note = newNote;\n            episemaNoteIndex++; // since a new note was added, increase the index here\n          }\n\n          note.shape = NoteShape.Stropha;\n          break;\n\n        case \"v\":\n          if (note.shape === NoteShape.Virga) {\n            // if we're already a stropha, that means this is gabc's\n            // quick virga feature (e.g., gvvv). create a new note\n            let newNote = new Note();\n            newNote.sourceIndex = sourceIndex + i;\n            newNote.sourceGabc = \"v\";\n            newNote.staffPosition = note.staffPosition;\n            newNote.pitch = note.pitch;\n            notes.push(note);\n            note = newNote;\n            episemaNoteIndex++; // since a new note was added, increase the index here\n          }\n\n          note.shape = NoteShape.Virga;\n          break;\n        \n        case \"V\":\n          note.shape = NoteShape.Virga;\n          note.shapeModifers |= NoteShapeModifiers.Reverse;\n          break;\n\n        case \"w\":\n          note.shape = NoteShape.Quilisma;\n          break;\n\n        case \"o\":\n          note.shape = NoteShape.Oriscus;\n          if (haveLookahead && lookahead === \"<\") {\n            note.shapeModifiers |= NoteShapeModifiers.Ascending;\n            i++;\n          } else if (haveLookahead && lookahead === \">\") {\n            note.shapeModifiers |= NoteShapeModifiers.Descending;\n            i++;\n          }\n          break;\n\n        case \"O\":\n          note.shape = NoteShape.Oriscus;\n          if (haveLookahead && lookahead === \"<\") {\n            note.shapeModifiers |=\n              NoteShapeModifiers.Ascending | NoteShapeModifiers.Stemmed;\n            i++;\n          } else if (haveLookahead && lookahead === \">\") {\n            note.shapeModifiers |=\n              NoteShapeModifiers.Descending | NoteShapeModifiers.Stemmed;\n            i++;\n          } else note.shapeModifiers |= NoteShapeModifiers.Stemmed;\n          break;\n\n        // liquescents\n        case \"~\":\n          if (note.shape === NoteShape.Inclinatum)\n            note.liquescent |= LiquescentType.Small;\n          else if (note.shape === NoteShape.Oriscus)\n            note.liquescent |= LiquescentType.Large;\n          else note.liquescent |= LiquescentType.Small;\n          break;\n        case \"<\":\n          note.liquescent |= LiquescentType.Ascending;\n          break;\n        case \">\":\n          note.liquescent |= LiquescentType.Descending;\n          break;\n\n        // accidentals\n        case \"x\":\n          if (note.pitch.step === Step.Mi) note.pitch.step = Step.Me;\n          else if (note.pitch.step === Step.Ti) note.pitch.step = Step.Te;\n          break;\n        case \"y\":\n          if (note.pitch.step === Step.Te) note.pitch.step = Step.Ti;\n          else if (note.pitch.step === Step.Me) note.pitch.step = Step.Mi;\n          else if (note.pitch.step === Step.Du) note.pitch.step = Step.Do;\n          else if (note.pitch.step === Step.Fu) note.pitch.step = Step.Fa;\n          break;\n        case \"#\":\n          if (note.pitch.step === Step.Do) note.pitch.step = Step.Du;\n          else if (note.pitch.step === Step.Fa) note.pitch.step = Step.Fu;\n          break;\n\n        // gabc special item groups\n        case \"[\":\n          // read in the whole group and parse it\n          var startIndex = ++i;\n          while (i < data.length && data[i] !== \"]\") i++;\n\n          this.processInstructionForNote(\n            ctxt,\n            note,\n            data.substring(startIndex, i),\n            startIndex\n          );\n          break;\n      }\n    }\n\n    if (\n      this.needToEndBrace &&\n      !note.braceStart &&\n      !note.braceEnd &&\n      !/[xy#]/.test(c)\n    ) {\n      note.braceEnd = new Markings.BracePoint(\n        note,\n        this.needToEndBrace.isAbove,\n        this.needToEndBrace.shape,\n        this.needToEndBrace.attachment === Markings.BraceAttachment.Left\n          ? Markings.BraceAttachment.Right\n          : Markings.BraceAttachment.Left\n      );\n      note.braceEnd.automatic = true;\n      delete this.needToEndBrace;\n    }\n\n    notes.push(note);\n  }\n\n  // an instruction in this context is referring to a special gabc coding found after\n  // notes between ['s and ]'s. choral signs and braces fall into this\n  // category.\n  //\n  // currently only brace instructions are supported here!\n  static processInstructionForNote(ctxt, note, instruction, sourceIndexOffset) {\n    var results = instruction.match(__bracketedCommandRegex);\n    if (results === null) return;\n    var cmd = results[1];\n    var data = results[2];\n    switch (cmd) {\n      case \"cs\":\n        note.choralSign = new ChoralSign(\n          ctxt,\n          data,\n          note,\n          note.sourceIndex + sourceIndexOffset,\n          instruction.length\n        );\n        return;\n      case \"alt\":\n        note.alText = new AboveLinesText(\n          ctxt,\n          data,\n          note,\n          note.sourceIndex + sourceIndexOffset,\n          instruction.length\n        );\n        return;\n    }\n\n    results = instruction.match(__braceSpecRegex);\n\n    if (results === null) return;\n\n    // see the comments at the definition of __braceSpecRegex for the\n    // capturing groups\n    var above = results[1] === \"o\";\n    var shape = Markings.BraceShape.CurlyBrace; // default\n\n    switch (results[2]) {\n      case \"b\":\n        shape = Markings.BraceShape.RoundBrace;\n        break;\n      case \"cb\":\n        shape = Markings.BraceShape.CurlyBrace;\n        break;\n      case \"cba\":\n        shape = Markings.BraceShape.AccentedCurlyBrace;\n        break;\n    }\n\n    var attachmentPoint =\n      results[3] === \"1\"\n        ? Markings.BraceAttachment.Left\n        : Markings.BraceAttachment.Right;\n\n    if (results[4] === \"{\" || results[5])\n      note.braceStart = new Markings.BracePoint(\n        note,\n        above,\n        shape,\n        attachmentPoint\n      );\n    else\n      note.braceEnd = new Markings.BracePoint(\n        note,\n        above,\n        shape,\n        attachmentPoint\n      );\n\n    // just have the next note end a brace that uses length;\n    if (results[5]) {\n      note.braceStart.automatic = true;\n      this.needToEndBrace = note.braceStart;\n    }\n  }\n\n  // takes raw gabc text source and parses it into words. For example, passing\n  // in a string of \"me(f.) (,) ma(fff)num(d!ewf) tu(fgF'E)am,(f.)\" would return\n  // an array of four strings: [\"me(f.)\", \"(,)\", \"ma(fff)num(d!ewf)\", \"tu(fgF'E)am,(f.)\"]\n  static splitWords(gabcNotations) {\n    // split the notations on whitespace boundaries, as long as the space\n    // immediately follows a set of parentheses. Prior to doing that, we replace\n    // all whitespace with spaces, which prevents tabs and newlines from ending\n    // up in the notation data.\n    gabcNotations = gabcNotations\n      // .trim()\n      // .replace(/\\s/g, \" \")\n      .replace(/\\)\\s(?=[^\\)]*(?:\\(|$))/g, \")\\n\");\n    return gabcNotations.split(/\\n/g);\n  }\n\n  static parseSource(gabcSource) {\n    return this.parseWords(this.splitWords(gabcSource));\n  }\n\n  // gabcWords is an array of strings, e.g., the result of splitWords above\n  static parseWords(gabcWords) {\n    var words = [];\n\n    for (var i = 0; i < gabcWords.length; i++)\n      words.push(this.parseWord(gabcWords[i]));\n\n    return words;\n  }\n\n  // returns an array of objects, each of which has the following properties\n  //  - notations (string)\n  //  - lyrics (array of strings)\n  static parseWord(gabcWord) {\n    var syllables = [];\n    var matches = [];\n\n    syllables.wordLength = gabcWord.length;\n\n    while ((match = __syllablesRegex.exec(gabcWord))) matches.push(match);\n\n    for (var j = 0; j < matches.length; j++) {\n      var match = matches[j];\n\n      var lyrics = match[1].trim().split(\"|\");\n      var notations = match[2];\n\n      syllables.push({\n        notations: notations,\n        lyrics: lyrics\n      });\n    }\n\n    return syllables;\n  }\n\n  // returns pitch\n  static gabcHeightToExsurgeHeight(gabcHeight) {\n    return gabcHeight.toLowerCase().charCodeAt(0) - \"a\".charCodeAt(0) - 6;\n  }\n\n  // returns pitch\n  static gabcHeightToExsurgePitch(clef, gabcHeight) {\n    var exsurgeHeight = this.gabcHeightToExsurgeHeight(gabcHeight);\n\n    var pitch = clef.staffPositionToPitch(exsurgeHeight);\n\n    return pitch;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Exsurge.Gabc.js","//\n// Author(s):\n// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n//\n// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\nimport {\n  LiquescentType,\n  NoteShape,\n  NoteShapeModifiers\n} from \"./Exsurge.Chant.js\";\nimport {\n  ChantNotationElement,\n  GlyphCode, LineaVisualizer, MarkingPositionHint,\n  NeumeLineVisualizer, VirgaLineVisualizer\n} from \"./Exsurge.Drawing.js\";\nimport { Glyphs } from \"./Exsurge.Glyphs.js\";\n\nclass NeumeBuilder {\n  constructor(ctxt, neume, startingX = 0) {\n    this.ctxt = ctxt;\n    this.neume = neume;\n    this.x = startingX;\n    this.lastNote = null;\n    this.lineIsHanging = false;\n    this.minX = 0;\n  }\n\n  // used to start a hanging line on the left of the next note\n  lineFrom(note) {\n    var previousNotation = this.ctxt.notations[this.ctxt.currNotationIndex - 1];\n    if (\n      this.x === 0 &&\n      previousNotation &&\n      previousNotation.notes &&\n      previousNotation.trailingSpace === 0\n    ) {\n      this.lastNote = previousNotation.notes.slice(-1)[0];\n      this.minX = -this.ctxt.neumeLineWeight;\n    } else {\n      this.lastNote = note;\n      this.lineIsHanging = true;\n    }\n    return this;\n  }\n\n  // add a note, with a connecting line on the left if we have one\n  noteAt(note, glyph, withLineTo = true) {\n    if (!note) throw \"NeumeBuilder.noteAt: note must be a valid note\";\n\n    if (!glyph) throw \"NeumeBuilder.noteAt: glyph must be a valid glyph code\";\n\n    note.setGlyph(this.ctxt, glyph);\n    var noteAlignsRight = note.glyphVisualizer.align === \"right\";\n\n    var needsLine =\n      withLineTo &&\n      this.lastNote !== null &&\n      (this.lineIsHanging ||\n        (this.lastNote.glyphVisualizer &&\n          this.lastNote.glyphVisualizer.align === \"right\") ||\n        Math.abs(this.lastNote.staffPosition - note.staffPosition) > 1);\n\n    if (needsLine) {\n      var line = new NeumeLineVisualizer(\n        this.ctxt,\n        this.lastNote,\n        note,\n        this.lineIsHanging\n      );\n      this.neume.addVisualizer(line);\n      line.bounds.x = Math.max(this.minX, this.x - line.bounds.width);\n\n      if (!noteAlignsRight) this.x = line.bounds.x;\n    }\n    \n    let xOffset = 0;\n    if (note.shapeModifiers & NoteShapeModifiers.Linea) {\n      var linea = new LineaVisualizer(\n        this.ctxt,\n        note\n      );\n      this.neume.addVisualizer(linea);\n      note.origin.x += linea.origin.x;\n      xOffset = linea.origin.x;\n    }\n\n    // if this is the first note of a right aligned glyph (probably an initio debilis),\n    // then there's nothing to worry about. but if it's not then first, then this\n    // subtraction will right align it visually\n    if (noteAlignsRight && this.lastNote)\n      note.bounds.x = this.x - note.bounds.width;\n    else {\n      note.bounds.x = this.x + xOffset;\n      this.x += note.bounds.width + xOffset;\n    }\n\n    this.neume.addVisualizer(note);\n\n    this.lastNote = note;\n    this.lineIsHanging = false;\n\n    return this;\n  }\n\n  // a special form of noteAdd that creates a virga\n  // uses a punctum cuadratum and a line rather than the virga glyphs\n  virgaAt(note, withLineTo = true) {\n    // add the punctum for the virga\n    this.noteAt(note, GlyphCode.PunctumQuadratum);\n\n    // add a line for the virga\n    var line = new VirgaLineVisualizer(this.ctxt, note);\n    this.x -= line.bounds.width;\n    if (note.shapeModifers & NoteShapeModifiers.Reverse) {\n      line.bounds.x = 0;\n    } else {\n      line.bounds.x = this.x;\n    }\n    this.neume.addVisualizer(line);\n\n    this.lastNote = note;\n    this.lineIsHanging = false;\n\n    return this;\n  }\n\n  advanceBy(x) {\n    this.lastNote = null;\n    this.lineIsHanging = false;\n\n    this.x += x;\n\n    return this;\n  }\n\n  // for terminating hanging lines with no lower notes\n  withLineEndingAt(note) {\n    if (this.lastNote === null) return;\n\n    var line = new NeumeLineVisualizer(this.ctxt, this.lastNote, note, true);\n    this.neume.addVisualizer(line);\n    this.x -= line.bounds.width;\n    line.bounds.x = this.x;\n\n    this.neume.addVisualizer(line);\n\n    this.lastNote = note;\n\n    return this;\n  }\n\n  withPodatus(lowerNote, upperNote) {\n    var upperGlyph;\n    var lowerGlyph;\n\n    if (lowerNote.liquescent === LiquescentType.InitioDebilis) {\n      // liquescent upper note or not?\n      if (upperNote.liquescent === LiquescentType.None)\n        upperGlyph = GlyphCode.PunctumQuadratum;\n      else upperGlyph = GlyphCode.PunctumQuadratumDesLiquescent;\n\n      lowerGlyph = GlyphCode.TerminatingDesLiquescent;\n    } else if (upperNote.liquescent & LiquescentType.Small) {\n      lowerGlyph = GlyphCode.BeginningAscLiquescent;\n      upperGlyph = GlyphCode.TerminatingAscLiquescent;\n    } else if (upperNote.liquescent & LiquescentType.Ascending) {\n      lowerGlyph = GlyphCode.PunctumQuadratum;\n      upperGlyph = GlyphCode.PunctumQuadratumAscLiquescent;\n    } else if (upperNote.liquescent & LiquescentType.Descending) {\n      lowerGlyph = GlyphCode.PunctumQuadratum;\n      upperGlyph = GlyphCode.PunctumQuadratumDesLiquescent;\n    } else {\n      // standard shape\n      lowerGlyph = GlyphCode.PodatusLower;\n      upperGlyph = GlyphCode.PodatusUpper;\n    }\n\n    // allow a quilisma pes\n    if (lowerNote.shape === NoteShape.Quilisma) lowerGlyph = GlyphCode.Quilisma;\n\n    this.noteAt(lowerNote, lowerGlyph).noteAt(upperNote, upperGlyph);\n\n    // make sure we don't have lines connected to the podatus\n    this.lastNote = null;\n\n    return this;\n  }\n\n  withClivis(upper, lower) {\n    var lowerGlyph;\n\n    if (upper.shape === NoteShape.Oriscus)\n      this.noteAt(upper, GlyphCode.OriscusDes, false);\n    else this.lineFrom(lower).noteAt(upper, GlyphCode.PunctumQuadratum);\n\n    if (lower.liquescent & LiquescentType.Small) {\n      lowerGlyph = GlyphCode.TerminatingDesLiquescent;\n    } else if (lower.liquescent === LiquescentType.Ascending)\n      lowerGlyph = GlyphCode.PunctumQuadratumAscLiquescent;\n    else if (lower.liquescent === LiquescentType.Descending)\n      lowerGlyph = GlyphCode.PunctumQuadratumDesLiquescent;\n    else lowerGlyph = GlyphCode.PunctumQuadratum;\n\n    this.noteAt(lower, lowerGlyph);\n\n    // make sure we don't have lines connected to the clivis\n    this.lastNote = null;\n\n    return this;\n  }\n\n  // lays out a sequence of notes that are inclinata (e.g., climacus, pes subpunctis)\n  withInclinata(notes) {\n    var staffPosition = notes[0].staffPosition,\n      prevStaffPosition = notes[0].staffPosition;\n\n    // it is important to advance by the width of the inclinatum glyph itself\n    // rather than by individual note widths, so that any liquescents are spaced\n    // the same as non-liquscents\n    var advanceWidth =\n      Glyphs.PunctumInclinatum.bounds.width * this.ctxt.glyphScaling;\n\n    // now add all the punctum inclinatum\n    for (var i = 0; i < notes.length; i++, prevStaffPosition = staffPosition) {\n      var note = notes[i];\n\n      if (note.liquescent & LiquescentType.Small)\n        note.setGlyph(this.ctxt, GlyphCode.PunctumInclinatumLiquescent);\n      else if (note.liquescent & LiquescentType.Large)\n        // fixme: is the large inclinatum liquescent the same as the apostropha?\n        note.setGlyph(this.ctxt, GlyphCode.Stropha);\n      // fixme: some climaci in the new chant books end with a punctum quadratum\n      // (see, for example, the antiphon \"Sancta Maria\" for October 7).\n      else note.setGlyph(this.ctxt, GlyphCode.PunctumInclinatum);\n\n      staffPosition = note.staffPosition;\n\n      var multiple = Math.abs(prevStaffPosition - staffPosition);\n      switch (multiple) {\n        case 0:\n          multiple = 1.1;\n          break;\n        default:\n          multiple *= 2 / 3;\n          break;\n      }\n\n      if (i > 0) this.x += advanceWidth * multiple;\n\n      note.bounds.x = this.x;\n\n      this.neume.addVisualizer(note);\n    }\n\n    return this;\n  }\n\n  withPorrectusSwash(start, end) {\n    var needsLine =\n      this.lastNote !== null &&\n      (this.lineIsHanging ||\n        (this.lastNote.glyphVisualizer &&\n          this.lastNote.glyphVisualizer.align === \"right\") ||\n        Math.abs(this.lastNote.staffPosition - start.staffPosition) > 1);\n\n    if (needsLine) {\n      var line = new NeumeLineVisualizer(\n        this.ctxt,\n        this.lastNote,\n        start,\n        this.lineIsHanging\n      );\n      this.x = Math.max(this.minX, this.x - line.bounds.width);\n      line.bounds.x = this.x;\n      this.neume.addVisualizer(line);\n    }\n\n    var glyph;\n\n    switch (start.staffPosition - end.staffPosition) {\n      case 1:\n        glyph = GlyphCode.Porrectus1;\n        break;\n      case 2:\n        glyph = GlyphCode.Porrectus2;\n        break;\n      case 3:\n        glyph = GlyphCode.Porrectus3;\n        break;\n      case 4:\n        glyph = GlyphCode.Porrectus4;\n        break;\n      default:\n        // fixme: should we generate an error here?\n        glyph = GlyphCode.None;\n        break;\n    }\n\n    start.setGlyph(this.ctxt, glyph);\n    start.bounds.x = this.x;\n\n    // the second glyph does not draw anything, but it still has logical importance for the editing\n    // environment...it can respond to changes which will then change the swash glyph of the first.\n    end.setGlyph(this.ctxt, GlyphCode.None);\n\n    this.x = start.bounds.right();\n    end.bounds.x = this.x - end.bounds.width;\n\n    this.neume.addVisualizer(start);\n    this.neume.addVisualizer(end);\n\n    this.lastNote = end;\n    this.lineIsHanging = false;\n\n    return this;\n  }\n}\n\n/*\n * Neumes base class\n */\nexport class Neume extends ChantNotationElement {\n  constructor(notes = []) {\n    super();\n\n    this.isNeume = true; // poor man's reflection\n    this.notes = notes;\n\n    for (var i = 0; i < notes.length; i++) notes[i].neume = this;\n  }\n\n  addNote(note) {\n    note.neume = this;\n    this.notes.push(note);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n  }\n\n  finishLayout(ctxt) {\n    this.ledgerLines = this.requiresLedgerLine();\n\n    // allow subclasses an opportunity to position their own markings...\n    this.positionMarkings();\n\n    // layout the markings of the notes\n    for (var i = 0; i < this.notes.length; i++) {\n      var note = this.notes[i];\n      var j;\n\n      for (j = 0; j < note.episemata.length; j++) {\n        note.episemata[j].performLayout(ctxt);\n        this.addVisualizer(note.episemata[j]);\n      }\n\n      for (j = 0; j < note.morae.length; j++) {\n        note.morae[j].performLayout(ctxt);\n        this.addVisualizer(note.morae[j]);\n      }\n\n      // if the note has an ictus, then add it here\n      if (note.ictus) {\n        note.ictus.performLayout(ctxt);\n        this.addVisualizer(note.ictus);\n      }\n\n      if (note.accent) {\n        note.accent.performLayout(ctxt);\n        this.addVisualizer(note.accent);\n      }\n\n      if (note.choralSign) {\n        note.choralSign.performLayout(ctxt);\n        this.addVisualizer(note.choralSign);\n      }\n\n      // braces are handled by the chant line, so we don't mess with them here\n      // this is because brace size depends on chant line logic (neume spacing,\n      // justification, etc.) so they are considered chant line level\n      // markings rather than note level markings\n    }\n\n    this.origin.x = this.notes[0].origin.x;\n    this.origin.y = this.notes[0].origin.y;\n\n    super.finishLayout(ctxt);\n  }\n\n  requiresLedgerLine() {\n    var firstAbove = false,\n      needsAbove = false,\n      firstBelow = false,\n      needsBelow = false,\n      // isPorrectus = false,\n      result = [];\n\n    if (!this.notes) return result;\n\n    for (var i = 0; i < this.notes.length; ++i) {\n      var note = this.notes[i];\n      var staffPosition = note.staffPosition;\n      if (staffPosition >= 4) {\n        needsAbove = needsAbove || staffPosition >= 5;\n        if (firstAbove === false) firstAbove = Math.max(0, i - 1);\n        if (staffPosition >= 5) continue;\n      } else if (staffPosition <= -4) {\n        needsBelow = needsBelow || staffPosition <= -5;\n        if (firstBelow === false) firstBelow = Math.max(0, i - 1);\n        if (staffPosition <= -5) continue;\n      }\n      if (needsAbove || needsBelow) {\n        var endI = i; // Math.abs(staffPosition) >= 4? i : i - 1;\n        result.push({\n          element: this.notes[firstAbove || firstBelow || 0],\n          endElem: this.notes[endI],\n          staffPosition: needsAbove ? 5 : -5\n        });\n        firstAbove = firstBelow = needsAbove = needsBelow = false;\n      }\n      // isPorrectus = /^Porrectus\\d$/.test(note.glyphVisualizer.glyphCode);\n    }\n    if (needsAbove || needsBelow) {\n      result.push({\n        element: this.notes[firstAbove || firstBelow || 0],\n        endElem: this.notes[this.notes.length - 1],\n        staffPosition: needsAbove ? 5 : -5\n      });\n    }\n    return result;\n  }\n\n  resetDependencies() {}\n\n  build(ctxt) {\n    return new NeumeBuilder(ctxt, this);\n  }\n  positionEpisemata(note, position) {\n    var i;\n    for (i = 0; i < note.episemata.length; i++)\n      if (note.episemata[i].positionHint === MarkingPositionHint.Default)\n        note.episemata[i].positionHint = position;\n    if (note.choralSign) note.choralSign.positionHint = position;\n    return note.episemata.length;\n  }\n  positionEpisemataAbove(note) {\n    return this.positionEpisemata(note, MarkingPositionHint.Above);\n  }\n  positionEpisemataBelow(note) {\n    return this.positionEpisemata(note, MarkingPositionHint.Below);\n  }\n\n  positionPodatusEpisemata(bottomNote, topNote) {\n    // 1. episema on lower note by default be below, upper note above\n    this.positionEpisemataBelow(bottomNote);\n    this.positionEpisemataAbove(topNote);\n  }\n  positionInclinataMorae(notes) {\n    notes = notes.slice(-2);\n    if (notes.length < 2 || notes[1].staffPosition > notes[0].staffPosition)\n      return;\n    var bottomNote = notes[1],\n      topNote = notes[0],\n      mark;\n\n    // The mora on the second (lower) note should be below the punctum,\n    // if the punctum is on a line and the previous punctum is in the space above.\n    if (\n      Math.abs(bottomNote.staffPosition % 2) === 1 &&\n      topNote.staffPosition - bottomNote.staffPosition === 1 &&\n      bottomNote.morae.length > 0\n    ) {\n      mark = bottomNote.morae.slice(-1)[0];\n      if (mark.positionHint === MarkingPositionHint.Default)\n        mark.positionHint = MarkingPositionHint.Below;\n    }\n  }\n  positionPodatusMorae(bottomNote, topNote) {\n    var mark;\n\n    // The mora on the first (lower) note should be below it,\n    // if it is on a line.\n    if (Math.abs(bottomNote.staffPosition % 2) === 1) {\n      if (bottomNote.morae.length === 1) {\n        mark = bottomNote.morae[0];\n      } else if (topNote.morae.length > 1) {\n        mark = topNote.morae[0];\n      }\n      if (mark && mark.positionHint === MarkingPositionHint.Default)\n        mark.positionHint = MarkingPositionHint.Below;\n    }\n\n    // if there is a mora on the first note but not on the second, and the neume\n    // continues with a punctum higher than the second note, we need to adjust\n    // the space after the neume so that it follows immediately with no gap\n    if (bottomNote.morae.length > 0 && topNote.morae.length === 0) {\n      bottomNote.morae[0].ignoreBounds = true;\n    }\n  }\n  // for any subclasses that begin with a podatus, they can call this from their own positionMarkings()\n  positionPodatusMarkings(bottomNote, topNote) {\n    this.positionPodatusEpisemata(bottomNote, topNote);\n    this.positionPodatusMorae(bottomNote, topNote);\n  }\n\n  // just like a clivis, but the first note of the three also works like the second note of the clivis:\n  // episema below, unless the middle note also has an episema\n  positionTorculusMarkings(firstNote, secondNote, thirdNote) {\n    var hasTopEpisema = this.positionClivisMarkings(secondNote, thirdNote);\n    hasTopEpisema =\n      this.positionEpisemata(\n        firstNote,\n        hasTopEpisema ? MarkingPositionHint.Above : MarkingPositionHint.Below\n      ) && hasTopEpisema;\n    return hasTopEpisema;\n  }\n  positionClivisMorae(firstNote, secondNote) {\n    // 1. second note of a clivis that ends on a line and goes down one step has its mora below:\n    var morae = firstNote.morae.concat(secondNote.morae);\n    if (\n      secondNote.morae.length &&\n      firstNote.staffPosition - secondNote.staffPosition === 1 &&\n      Math.abs(secondNote.staffPosition % 2) === 1\n    ) {\n      morae.slice(-1)[0].positionHint = MarkingPositionHint.Below;\n    }\n  }\n  positionClivisEpisemata(firstNote, secondNote) {\n    var hasTopEpisema = this.positionEpisemataAbove(firstNote);\n    this.positionEpisemata(\n      secondNote,\n      hasTopEpisema ? MarkingPositionHint.Above : MarkingPositionHint.Below\n    );\n    return hasTopEpisema;\n  }\n  positionClivisMarkings(firstNote, secondNote) {\n    this.positionClivisMorae(firstNote, secondNote);\n    return this.positionClivisEpisemata(firstNote, secondNote);\n  }\n\n  positionPorrectusMarkings(firstNote, secondNote, thirdNote) {\n    // episemata on first and second note work like a clivis,\n    // the second note should have its episema below, unless the first note also has an episema.\n    this.positionClivisEpisemata(firstNote, secondNote);\n    this.positionPodatusMarkings(secondNote, thirdNote);\n  }\n\n  positionPorrectusFlexusMarkings(first, second, third, fourth) {\n    var hasTopEpisema = this.positionEpisemataAbove(first);\n    hasTopEpisema = this.positionClivisMarkings(third, fourth) || hasTopEpisema;\n    this.positionEpisemata(\n      second,\n      hasTopEpisema ? MarkingPositionHint.Above : MarkingPositionHint.Below\n    );\n  }\n\n  // subclasses can override this in order to correctly place markings in a neume specific way\n  positionMarkings() {}\n}\n\n/*\n * Apostropha\n */\nexport class Apostropha extends Neume {\n  positionMarkings() {\n    var positionHint = MarkingPositionHint.Above;\n\n    // logic here is this: if first episema is default position, place it above.\n    // then place the second one (if there is one) opposite of the first.\n    for (var i = 0; i < this.notes[0].episemata.length; i++) {\n      if (\n        this.notes[0].episemata[i].positionHint === MarkingPositionHint.Default\n      )\n        this.notes[0].episemata[i].positionHint = positionHint;\n      else positionHint = this.notes[0].episemata[i].positionHint;\n\n      // now place the next one in the opposite position\n      positionHint =\n        positionHint === MarkingPositionHint.Above\n          ? MarkingPositionHint.Below\n          : MarkingPositionHint.Above;\n    }\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    this.build(ctxt).noteAt(\n      this.notes[0],\n      Apostropha.getNoteGlyphCode(this.notes[0])\n    );\n\n    this.finishLayout(ctxt);\n  }\n\n  static getNoteGlyphCode(note) {\n    if (note.shape === NoteShape.Stropha) return GlyphCode.Stropha;\n\n    if (note.liquescent & LiquescentType.Ascending)\n      return GlyphCode.PunctumQuadratumAscLiquescent;\n    else if (note.liquescent & LiquescentType.Descending)\n      return GlyphCode.PunctumQuadratumDesLiquescent;\n\n    if (note.shapeModifiers & NoteShapeModifiers.Cavum)\n      return GlyphCode.PunctumCavum;\n\n    return GlyphCode.PunctumQuadratum;\n  }\n}\n\n/*\n * Bivirga\n *\n * For simplicity in implementation, Bivirga's have two notes in the object\n * structure. These technically must be the same pitch though.\n */\nexport class Bivirga extends Neume {\n  positionMarkings() {\n    this.positionEpisemataAbove(this.notes[0]);\n    this.positionEpisemataAbove(this.notes[1]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    this.build(ctxt)\n      .virgaAt(this.notes[0])\n      .advanceBy(ctxt.intraNeumeSpacing)\n      .virgaAt(this.notes[1]);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Trivirga\n *\n * For simplicity in implementation, Trivirga's have three notes in the object\n * structure. These technically must be the same pitch though.\n */\nexport class Trivirga extends Neume {\n  positionMarkings() {\n    this.positionEpisemataAbove(this.notes[0]);\n    this.positionEpisemataAbove(this.notes[1]);\n    this.positionEpisemataAbove(this.notes[2]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    this.build(ctxt)\n      .virgaAt(this.notes[0])\n      .advanceBy(ctxt.intraNeumeSpacing)\n      .virgaAt(this.notes[1])\n      .advanceBy(ctxt.intraNeumeSpacing)\n      .virgaAt(this.notes[2]);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Climacus\n */\nexport class Climacus extends Neume {\n  positionMarkings() {\n    for (var i = 0; i < this.notes.length; i++) {\n      this.positionEpisemataAbove(this.notes[i]);\n    }\n    this.positionInclinataMorae(this.notes);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    this.build(ctxt)\n      .virgaAt(this.notes[0])\n      .advanceBy(ctxt.intraNeumeSpacing)\n      .withInclinata(this.notes.slice(1));\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Clivis\n */\nexport class Clivis extends Neume {\n  positionMarkings() {\n    this.positionClivisMarkings(this.notes[0], this.notes[1]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var upper = this.notes[0];\n    var lower = this.notes[1];\n\n    this.build(ctxt).withClivis(upper, lower);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Distropha\n *\n * For simplicity in implementation, Distropha's have two notes in the object\n * structure. These technically must be the same pitch though (like Bivirga).\n */\nexport class Distropha extends Neume {\n  positionMarkings() {\n    this.positionEpisemataAbove(this.notes[0]);\n    this.positionEpisemataAbove(this.notes[1]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n    let glyphCodes = this.notes.map((note) =>\n      Apostropha.getNoteGlyphCode(note)\n    );\n    let glyphAdvance = ctxt.intraNeumeSpacing;\n    glyphCodes.slice(0, 2).forEach((glyphCode) => {\n      if (glyphCode === GlyphCode.Stropha)\n        glyphAdvance -= ctxt.intraNeumeSpacing / 4;\n    });\n\n    this.build(ctxt)\n      .noteAt(this.notes[0], glyphCodes[0])\n      .advanceBy(glyphAdvance)\n      .noteAt(this.notes[1], glyphCodes[1]);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Oriscus\n */\nexport class Oriscus extends Neume {\n  positionMarkings() {\n    this.positionEpisemataAbove(this.notes[0]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    // determine the glyph to use\n    var note = this.notes[0];\n    var glyph;\n\n    if (note.liquescent !== LiquescentType.None) {\n      glyph = GlyphCode.OriscusLiquescent;\n    } else {\n      if (note.shapeModifiers & NoteShapeModifiers.Ascending)\n        glyph = GlyphCode.OriscusAsc;\n      else if (note.shapeModifiers & NoteShapeModifiers.Descending)\n        glyph = GlyphCode.OriscusDes;\n      else {\n        // by default we take the descending form, unless we can figure out by a lookahead here\n        glyph = GlyphCode.OriscusDes;\n\n        // try to find a neume following this one\n        var neume = ctxt.findNextNeume();\n\n        if (neume) {\n          var nextNoteStaffPosition = ctxt.activeClef.pitchToStaffPosition(\n            neume.notes[0].pitch\n          );\n\n          if (nextNoteStaffPosition > note.staffPosition)\n            glyph = GlyphCode.OriscusAsc;\n        }\n      }\n    }\n\n    this.build(ctxt).noteAt(note, glyph);\n\n    this.finishLayout(ctxt);\n  }\n\n  resetDependencies() {\n    // a single oriscus tries to automatically use the right direction\n    // based on the following neumes. if we don't have a manually designated\n    // direction, then we reset our layout so that we can try to guess it\n    // at next layout phase.\n    if (\n      this.notes[0].shapeModifiers & NoteShapeModifiers.Ascending ||\n      this.notes[0].shapeModifiers & NoteShapeModifiers.Descending\n    )\n      return;\n\n    this.needsLayout = true;\n  }\n}\n\n/*\n * PesQuassus\n */\nexport class PesQuassus extends Neume {\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var lower = this.notes[0];\n    var upper = this.notes[1];\n\n    var lowerGlyph;\n\n    var lowerStaffPos = lower.staffPosition;\n    var upperStaffPos = upper.staffPosition;\n\n    if (lower.shape === NoteShape.Oriscus) lowerGlyph = GlyphCode.OriscusAsc;\n    else lowerGlyph = GlyphCode.PunctumQuadratum;\n\n    var builder = this.build(ctxt).noteAt(lower, lowerGlyph);\n\n    if (upperStaffPos - lowerStaffPos === 1)\n      // use a virga glyph in this case\n      builder.virgaAt(upper);\n    else if (upper.liquescent === LiquescentType.LargeDescending)\n      builder\n        .noteAt(upper, GlyphCode.PunctumQuadratumDesLiquescent)\n        .withLineEndingAt(lower);\n    else\n      builder.noteAt(upper, GlyphCode.PunctumQuadratum).withLineEndingAt(lower);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * PesSubpunctis\n */\nexport class PesSubpunctis extends Neume {\n  positionMarkings() {\n    this.positionPodatusEpisemata(this.notes[0], this.notes[1]);\n    for (var i = 2; i < this.notes.length; ++i) {\n      this.positionEpisemataAbove(this.notes[i]);\n    }\n    this.positionInclinataMorae(this.notes.slice(1));\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    // podatus followed by inclinata\n    this.build(ctxt)\n      .withPodatus(this.notes[0], this.notes[1])\n      .advanceBy(ctxt.intraNeumeSpacing * 0.68)\n      .withInclinata(this.notes.slice(2));\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Podatus\n *\n * This podatus class handles a few neume types actually, depending on the note\n * data: Podatus (including various liquescent types on the upper note),\n * Podatus initio debilis, and Quilisma-Pes\n */\nexport class Podatus extends Neume {\n  positionMarkings() {\n    this.positionPodatusMarkings(this.notes[0], this.notes[1]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    this.build(ctxt).withPodatus(this.notes[0], this.notes[1]);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Porrectus\n */\nexport class Porrectus extends Neume {\n  positionMarkings() {\n    this.positionPorrectusMarkings(this.notes[0], this.notes[1], this.notes[2]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var first = this.notes[0];\n    var second = this.notes[1];\n    var third = this.notes[2];\n\n    var thirdGlyph;\n\n    if (third.liquescent & LiquescentType.Small)\n      thirdGlyph = GlyphCode.TerminatingAscLiquescent;\n    else if (third.liquescent & LiquescentType.Descending)\n      thirdGlyph = GlyphCode.PunctumQuadratumDesLiquescent;\n    else thirdGlyph = GlyphCode.PodatusUpper;\n\n    this.build(ctxt)\n      .lineFrom(second)\n      .withPorrectusSwash(first, second)\n      .noteAt(third, thirdGlyph);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * PorrectusFlexus\n */\nexport class PorrectusFlexus extends Neume {\n  positionMarkings() {\n    this.positionPorrectusFlexusMarkings(\n      this.notes[0],\n      this.notes[1],\n      this.notes[2],\n      this.notes[3]\n    );\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var first = this.notes[0];\n    var second = this.notes[1];\n    var third = this.notes[2];\n    var fourth = this.notes[3];\n\n    var thirdGlyph = GlyphCode.PunctumQuadratum,\n      fourthGlyph;\n\n    if (fourth.liquescent & LiquescentType.Small) {\n      thirdGlyph = GlyphCode.PunctumQuadratumDesLiquescent;\n      fourthGlyph = GlyphCode.TerminatingDesLiquescent;\n    } else if (fourth.liquescent & LiquescentType.Ascending)\n      fourthGlyph = GlyphCode.PunctumQuadratumAscLiquescent;\n    else if (fourth.liquescent & LiquescentType.Descending)\n      fourthGlyph = GlyphCode.PunctumQuadratumDesLiquescent;\n    else fourthGlyph = GlyphCode.PunctumQuadratum;\n\n    this.build(ctxt)\n      .lineFrom(second)\n      .withPorrectusSwash(first, second)\n      .noteAt(third, thirdGlyph)\n      .noteAt(fourth, fourthGlyph);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n// this is some type of pseudo nume right? there is no such thing as a neume\n// of puncta inclinata, but this will be part of other composite neumes.\nexport class PunctaInclinata extends Neume {\n  positionMarkings() {\n    this.positionInclinataMorae(this.notes);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    this.build(ctxt).withInclinata(this.notes);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Punctum\n */\nexport class Punctum extends Neume {\n  positionMarkings() {\n    this.positionEpisemataAbove(this.notes[0]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var note = this.notes[0];\n    var glyph = GlyphCode.PunctumQuadratum;\n\n    // determine the glyph to use\n    if (note.liquescent !== LiquescentType.None) {\n      if (note.shape === NoteShape.Inclinatum)\n        glyph = GlyphCode.PunctumInclinatumLiquescent;\n      else if (note.shape === NoteShape.Oriscus)\n        glyph = GlyphCode.OriscusLiquescent;\n      else if (note.liquescent & LiquescentType.Ascending)\n        glyph = GlyphCode.PunctumQuadratumAscLiquescent;\n      else if (note.liquescent & LiquescentType.Descending)\n        glyph = GlyphCode.PunctumQuadratumDesLiquescent;\n      else glyph = GlyphCode.PunctumQuadratumLiquescent;\n    } else {\n      if (note.shapeModifiers & NoteShapeModifiers.Cavum)\n        glyph = GlyphCode.PunctumCavum;\n      else if (note.shape === NoteShape.Inclinatum)\n        glyph = GlyphCode.PunctumInclinatum;\n      else if (note.shape === NoteShape.Quilisma) glyph = GlyphCode.Quilisma;\n      else glyph = GlyphCode.PunctumQuadratum;\n    }\n\n    this.build(ctxt).noteAt(note, glyph);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Salicus\n */\nexport class Salicus extends Neume {\n  positionMarkings() {\n    // by default place episema below\n    // fixme: is this correct?\n    for (var i = 0; i < this.notes.length; i++)\n      this.positionEpisemataBelow(this.notes[i]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var first = this.notes[0];\n    var second = this.notes[1];\n    var third = this.notes[2];\n\n    var builder = this.build(ctxt).noteAt(first, GlyphCode.PunctumQuadratum);\n\n    // if the next note doesn't require a stem connector, then add a tad bit\n    // of spacing here\n    if (!(second.shapeModifiers & NoteShapeModifiers.Stemmed))\n      builder.advanceBy(ctxt.intraNeumeSpacing);\n\n    // second note is always an oriscus, which may or may not be stemmed\n    // to the first\n    builder.noteAt(second, GlyphCode.OriscusAsc);\n\n    // third note can be a punctum quadratum or various liquescent forms\n    if (third.liquescent & LiquescentType.Small)\n      builder.noteAt(third, GlyphCode.TerminatingAscLiquescent);\n    else if (third.liquescent === LiquescentType.Ascending)\n      builder.noteAt(third, GlyphCode.PunctumQuadratumAscLiquescent);\n    else if (third.liquescent === LiquescentType.Descending)\n      builder.noteAt(third, GlyphCode.PunctumQuadratumDesLiquescent);\n    else builder.virgaAt(third);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Salicus Flexus\n */\nexport class SalicusFlexus extends Neume {\n  positionMarkings() {\n    var hasTopEpisema = this.positionTorculusMarkings(\n      this.notes[1],\n      this.notes[2],\n      this.notes[3]\n    );\n    this.positionEpisemata(\n      this.notes[0],\n      hasTopEpisema ? MarkingPositionHint.Above : MarkingPositionHint.Below\n    );\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var first = this.notes[0];\n    var second = this.notes[1];\n    var third = this.notes[2];\n    var fourth = this.notes[3];\n\n    var builder = this.build(ctxt).noteAt(first, GlyphCode.PunctumQuadratum);\n\n    // if the next note doesn't require a stem connector, then add a tad bit\n    // of spacing here\n    if (!(second.shapeModifiers & NoteShapeModifiers.Stemmed))\n      builder.advanceBy(ctxt.intraNeumeSpacing);\n\n    // second note is always an oriscus, which may or may not be stemmed\n    // to the first\n    builder.noteAt(second, GlyphCode.OriscusAsc);\n\n    // third note can be a punctum quadratum or various liquescent forms,\n    // ...based on note four though!\n    if (fourth.liquescent & LiquescentType.Small)\n      builder.noteAt(third, GlyphCode.PunctumQuadratumDesLiquescent);\n    else builder.noteAt(third, GlyphCode.PunctumQuadratum);\n\n    // finally, do the fourth note\n    if (fourth.liquescent & LiquescentType.Small)\n      builder.noteAt(fourth, GlyphCode.TerminatingDesLiquescent);\n    else if (fourth.liquescent & LiquescentType.Ascending)\n      builder.noteAt(fourth, GlyphCode.PunctumQuadratumAscLiquescent);\n    else if (fourth.liquescent & LiquescentType.Descending)\n      builder.noteAt(fourth, GlyphCode.PunctumQuadratumDesLiquescent);\n    else builder.noteAt(fourth, GlyphCode.PunctumQuadratum);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Scandicus\n */\nexport class Scandicus extends Neume {\n  positionMarkings() {\n    if (this.notes[2].shape === NoteShape.Virga) {\n      this.positionPodatusMarkings(this.notes[0], this.notes[1]);\n      this.positionEpisemataAbove(this.notes[2]);\n    } else {\n      this.positionEpisemataBelow(this.notes[0]);\n      this.positionPodatusMarkings(this.notes[1], this.notes[2]);\n    }\n  }\n\n  // if the third note shape is a virga, then the scadicus is rendered\n  // as a podatus followed by a virga. Otherwise, it's rendered as a\n  // punctum followed by a podatus...\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var first = this.notes[0];\n    var second = this.notes[1];\n    var third = this.notes[2];\n\n    if (third.shape === NoteShape.Virga) {\n      this.build(ctxt).withPodatus(first, second).virgaAt(third);\n    } else {\n      this.build(ctxt)\n        .noteAt(\n          first,\n          first.shape === NoteShape.Quilisma\n            ? GlyphCode.Quilisma\n            : GlyphCode.PunctumQuadratum\n        )\n        .withPodatus(second, third);\n    }\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Scandicus Flexus\n */\nexport class ScandicusFlexus extends Neume {\n  positionMarkings() {\n    if (this.notes[2].shape === NoteShape.Virga) {\n      this.positionPodatusMarkings(this.notes[0], this.notes[1]);\n      this.positionClivisMarkings(this.notes[2], this.notes[3]);\n    } else {\n      this.positionEpisemataBelow(this.notes[0]);\n      this.positionPodatusMarkings(this.notes[1], this.notes[2]);\n      this.positionEpisemataAbove(this.notes[3]);\n    }\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var first = this.notes[0];\n    var second = this.notes[1];\n    var third = this.notes[2];\n    var fourth = this.notes[3];\n\n    if (third.shape === NoteShape.Virga) {\n      this.build(ctxt)\n        .withPodatus(first, second)\n        .advanceBy(ctxt.intraNeumeSpacing)\n        .withClivis(third, fourth);\n    } else {\n      var fourthGlyph = GlyphCode.PunctumQuadratum;\n\n      if (fourth.liquescent & LiquescentType.Ascending)\n        fourthGlyph = GlyphCode.PunctumQuadratumAscLiquescent;\n      else if (fourth.liquescent & LiquescentType.Descending)\n        fourthGlyph = GlyphCode.PunctumQuadratumDesLiquescent;\n\n      this.build(ctxt)\n        .noteAt(first, GlyphCode.PunctumQuadratum)\n        .withPodatus(second, third)\n        .advanceBy(ctxt.intraNeumeSpacing)\n        .noteAt(fourth, fourthGlyph);\n    }\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Torculus\n */\nexport class Torculus extends Neume {\n  positionMarkings() {\n    this.positionTorculusMarkings(this.notes[0], this.notes[1], this.notes[2]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var note1 = this.notes[0];\n    var note2 = this.notes[1];\n    var note3 = this.notes[2];\n\n    var glyph1, glyph3;\n\n    if (note1.liquescent === LiquescentType.InitioDebilis)\n      glyph1 = GlyphCode.TerminatingDesLiquescent;\n    else if (note1.shape === NoteShape.Quilisma) glyph1 = GlyphCode.Quilisma;\n    else glyph1 = GlyphCode.PunctumQuadratum;\n\n    if (note3.liquescent & LiquescentType.Small)\n      glyph3 = GlyphCode.TerminatingDesLiquescent;\n    else if (note3.liquescent & LiquescentType.Ascending)\n      glyph3 = GlyphCode.PunctumQuadratumAscLiquescent;\n    else if (note3.liquescent & LiquescentType.Descending)\n      glyph3 = GlyphCode.PunctumQuadratumDesLiquescent;\n    else glyph3 = GlyphCode.PunctumQuadratum;\n\n    this.build(ctxt)\n      .noteAt(note1, glyph1)\n      .noteAt(note2, GlyphCode.PunctumQuadratum)\n      .noteAt(note3, glyph3);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * TorculusResupinus\n */\nexport class TorculusResupinus extends Neume {\n  positionMarkings() {\n    this.positionPorrectusMarkings(this.notes[1], this.notes[2], this.notes[3]);\n    this.positionClivisEpisemata(this.notes[1], this.notes[0]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var first = this.notes[0];\n    var second = this.notes[1];\n    var third = this.notes[2];\n    var fourth = this.notes[3];\n\n    var firstGlyph, fourthGlyph;\n\n    if (first.liquescent === LiquescentType.InitioDebilis) {\n      firstGlyph = GlyphCode.TerminatingDesLiquescent;\n    } else if (first.shape === NoteShape.Quilisma)\n      firstGlyph = GlyphCode.Quilisma;\n    else firstGlyph = GlyphCode.PunctumQuadratum;\n\n    if (fourth.liquescent & LiquescentType.Small)\n      fourthGlyph = GlyphCode.TerminatingAscLiquescent;\n    else if (third.liquescent & LiquescentType.Descending)\n      fourthGlyph = GlyphCode.PunctumQuadratumDesLiquescent;\n    else fourthGlyph = GlyphCode.PodatusUpper;\n\n    this.build(ctxt)\n      .noteAt(first, firstGlyph)\n      .withPorrectusSwash(second, third)\n      .noteAt(fourth, fourthGlyph);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * TorculusResupinusFlexus\n */\nexport class TorculusResupinusFlexus extends Neume {\n  positionMarkings() {\n    this.positionPorrectusFlexusMarkings(\n      this.notes[1],\n      this.notes[2],\n      this.notes[3],\n      this.notes[4]\n    );\n    this.positionClivisEpisemata(this.notes[1], this.notes[0]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var first = this.notes[0];\n    var second = this.notes[1];\n    var third = this.notes[2];\n    var fourth = this.notes[3];\n    var fifth = this.notes[4];\n\n    var firstGlyph,\n      fourthGlyph = GlyphCode.PunctumQuadratum,\n      fifthGlyph;\n\n    if (first.liquescent === LiquescentType.InitioDebilis) {\n      firstGlyph = GlyphCode.TerminatingDesLiquescent;\n    } else if (first.shape === NoteShape.Quilisma)\n      firstGlyph = GlyphCode.Quilisma;\n    else firstGlyph = GlyphCode.PunctumQuadratum;\n\n    if (fifth.liquescent & LiquescentType.Small) {\n      fourthGlyph = GlyphCode.PunctumQuadratumDesLiquescent;\n      fifthGlyph = GlyphCode.TerminatingDesLiquescent;\n    } else if (fifth.liquescent & LiquescentType.Ascending)\n      fifthGlyph = GlyphCode.PunctumQuadratumAscLiquescent;\n    else if (fifth.liquescent & LiquescentType.Descending)\n      fifthGlyph = GlyphCode.PunctumQuadratumDesLiquescent;\n    else fifthGlyph = GlyphCode.PunctumQuadratum;\n\n    this.build(ctxt)\n      .noteAt(first, firstGlyph)\n      .withPorrectusSwash(second, third)\n      .noteAt(fourth, fourthGlyph)\n      .noteAt(fifth, fifthGlyph);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Tristropha\n *\n * For simplicity in implementation, Tristropha's have three notes in the object\n * structure. These technically must be the same pitch though (like the\n * Distropha and Bivirga).\n */\nexport class Tristropha extends Neume {\n  positionMarkings() {\n    this.positionEpisemataAbove(this.notes[0]);\n    this.positionEpisemataAbove(this.notes[1]);\n    this.positionEpisemataAbove(this.notes[2]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n    let glyphCodes = this.notes.map((note) =>\n      Apostropha.getNoteGlyphCode(note)\n    );\n    let glyphAdvance =\n      glyphCodes[0] === GlyphCode.Stropha\n        ? ctxt.intraNeumeSpacing / 2\n        : ctxt.intraNeumeSpacing;\n\n    this.build(ctxt)\n      .noteAt(this.notes[0], glyphCodes[0])\n      .advanceBy(glyphAdvance)\n      .noteAt(this.notes[1], glyphCodes[1])\n      .advanceBy(glyphAdvance)\n      .noteAt(this.notes[2], glyphCodes[2]);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Virga\n */\nexport class Virga extends Neume {\n  positionMarkings() {\n    this.positionEpisemataAbove(this.notes[0]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    this.build(ctxt).virgaAt(this.notes[0]);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Exsurge.Chant.Neumes.js","//\n// Author(s):\n// Benjamin Bloomfield <benjamin@sourceandsummit.com>\n//\n// Copyright (c) 2019\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\nimport { Rect } from \"./Exsurge.Core.js\";\nimport {\n  ChantLayoutElement, QuickSvg, Subtitle, Supertitle, TextLeftRight, Title\n} from \"./Exsurge.Drawing.js\";\n\nexport class Titles extends ChantLayoutElement {\n  constructor(\n    ctxt,\n    score,\n    { supertitle, title, subtitle, textLeft, textRight } = {}\n  ) {\n    super();\n    this.score = score;\n    this.setSupertitle(ctxt, supertitle);\n    this.setTitle(ctxt, title);\n    this.setSubtitle(ctxt, subtitle);\n    this.setTextLeft(ctxt, textLeft);\n    this.setTextRight(ctxt, textRight);\n  }\n\n  setBoundsX(ctxt, elementName, width) {\n    let element = this[elementName];\n    switch (ctxt.textStyles[elementName].alignment) {\n      case \"left\":\n        element.textAnchor = \"start\";\n        element.bounds.x = 0;\n        break;\n      case \"right\":\n        element.textAnchor = \"end\";\n        element.bounds.x = width;\n        break;\n      case \"center\":\n      default:\n        element.textAnchor = \"middle\";\n        element.bounds.x = width / 2;\n    }\n  }\n\n  /**\n   * Lays out the titles, and returns their total height\n   * @param  {ChantContext} ctxt\n   * @return {number}      the tottal height of titles laid out\n   */\n  layoutTitles(ctxt, width) {\n    this.bounds = new Rect(0, 0, 0, 0);\n    let y = 0;\n    if (this.supertitle) {\n      this.supertitle.recalculateMetrics(ctxt);\n      this.supertitle.setMaxWidth(ctxt, width);\n\n      this.setBoundsX(ctxt, \"supertitle\", width);\n      this.supertitle.bounds.y = y;\n      this.bounds.union(this.supertitle.bounds);\n      this.supertitle.bounds.y += this.supertitle.origin.y;\n      y += this.supertitle.bounds.height + this.supertitle.padding(ctxt);\n    }\n    if (this.title) {\n      if (y) y += this.title.padding(ctxt);\n      this.title.recalculateMetrics(ctxt);\n      this.title.setMaxWidth(ctxt, width);\n      this.setBoundsX(ctxt, \"title\", width);\n      this.title.bounds.y = y;\n      this.bounds.union(this.title.bounds);\n      this.title.bounds.y += this.title.origin.y;\n      y += this.title.bounds.height + this.title.padding(ctxt);\n    }\n    if (this.subtitle) {\n      if (y) y += this.subtitle.padding(ctxt);\n      this.subtitle.recalculateMetrics(ctxt);\n      this.subtitle.setMaxWidth(ctxt, width);\n      this.setBoundsX(ctxt, \"subtitle\", width);\n      this.subtitle.bounds.y = y;\n      this.bounds.union(this.subtitle.bounds);\n      this.subtitle.bounds.y += this.subtitle.origin.y;\n      y += this.subtitle.bounds.height + this.subtitle.padding(ctxt);\n    }\n    let finalY = y,\n      textLeft = this.score.overrideTextLeft || this.textLeft;\n    if (textLeft) {\n      textLeft.recalculateMetrics(ctxt);\n      textLeft.bounds.y = y;\n      this.bounds.union(textLeft.bounds);\n      textLeft.bounds.y += textLeft.origin.y;\n      finalY = y + textLeft.bounds.height + textLeft.padding(ctxt);\n    }\n    if (this.textRight) {\n      this.textRight.recalculateMetrics(ctxt);\n      this.textRight.bounds.x = width;\n      this.textRight.bounds.y = y;\n      this.bounds.union(this.textRight.bounds);\n      this.textRight.bounds.y += this.textRight.origin.y;\n      finalY = Math.max(\n        finalY,\n        y + this.textRight.bounds.height + this.textRight.padding(ctxt)\n      );\n    }\n    return finalY;\n  }\n\n  setSupertitle(ctxt, supertitle) {\n    this.supertitle = supertitle ? new Supertitle(ctxt, supertitle) : null;\n  }\n  setTitle(ctxt, title) {\n    this.title = title ? new Title(ctxt, title) : null;\n  }\n  setSubtitle(ctxt, subtitle) {\n    this.subtitle = subtitle ? new Subtitle(ctxt, subtitle) : null;\n  }\n  setTextLeft(ctxt, textLeft) {\n    this.textLeft = textLeft\n      ? new TextLeftRight(ctxt, textLeft, \"textLeft\")\n      : null;\n  }\n  setTextRight(ctxt, textRight) {\n    this.textRight = textRight\n      ? new TextLeftRight(ctxt, textRight, \"textRight\")\n      : null;\n  }\n\n  hasSupertitle(ctxt, supertitle) {\n    return !!this.supertitle;\n  }\n  hasTitle(ctxt, title) {\n    return !!this.title;\n  }\n  hasSubtitle(ctxt, subtitle) {\n    return !!this.subtitle;\n  }\n  hasTextLeft(ctxt, textLeft) {\n    return !!this.textLeft;\n  }\n  hasTextRight(ctxt, textRight) {\n    return !!this.textRight;\n  }\n\n  draw(ctxt, scale = 1) {\n    var canvasCtxt = ctxt.canvasCtxt;\n    canvasCtxt.translate(this.bounds.x, this.bounds.y);\n\n    for (let el of [\n      this.supertitle,\n      this.title,\n      this.subtitle,\n      this.score.overrideTextLeft || this.textLeft,\n      this.textRight\n    ]) {\n      if (el) el.draw(ctxt, scale);\n    }\n\n    canvasCtxt.translate(-this.bounds.x, -this.bounds.y);\n  }\n\n  getInnerNodes(ctxt, functionName = \"createSvgNode\") {\n    var nodes = [];\n\n    for (let el of [\n      this.supertitle,\n      this.title,\n      this.subtitle,\n      this.score.overrideTextLeft || this.textLeft,\n      this.textRight\n    ]) {\n      if (el) nodes.push(el[functionName](ctxt));\n    }\n    return nodes;\n  }\n\n  createSvgNode(ctxt) {\n    var nodes = this.getInnerNodes(ctxt, \"createSvgNode\");\n\n    var node = QuickSvg.createNode(\"g\", { class: \"Titles\" }, nodes);\n\n    node.source = this;\n    this.svg = node;\n\n    return node;\n  }\n\n  createSvgTree(ctxt) {\n    var nodes = this.getInnerNodes(ctxt, \"createSvgTree\");\n\n    return QuickSvg.createSvgTree(\n      \"g\",\n      { class: \"Titles\", source: this },\n      ...nodes\n    );\n  }\n\n  createSvgFragment(ctxt) {\n    var fragment = \"\";\n\n    for (let el of [\n      this.supertitle,\n      this.title,\n      this.subtitle,\n      this.score.overrideTextLeft || this.textLeft,\n      this.textRight\n    ]) {\n      if (el) fragment += el.createSvgFragment(ctxt);\n    }\n\n    fragment = QuickSvg.createFragment(\"g\", { class: \"Titles\" }, fragment);\n    return fragment;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Exsurge.Titles.js"],"sourceRoot":""}